WEBVTT

1
00:00:00.430 --> 00:00:04.130
You will now use everything that
you learned to create a matrix that

2
00:00:04.130 --> 00:00:07.950
corresponds to all the features
of your training example.

3
00:00:07.950 --> 00:00:12.720
Specifically, I will walk you through an
algorithm that allows you to generate this

4
00:00:12.720 --> 00:00:13.960
x matrix.

5
00:00:13.960 --> 00:00:16.810
Let's take a look at how you can build it.

6
00:00:16.810 --> 00:00:21.596
Previously, you saw how to preprocess a
tweet like this one to get a list of words

7
00:00:21.596 --> 00:00:26.684
that contain all the relevant information
for the sentiment analysis tasks in NLP.

8
00:00:26.684 --> 00:00:29.890
With that list of words,
you would be able to get a nice

9
00:00:29.890 --> 00:00:33.325
representation using
a frequency dictionary mapping.

10
00:00:33.325 --> 00:00:38.901
And finally, get a vector with a bias unit
and two additional features that store

11
00:00:38.901 --> 00:00:44.149
the sum of the number of times that every
word on your process tweets appear in

12
00:00:44.149 --> 00:00:50.300
positive tweets and the sum of the number
of times they appear in negative ones.

13
00:00:50.300 --> 00:00:55.370
In practice, you would have to perform
this process on a set of m tweets.

14
00:00:55.370 --> 00:01:00.008
So given a set of multiple raw tweets,
you would have to preprocess them

15
00:01:00.008 --> 00:01:05.450
one by one to get these sets of lists
of words one for each of your tweets.

16
00:01:05.450 --> 00:01:06.540
And finally,

17
00:01:06.540 --> 00:01:11.240
you'd be able to extract features using
a frequencies dictionary mapping.

18
00:01:11.240 --> 00:01:16.170
At the end, you would have a matrix,
X with m rows and three

19
00:01:16.170 --> 00:01:22.020
columns where every row would contain
the features for each one of your tweets.

20
00:01:22.020 --> 00:01:25.720
The general implementation of
this process is rather easy.

21
00:01:25.720 --> 00:01:28.960
First, you build
the frequencies dictionary,

22
00:01:28.960 --> 00:01:33.840
then initialize the matrix X to
match your number of tweets.

23
00:01:33.840 --> 00:01:38.560
After that, you'll want to go over
through your sets of tweets carefully

24
00:01:38.560 --> 00:01:44.420
deleting stop words, stemming, deleting
URLs, and handles and lower casing.

25
00:01:44.420 --> 00:01:48.440
And finally, extract the features
by summing up the positive and

26
00:01:48.440 --> 00:01:51.430
negative frequencies of the tweets.

27
00:01:51.430 --> 00:01:54.858
For this week's assignment, you've
been provided some helper functions,

28
00:01:54.858 --> 00:01:58.060
build_freqs and process_tweet.

29
00:01:58.060 --> 00:02:01.730
However, you'll have to implement
the function to extract the features

30
00:02:01.730 --> 00:02:03.320
of a single tweet.

31
00:02:03.320 --> 00:02:06.810
That was a lot of code, but
at least now you have your X matrix.

32
00:02:06.810 --> 00:02:10.848
And in the next video, we will show you
how you can feed in that X matrix into

33
00:02:10.848 --> 00:02:13.520
your logistic regression classifier.

34
00:02:13.520 --> 00:02:14.920
Let's take a look at how you can do that.