WEBVTT

1
00:00:00.000 --> 00:00:02.445
Good to see you again.

2
00:00:02.445 --> 00:00:04.320
In the last video, you

3
00:00:04.320 --> 00:00:06.765
learned about
locality-sensitive hashing.

4
00:00:06.765 --> 00:00:10.050
Now it is time to put all
this knowledge to use.

5
00:00:10.050 --> 00:00:12.270
You will make an
algorithm that computes

6
00:00:12.270 --> 00:00:15.255
k-nearest neighbors much
faster than brute search.

7
00:00:15.255 --> 00:00:18.240
So far, we've seen
that a few planes,

8
00:00:18.240 --> 00:00:19.635
such as these three,

9
00:00:19.635 --> 00:00:22.245
can divide the vector
space into regions.

10
00:00:22.245 --> 00:00:24.140
But are these planes
the best way to

11
00:00:24.140 --> 00:00:25.990
divide up the vector space?

12
00:00:25.990 --> 00:00:29.840
What if, instead, you divided
the vector space like this?

13
00:00:29.840 --> 00:00:32.810
In fact, you can't know
for sure which sets of

14
00:00:32.810 --> 00:00:36.155
planes is the best way to
divide up the vector space,

15
00:00:36.155 --> 00:00:39.425
so why not create multiple
sets of random planes

16
00:00:39.425 --> 00:00:43.160
so that you can divide up the
vector space into multiple,

17
00:00:43.160 --> 00:00:45.440
independent sets of hash tables.

18
00:00:45.440 --> 00:00:47.135
You can think of it like creating

19
00:00:47.135 --> 00:00:49.370
multiple copies of the universe,

20
00:00:49.370 --> 00:00:51.965
or a multiverse, if you will.

21
00:00:51.965 --> 00:00:53.345
You can make use of

22
00:00:53.345 --> 00:00:56.000
all these different sets
of random planes in

23
00:00:56.000 --> 00:00:57.350
order to help us find

24
00:00:57.350 --> 00:01:00.430
a good set of friendly
neighborhood vectors,

25
00:01:00.430 --> 00:01:04.840
I mean, a set of
k-nearest neighbors.

26
00:01:04.840 --> 00:01:09.080
So back to our multiple
sets of random planes.

27
00:01:09.080 --> 00:01:10.775
Over here, for instance,

28
00:01:10.775 --> 00:01:13.115
let's say you have
a vector space,

29
00:01:13.115 --> 00:01:16.670
and this magenta dot in
the middle represents

30
00:01:16.670 --> 00:01:18.785
the transformation
of an English word

31
00:01:18.785 --> 00:01:20.630
into a French word vector.

32
00:01:20.630 --> 00:01:22.205
You are trying to find

33
00:01:22.205 --> 00:01:24.605
other French word vectors
that may be similar.

34
00:01:24.605 --> 00:01:26.810
So maybe one universe of

35
00:01:26.810 --> 00:01:29.480
random planes helped
us to determine that

36
00:01:29.480 --> 00:01:31.190
this magenta vector and

37
00:01:31.190 --> 00:01:33.110
these green vectors are

38
00:01:33.110 --> 00:01:35.870
all assigned to the
same hash bucket.

39
00:01:35.870 --> 00:01:40.100
Another entirely different set
of random planes helped us

40
00:01:40.100 --> 00:01:42.290
determine that these blue vectors

41
00:01:42.290 --> 00:01:45.080
are in the same hash
bucket as the red vector.

42
00:01:45.080 --> 00:01:49.130
A third set of random planes
helped us determine that

43
00:01:49.130 --> 00:01:50.960
these orange vectors are in

44
00:01:50.960 --> 00:01:53.495
the same hash bucket
as the magenta vector.

45
00:01:53.495 --> 00:01:55.310
By using multiple sets of

46
00:01:55.310 --> 00:01:58.205
random planes for
locality-sensitive hashing,

47
00:01:58.205 --> 00:02:02.330
you have a more robust way of
searching the vector space

48
00:02:02.330 --> 00:02:04.250
for a set of vectors that are

49
00:02:04.250 --> 00:02:06.875
possible candidates to
be nearest neighbors.

50
00:02:06.875 --> 00:02:09.035
This is called approximate

51
00:02:09.035 --> 00:02:10.820
nearest neighbors because you're

52
00:02:10.820 --> 00:02:13.040
not searching the
entire vector space,

53
00:02:13.040 --> 00:02:14.945
but just a subset of it.

54
00:02:14.945 --> 00:02:17.810
So it's not the absolute
k-nearest neighbors,

55
00:02:17.810 --> 00:02:21.200
but it's approximately
the k-nearest neighbors.

56
00:02:21.200 --> 00:02:23.540
You sacrifice some precision in

57
00:02:23.540 --> 00:02:25.735
order to gain efficiency
in your search.

58
00:02:25.735 --> 00:02:27.560
So let's see how to make a set of

59
00:02:27.560 --> 00:02:29.930
random planes in
code assuming that

60
00:02:29.930 --> 00:02:31.130
your word vectors have

61
00:02:31.130 --> 00:02:32.690
two dimensions and you

62
00:02:32.690 --> 00:02:34.505
want to generate
three random planes.

63
00:02:34.505 --> 00:02:37.580
You'll use numpy.random.normal to

64
00:02:37.580 --> 00:02:39.440
generate a matrix of

65
00:02:39.440 --> 00:02:42.305
three rows and two
columns, as you see here.

66
00:02:42.305 --> 00:02:44.435
You'll create a vector v,

67
00:02:44.435 --> 00:02:46.160
and for each random plane,

68
00:02:46.160 --> 00:02:48.815
see which side of the
plane the vector is on.

69
00:02:48.815 --> 00:02:52.070
So you'll find out whether
the vector v is on

70
00:02:52.070 --> 00:02:53.765
the positive or negative side

71
00:02:53.765 --> 00:02:55.475
of each of these three planes.

72
00:02:55.475 --> 00:02:57.550
Notice that instead
of using a for

73
00:02:57.550 --> 00:03:00.020
loop to work on one
plane at a time,

74
00:03:00.020 --> 00:03:01.970
you can use numpy.dot to do

75
00:03:01.970 --> 00:03:04.725
this in one step. Let's
call the function.

76
00:03:04.725 --> 00:03:07.910
The result is that vector v is

77
00:03:07.910 --> 00:03:11.390
on the positive side of each
of the three random planes.

78
00:03:11.390 --> 00:03:13.400
You've already seen
how to combine

79
00:03:13.400 --> 00:03:17.315
these intermediate hash values
into a single hash value,

80
00:03:17.315 --> 00:03:20.300
but please, do check out
the lecture notebook

81
00:03:20.300 --> 00:03:23.675
to see all the code and to
practice this last step.

82
00:03:23.675 --> 00:03:27.110
As you see, locality-sensitive
hashing allows to

83
00:03:27.110 --> 00:03:29.120
compute k-nearest neighbors much

84
00:03:29.120 --> 00:03:30.875
faster than naive search.

85
00:03:30.875 --> 00:03:33.230
This powerful tool
can be used for

86
00:03:33.230 --> 00:03:35.540
many tasks related
to our vectors,

87
00:03:35.540 --> 00:03:37.250
and I will show you how it can be

88
00:03:37.250 --> 00:03:40.020
applied to search
in the next video.