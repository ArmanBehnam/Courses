WEBVTT

1
00:00:00.340 --> 00:00:01.700
Welcome back.

2
00:00:01.700 --> 00:00:04.360
In this video,
I will teach you how layers work.

3
00:00:04.360 --> 00:00:05.800
It's not complicated, but

4
00:00:05.800 --> 00:00:09.520
it's good to understand it well,
as you will be using layers a lot.

5
00:00:09.520 --> 00:00:11.350
You have reviewed neural networks and

6
00:00:11.350 --> 00:00:14.580
gone over the basic
implementation of a serial model.

7
00:00:14.580 --> 00:00:18.170
The serial model is composed
of a series of layers,

8
00:00:18.170 --> 00:00:20.610
which is the basic class in tracks.

9
00:00:20.610 --> 00:00:25.760
Now, I will show you how classes work,
first I will describe classes and

10
00:00:25.760 --> 00:00:27.395
their methods.

11
00:00:27.395 --> 00:00:31.840
In Python, a class is a way to define
common properties and methods for

12
00:00:31.840 --> 00:00:33.370
similar objects.

13
00:00:33.370 --> 00:00:36.500
In other words,
classes define common variables and

14
00:00:36.500 --> 00:00:39.780
behavior for
the object associated with them.

15
00:00:39.780 --> 00:00:43.205
For instance,
let's say that you have different colors,

16
00:00:43.205 --> 00:00:44.861
so you create a color class.

17
00:00:44.861 --> 00:00:48.636
And your color class would have
common parameters, the r, g,

18
00:00:48.636 --> 00:00:54.210
b values for every item defined in
the class, and methods associated with it.

19
00:00:54.210 --> 00:00:58.960
Each of the instances from your class in
this case the colors orange, blue, and

20
00:00:58.960 --> 00:01:03.520
magenta, would be defined with
a specific set of r, g, b values.

21
00:01:03.520 --> 00:01:05.910
Let's go over how to
define a class in Python.

22
00:01:06.910 --> 00:01:11.580
First, name the class,
in this case, I'll call it MyClass.

23
00:01:11.580 --> 00:01:16.230
I'll also indicate that MyClass will
be a subclass of the Objects class,

24
00:01:16.230 --> 00:01:19.020
which is a standard base class in Python.

25
00:01:19.020 --> 00:01:21.010
If you're not familiar with subclasses,
and

26
00:01:21.010 --> 00:01:24.740
inheritance, don't worry about it,
I'll discuss that more later on.

27
00:01:25.790 --> 00:01:29.530
Inside the class, you'll define
the methods associated with the class.

28
00:01:29.530 --> 00:01:34.120
The _init_ method is called when you
initialize any instance of the class and

29
00:01:34.120 --> 00:01:36.370
assigns values to its parameters.

30
00:01:36.370 --> 00:01:39.550
You could define a custom
method to do whatever you like.

31
00:01:39.550 --> 00:01:44.970
For example, in this case, when my_method
is called for an instance of MyClass,

32
00:01:44.970 --> 00:01:49.920
it adds whatever value is stored in
the y parameter to a variable x.

33
00:01:49.920 --> 00:01:53.480
The _call_ method is used when you
call an already initialized instance.

34
00:01:54.670 --> 00:01:58.220
In this case,
when you call an instance of MyClass,

35
00:01:58.220 --> 00:02:01.700
the program will return
the results from my_method.

36
00:02:01.700 --> 00:02:05.301
So to initialize an instance
f of class MyClass,

37
00:02:05.301 --> 00:02:08.820
you'll have to pass the value for
the parameter y.

38
00:02:09.930 --> 00:02:12.262
After f is initialized, you can call it.

39
00:02:12.262 --> 00:02:19.240
For this example, f was initialized
with a value of 7 for the parameter y.

40
00:02:19.240 --> 00:02:23.350
When called with an inputs of 3,
it's adds 3 to y.

41
00:02:23.350 --> 00:02:28.390
So if you implement all of this code in
Python, you should get a value of 10.

42
00:02:28.390 --> 00:02:30.940
Pause and check this process if you like.

43
00:02:30.940 --> 00:02:33.950
A moment ago, I mentioned subclasses,

44
00:02:33.950 --> 00:02:37.010
let's go into a little
more detail on them now.

45
00:02:37.010 --> 00:02:41.655
For instance, let's suppose that you
want to define a subclass for MyClass.

46
00:02:42.690 --> 00:02:48.511
So to do so, you'll define a new class,
which I've named SubClass here.

47
00:02:48.511 --> 00:02:51.171
Indicate that the parents
class is MyClass,

48
00:02:51.171 --> 00:02:54.960
just like I did before with
the object base class.

49
00:02:54.960 --> 00:02:59.520
Any method that you define in
the subclass will override the methods

50
00:02:59.520 --> 00:03:01.000
from the parents class.

51
00:03:01.000 --> 00:03:06.060
So if you redefine my method, the init and
call methods for the SubClass

52
00:03:06.060 --> 00:03:11.140
will be inherited from the parent class,
but my_method will be replaced.

53
00:03:11.140 --> 00:03:17.200
So if you initialize an instance f of your
subclass with parameter y equal to 7,

54
00:03:17.200 --> 00:03:23.820
and then you call f with a value of 3,
you will get a value of 52 instead of 10.

55
00:03:23.820 --> 00:03:26.033
Feel free to pause and
check this implementation.

56
00:03:28.102 --> 00:03:33.180
At this point, you're familiar with
classes, subclasses and instances.

57
00:03:33.180 --> 00:03:36.830
Coming up, you'll take a look
at dense ReLU and serial layers.