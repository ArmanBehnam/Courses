WEBVTT

1
00:00:00.000 --> 00:00:02.940
Earlier, you used an intuitive
approach to fill out

2
00:00:02.940 --> 00:00:06.375
the upper left corner of the
minimum edit distance table.

3
00:00:06.375 --> 00:00:08.475
Now I'll show you how to use

4
00:00:08.475 --> 00:00:11.325
a formulaic approach
to fill out the rest.

5
00:00:11.325 --> 00:00:14.010
So you filled out some
of the table already,

6
00:00:14.010 --> 00:00:15.615
and it looks like this.

7
00:00:15.615 --> 00:00:17.640
Now, to fill out the
rest of the table,

8
00:00:17.640 --> 00:00:19.680
you must first fill out
the remaining cells

9
00:00:19.680 --> 00:00:22.260
of the leftmost
column and top row.

10
00:00:22.260 --> 00:00:24.150
In fact, you know that to

11
00:00:24.150 --> 00:00:26.625
Transform play into
an empty string,

12
00:00:26.625 --> 00:00:28.440
you can just delete each letter.

13
00:00:28.440 --> 00:00:30.150
So let's try that.

14
00:00:30.150 --> 00:00:33.000
You can fill out these
cells top-to-bottom by

15
00:00:33.000 --> 00:00:36.030
following this formula
for each cell.

16
00:00:36.030 --> 00:00:39.060
Look at the cell above
and add the cost of

17
00:00:39.060 --> 00:00:42.435
an extra delete edit,
which will be one.

18
00:00:42.435 --> 00:00:44.060
This means that to make

19
00:00:44.060 --> 00:00:47.045
the string p into
the empty string,

20
00:00:47.045 --> 00:00:51.380
do on delete operation as
shown in the previous example.

21
00:00:51.380 --> 00:00:54.870
To turn the string pl
into the empty string,

22
00:00:54.870 --> 00:00:57.140
the leads p and deletes l,

23
00:00:57.140 --> 00:01:00.185
which are two deletes
operations and so on.

24
00:01:00.185 --> 00:01:03.500
Now at D(4,0) you have

25
00:01:03.500 --> 00:01:07.175
the minimum edit distance for
play to the empty string,

26
00:01:07.175 --> 00:01:11.580
which of course is just the
cost of four deletes four.

27
00:01:11.690 --> 00:01:14.030
You can use the same idea in

28
00:01:14.030 --> 00:01:16.190
the first row by transforming

29
00:01:16.190 --> 00:01:18.410
the empty string to stay by

30
00:01:18.410 --> 00:01:21.020
inserting one letter at a time.

31
00:01:21.020 --> 00:01:24.455
You do that by following this
slightly different formula,

32
00:01:24.455 --> 00:01:26.900
working from the
left to the right,

33
00:01:26.900 --> 00:01:28.790
look at the previous cell and

34
00:01:28.790 --> 00:01:31.325
add a further inserts costs one.

35
00:01:31.325 --> 00:01:34.640
Looks good so far in
the previous example,

36
00:01:34.640 --> 00:01:37.915
I showed you how to calculate
this cell without formulas.

37
00:01:37.915 --> 00:01:40.010
But you can also
find the solution by

38
00:01:40.010 --> 00:01:42.590
applying this big,
scary-looking formula.

39
00:01:42.590 --> 00:01:45.710
It's builds upon the
computation's you've already made

40
00:01:45.710 --> 00:01:49.085
in just the same way as
using the no formula method.

41
00:01:49.085 --> 00:01:50.660
Some of this might feel like it's

42
00:01:50.660 --> 00:01:52.415
repeating what you just learned.

43
00:01:52.415 --> 00:01:55.220
What it's valuable to
see the formulas too,

44
00:01:55.220 --> 00:01:56.660
especially when getting ready

45
00:01:56.660 --> 00:01:58.415
for the end of week assignment.

46
00:01:58.415 --> 00:02:01.520
So the distance to this
orange cell is going to be

47
00:02:01.520 --> 00:02:03.290
the minimum distance to reach it

48
00:02:03.290 --> 00:02:05.540
from any of the
previous three cells.

49
00:02:05.540 --> 00:02:07.185
Interesting, right?

50
00:02:07.185 --> 00:02:10.085
It might seem a little
bit abstract at first,

51
00:02:10.085 --> 00:02:12.635
but you can break it
down into smaller parts.

52
00:02:12.635 --> 00:02:15.800
For example, if you come
from the cell above,

53
00:02:15.800 --> 00:02:17.735
you will add the delete costs

54
00:02:17.735 --> 00:02:19.805
just like you did in
the first column.

55
00:02:19.805 --> 00:02:22.070
If you come from this
cell to the left,

56
00:02:22.070 --> 00:02:23.510
you will add an inserts

57
00:02:23.510 --> 00:02:25.970
costs just like you
did in the top row,

58
00:02:25.970 --> 00:02:28.625
and if you come from this
cell to the upper left,

59
00:02:28.625 --> 00:02:32.600
you'll do one of two things
either at the replace cost if

60
00:02:32.600 --> 00:02:34.940
the two-letter
source I and targets

61
00:02:34.940 --> 00:02:38.480
J don't match or add
nothing if they don't,

62
00:02:38.480 --> 00:02:40.580
because there is
no edit to be done

63
00:02:40.580 --> 00:02:42.715
for letters that's
are already the same.

64
00:02:42.715 --> 00:02:44.945
Here for this cell
you have the minimum

65
00:02:44.945 --> 00:02:47.780
of one plus one, which is two.

66
00:02:47.780 --> 00:02:50.810
Another one plus
one, which is two.

67
00:02:50.810 --> 00:02:53.300
Since these two
letters don't match,

68
00:02:53.300 --> 00:02:54.890
you have zero plus two,

69
00:02:54.890 --> 00:02:56.545
which is also two.

70
00:02:56.545 --> 00:02:59.690
Then you take the minimum
of all three of these,

71
00:02:59.690 --> 00:03:01.565
which is a2 in this case.

72
00:03:01.565 --> 00:03:03.365
Place that value in the cell.

73
00:03:03.365 --> 00:03:06.440
This is the minimum
edit distance from p to

74
00:03:06.440 --> 00:03:09.775
s. By using the formula
and costs defined.

75
00:03:09.775 --> 00:03:12.950
You can then fill out the rest
of the table the same way,

76
00:03:12.950 --> 00:03:15.200
with the (m,n) entry in

77
00:03:15.200 --> 00:03:16.640
the bottom right corner being

78
00:03:16.640 --> 00:03:19.205
the minimum edit distance
from play to stay,

79
00:03:19.205 --> 00:03:21.710
which is four adding

80
00:03:21.710 --> 00:03:23.330
color coding or a heatmap

81
00:03:23.330 --> 00:03:25.295
reveals some
interesting patterns.

82
00:03:25.295 --> 00:03:26.780
Can you see what's happened from

83
00:03:26.780 --> 00:03:29.880
the middle square? That's right.

84
00:03:29.880 --> 00:03:32.849
Once you get from pl to st,

85
00:03:32.849 --> 00:03:35.205
the suffix of both
words is the same

86
00:03:35.205 --> 00:03:38.255
a-y so there are no
more edits needed.

87
00:03:38.255 --> 00:03:41.035
That's why these for
carries down the diagonal.

88
00:03:41.035 --> 00:03:42.470
Now you know how to build

89
00:03:42.470 --> 00:03:44.510
a minimum edit distance algorithm

90
00:03:44.510 --> 00:03:45.995
efficiently using a table.

91
00:03:45.995 --> 00:03:48.620
Well done. There are
a few things worth

92
00:03:48.620 --> 00:03:51.500
noting about this style of
implementation before you go,

93
00:03:51.500 --> 00:03:53.940
I'll show you those next.