WEBVTT

1
00:00:00.000 --> 00:00:01.800
A few quick notes on

2
00:00:01.800 --> 00:00:04.395
the minimum edit distance
implementation you learned.

3
00:00:04.395 --> 00:00:06.900
Measuring the edit
distance by using

4
00:00:06.900 --> 00:00:09.255
the three edits:
inserts, deletes,

5
00:00:09.255 --> 00:00:12.600
and replace with costs 1, 1,

6
00:00:12.600 --> 00:00:17.265
and 2 respectively is known
as Levenshtein distance.

7
00:00:17.265 --> 00:00:18.940
That's what you've used here.

8
00:00:18.940 --> 00:00:21.440
You can look it up for
more details if you like.

9
00:00:21.440 --> 00:00:23.720
There are also
well-known alternatives

10
00:00:23.720 --> 00:00:25.690
that have different edit rules.

11
00:00:25.690 --> 00:00:28.370
Finding the minimum
edit distance on its

12
00:00:28.370 --> 00:00:31.325
own doesn't always solve
the whole problem.

13
00:00:31.325 --> 00:00:34.430
You sometimes need to know
how you got there too.

14
00:00:34.430 --> 00:00:37.920
You do this by keeping
a backtrace which is

15
00:00:37.920 --> 00:00:40.070
simply pointer in each cell

16
00:00:40.070 --> 00:00:42.650
letting you know where you
came from to get there.

17
00:00:42.650 --> 00:00:45.290
So you know the path taken
across the table from

18
00:00:45.290 --> 00:00:48.420
the top-left corner to
the bottom-right corner.

19
00:00:48.420 --> 00:00:50.960
This tells you the
edits taken and is

20
00:00:50.960 --> 00:00:52.940
particularly useful in problems

21
00:00:52.940 --> 00:00:54.724
dealing with string alignment.

22
00:00:54.724 --> 00:00:57.170
But that's a discussion
for another time.

23
00:00:57.170 --> 00:01:00.665
Finally, this tabular
method for computation

24
00:01:00.665 --> 00:01:02.210
instead of brute force is

25
00:01:02.210 --> 00:01:04.819
a technique known as
dynamic programming.

26
00:01:04.819 --> 00:01:07.190
Intuitively, this just means

27
00:01:07.190 --> 00:01:09.230
that solving the
smallest subproblem

28
00:01:09.230 --> 00:01:10.970
first and then reusing

29
00:01:10.970 --> 00:01:13.985
that result to solve the
next biggest subproblem.

30
00:01:13.985 --> 00:01:17.810
Saving that result, reusing
it again and so on.

31
00:01:17.810 --> 00:01:21.080
This is what you did here by
solving each cell in order.

32
00:01:21.080 --> 00:01:24.140
It's a well-known technique
in computer science and will

33
00:01:24.140 --> 00:01:25.430
appear again and again

34
00:01:25.430 --> 00:01:27.575
in the coming weeks
of this course.

35
00:01:27.575 --> 00:01:31.180
That's it. This was a long
lesson, so well done.

36
00:01:31.180 --> 00:01:32.990
You should be proud of yourself.

37
00:01:32.990 --> 00:01:34.550
You took the problem of solving

38
00:01:34.550 --> 00:01:37.490
minimum edit distance and
broke it down into parts.

39
00:01:37.490 --> 00:01:40.130
Then used the tabular
based approach

40
00:01:40.130 --> 00:01:41.480
step-by-step for

41
00:01:41.480 --> 00:01:44.535
a very efficient
implementation. Great work.

42
00:01:44.535 --> 00:01:47.360
Now try the programming
assignment where you will code up

43
00:01:47.360 --> 00:01:49.850
this example with an
optional challenge

44
00:01:49.850 --> 00:01:51.485
to build a backtrace tool.

45
00:01:51.485 --> 00:01:53.180
What a journey?

46
00:01:53.180 --> 00:01:54.980
You're just getting started here.

47
00:01:54.980 --> 00:01:57.995
The weeks ahead are loaded
with more exciting stuff.

48
00:01:57.995 --> 00:02:00.470
But before you go, a quick recap.

49
00:02:00.470 --> 00:02:01.970
In the past few lessons,

50
00:02:01.970 --> 00:02:03.170
you learned a lot about

51
00:02:03.170 --> 00:02:04.940
some real-world applications of

52
00:02:04.940 --> 00:02:07.325
NLP that you're probably
using every day.

53
00:02:07.325 --> 00:02:09.245
You learned about autocorrect

54
00:02:09.245 --> 00:02:11.995
and what it is and how
it works its magic.

55
00:02:11.995 --> 00:02:14.165
You went step-by-step
through how to build

56
00:02:14.165 --> 00:02:16.235
a working autoCorrect model using

57
00:02:16.235 --> 00:02:18.725
edit distance and
work probabilities.

58
00:02:18.725 --> 00:02:20.360
You learned about the problem of

59
00:02:20.360 --> 00:02:24.565
string similarity and metric
of minimum edit distance.

60
00:02:24.565 --> 00:02:27.230
Finally, you learned
a really cool way

61
00:02:27.230 --> 00:02:29.030
to solve minimum edit distance

62
00:02:29.030 --> 00:02:31.715
using a tabular
algorithmic technique

63
00:02:31.715 --> 00:02:33.950
known as dynamic programming.

64
00:02:33.950 --> 00:02:36.245
You now have the
know-how to practice

65
00:02:36.245 --> 00:02:37.430
all these new skills in

66
00:02:37.430 --> 00:02:39.380
the week 1 programming
assignments.

67
00:02:39.380 --> 00:02:40.985
Have fun and good luck.

68
00:02:40.985 --> 00:02:42.800
Now you know how to calculate

69
00:02:42.800 --> 00:02:45.875
the minimum edit distance
using dynamic programming.

70
00:02:45.875 --> 00:02:48.170
Next week, you'll use
dynamic programming

71
00:02:48.170 --> 00:02:51.095
again to assign part of
speech tags to words.

72
00:02:51.095 --> 00:02:54.990
It's an exciting application
which Jones will show you.