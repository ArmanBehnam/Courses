WEBVTT

1
00:00:00.000 --> 00:00:04.050
Hi, again. You'll now use
the Viterbi algorithm to

2
00:00:04.050 --> 00:00:06.300
continue populating
the two matrices

3
00:00:06.300 --> 00:00:08.820
you initialized in
the previous video.

4
00:00:08.820 --> 00:00:10.850
You'll see how you
can assign part of

5
00:00:10.850 --> 00:00:13.975
speech tags to certain
words in the sentence.

6
00:00:13.975 --> 00:00:16.110
Let's take a look at an example.

7
00:00:16.110 --> 00:00:20.100
The forward pass is the second
of three steps to populate

8
00:00:20.100 --> 00:00:21.840
your matrices C and

9
00:00:21.840 --> 00:00:26.070
D. Now that you have initialized
the matrices C and D,

10
00:00:26.070 --> 00:00:28.860
all the remaining entries
in the two matrices,

11
00:00:28.860 --> 00:00:31.020
C and D, are populated

12
00:00:31.020 --> 00:00:33.990
column by column during
the forward pass.

13
00:00:33.990 --> 00:00:35.310
For the C matrix,

14
00:00:35.310 --> 00:00:36.900
the entries are calculated by

15
00:00:36.900 --> 00:00:38.925
this complicated
looking function.

16
00:00:38.925 --> 00:00:41.330
Let's picture the next
step on the graph,

17
00:00:41.330 --> 00:00:43.105
so this becomes clear.

18
00:00:43.105 --> 00:00:47.255
Let's say you want to
calculate the entry C_1,2.

19
00:00:47.255 --> 00:00:49.550
Then you can fill
in the values to

20
00:00:49.550 --> 00:00:51.655
the formula starting
from the last term.

21
00:00:51.655 --> 00:00:54.200
The last term of the
formula is simply

22
00:00:54.200 --> 00:00:59.230
the emission probability
from tag t_1 toward w_2.

23
00:00:59.230 --> 00:01:02.080
You have the a_k,1,

24
00:01:02.080 --> 00:01:04.790
which is the transition
probability from the parts of

25
00:01:04.790 --> 00:01:10.465
speech tag t_k to the
current tag t_1 and t_k1,

26
00:01:10.465 --> 00:01:12.800
which represents
the probability for

27
00:01:12.800 --> 00:01:15.109
the preceding path
you've traversed.

28
00:01:15.109 --> 00:01:18.800
You choose the k, which
maximizes the entire formula.

29
00:01:18.800 --> 00:01:20.600
In this case, there are

30
00:01:20.600 --> 00:01:22.990
three states that are
not the initial state.

31
00:01:22.990 --> 00:01:26.745
So k is either 1, 2 or 3.

32
00:01:26.745 --> 00:01:30.095
In each d_i,j you
simply save the k,

33
00:01:30.095 --> 00:01:33.355
which maximizes the
entry in c_i,j.

34
00:01:33.355 --> 00:01:35.420
Here, there are three states

35
00:01:35.420 --> 00:01:37.040
that are not the initial state,

36
00:01:37.040 --> 00:01:40.990
so k is either 1, 2 or 3.

37
00:01:40.990 --> 00:01:43.835
This is defined by this
scary-looking formula,

38
00:01:43.835 --> 00:01:46.265
which is the same as for c_i,j,

39
00:01:46.265 --> 00:01:48.695
except the leading argmax.

40
00:01:48.695 --> 00:01:51.290
The argmax function
returns the k,

41
00:01:51.290 --> 00:01:53.570
which maximizes the
function arguments

42
00:01:53.570 --> 00:01:55.415
instead of the maximum value.

43
00:01:55.415 --> 00:01:57.880
Almost there just one more step.

44
00:01:57.880 --> 00:02:00.380
You now computes the
probability matrix

45
00:02:00.380 --> 00:02:02.075
using the Viterbi algorithm.

46
00:02:02.075 --> 00:02:04.460
In the next video, you're
going to see how you can use

47
00:02:04.460 --> 00:02:06.410
this probability
matrix that you just

48
00:02:06.410 --> 00:02:08.705
created to reconstruct the path,

49
00:02:08.705 --> 00:02:10.265
so that you can identify

50
00:02:10.265 --> 00:02:13.530
each word with the
parts of speech.