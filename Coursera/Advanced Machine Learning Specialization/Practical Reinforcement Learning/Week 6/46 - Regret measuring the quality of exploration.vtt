WEBVTT

1
00:00:02.630 --> 00:00:05.400
For now, we shall stick to the banner ads example.

2
00:00:05.400 --> 00:00:08.145
It's the first one and arguably the simplest to understand.

3
00:00:08.145 --> 00:00:09.750
One more feature of it is that,

4
00:00:09.750 --> 00:00:13.755
it's one of those rare problems where we get to compute the gradient of your money,

5
00:00:13.755 --> 00:00:16.290
the expected revenue taht you're going to get over next month,

6
00:00:16.290 --> 00:00:18.450
respect to weight of a neural network,

7
00:00:18.450 --> 00:00:20.850
and optimize the gradient accent,

8
00:00:20.850 --> 00:00:24.855
following the gradient of your money.

9
00:00:24.855 --> 00:00:28.020
How cool is that? So, okay. Banner ads.

10
00:00:28.020 --> 00:00:30.690
And for now on, let's imagine that you're not a data scientist,

11
00:00:30.690 --> 00:00:33.060
but an executive officer say CEO.

12
00:00:33.060 --> 00:00:37.710
And you're a CEO of a startup which hosts a site that gets most of its revenue,

13
00:00:37.710 --> 00:00:39.885
your revenue from banner ads.

14
00:00:39.885 --> 00:00:45.090
Of course, you have some huge daily active user accounts by now,

15
00:00:45.090 --> 00:00:47.400
and what you want to do now is you want to optimize,

16
00:00:47.400 --> 00:00:51.375
you want to squeeze as much dirty money from those users as you can.

17
00:00:51.375 --> 00:00:54.135
So, what you going to do as executive officer,

18
00:00:54.135 --> 00:00:56.310
is you're going to hire some data scientists,

19
00:00:56.310 --> 00:00:59.070
or pay some data scientists to do those job for you.

20
00:00:59.070 --> 00:01:02.190
And that just turns out that two guys are willing to do the job.

21
00:01:02.190 --> 00:01:03.705
The first guy says,

22
00:01:03.705 --> 00:01:06.885
"Hello CEO, I've just invented a super mega method.

23
00:01:06.885 --> 00:01:08.640
It uses deep learning block chain,

24
00:01:08.640 --> 00:01:14.535
all those fancy words to learn how to find an optimal policy of banner placement,

25
00:01:14.535 --> 00:01:16.425
and it solves it doesn't matter the problem."

26
00:01:16.425 --> 00:01:17.925
Then comes the second one says,

27
00:01:17.925 --> 00:01:19.320
"Wow this thing is total bullshit.

28
00:01:19.320 --> 00:01:21.970
Instead, you have this method which is much better.

29
00:01:21.970 --> 00:01:25.070
It uses, whatever, another fancy word,

30
00:01:25.070 --> 00:01:27.665
one fancy word, two buzzer word, three buzzer, four."

31
00:01:27.665 --> 00:01:31.185
And that does solve the bandit problem as well,

32
00:01:31.185 --> 00:01:32.595
although in a different way.

33
00:01:32.595 --> 00:01:34.650
So you have those two black box methods,

34
00:01:34.650 --> 00:01:37.035
and being assumed executive officer,

35
00:01:37.035 --> 00:01:40.845
you basically don't know anything about black boxes.

36
00:01:40.845 --> 00:01:43.500
And instead, you have to somehow measure

37
00:01:43.500 --> 00:01:46.740
the efficiency by the business value of those methods.

38
00:01:46.740 --> 00:01:49.260
So what you going to do? How do you pick one of those,

39
00:01:49.260 --> 00:01:50.805
method A or method B?

40
00:01:50.805 --> 00:01:52.925
Well, yes.

41
00:01:52.925 --> 00:01:57.365
Right. The obvious thing to do is to measure money,

42
00:01:57.365 --> 00:02:01.935
and to say give each of those methods some five percent,

43
00:02:01.935 --> 00:02:06.810
10 percent of your user accounts rest runs by your classic advertisement methods.

44
00:02:06.810 --> 00:02:11.445
And what happens to them after say a month of advertisement.

45
00:02:11.445 --> 00:02:14.245
Your task is obviously to get as much money as you can,

46
00:02:14.245 --> 00:02:15.905
but there are a few dilemmas to solve.

47
00:02:15.905 --> 00:02:18.895
For example, I mentioned that method A gives you

48
00:02:18.895 --> 00:02:22.230
say a profit of one million dollars or whatever,

49
00:02:22.230 --> 00:02:24.285
one over each month.

50
00:02:24.285 --> 00:02:27.465
It starts giving it from day zero, and stays there.

51
00:02:27.465 --> 00:02:31.430
While method B starts by giving you almost no profit,

52
00:02:31.430 --> 00:02:36.900
but eventually creeps upwards and gets better than method A in say, half a year.

53
00:02:36.900 --> 00:02:39.480
Or maybe method A does creep up as well,

54
00:02:39.480 --> 00:02:41.040
but not at this pace.

55
00:02:41.040 --> 00:02:44.910
This brings you out of special cases where

56
00:02:44.910 --> 00:02:48.855
your decision might depend on whether you plan to stay in business for next month,

57
00:02:48.855 --> 00:02:50.800
or next year, or eternity.

58
00:02:50.800 --> 00:02:52.830
And in a theoretical field,

59
00:02:52.830 --> 00:02:56.250
this brings you to a notion of regret, source regret.

60
00:02:56.250 --> 00:03:01.080
Regret is basically how much money your algorithm wasted?

61
00:03:01.080 --> 00:03:03.420
Or how much money you could have earned if

62
00:03:03.420 --> 00:03:06.375
your algorithm you the optimal policy from the get go.

63
00:03:06.375 --> 00:03:08.940
So now let's plot this Eta,

64
00:03:08.940 --> 00:03:11.085
the regret value as a function of time.

65
00:03:11.085 --> 00:03:15.030
Then given the point of time, we want to sum up all those differences,

66
00:03:15.030 --> 00:03:18.510
the [inaudible] with optimal policy versus with your policy.

67
00:03:18.510 --> 00:03:20.715
From time step zero to your time step.

68
00:03:20.715 --> 00:03:24.720
So, Eta of 10 would be the sum for time steps zero,

69
00:03:24.720 --> 00:03:27.570
one, two, three, and so on, until you reach the step 10.

70
00:03:27.570 --> 00:03:31.095
Inclusive or exclusive it doesn't quite change what we're going to see.

71
00:03:31.095 --> 00:03:34.050
Since those differences are all positive and you're adding them up,

72
00:03:34.050 --> 00:03:36.300
the function is going to grow or at least,

73
00:03:36.300 --> 00:03:39.750
it's going to either grow or stay where it is if you've converged.

74
00:03:39.750 --> 00:03:44.535
And the curves going to look anything like this, actually.

75
00:03:44.535 --> 00:03:46.110
Lets begin with the blue curve.

76
00:03:46.110 --> 00:03:48.300
You can see is that the regrets,

77
00:03:48.300 --> 00:03:50.790
the y axis value.

78
00:03:50.790 --> 00:03:52.755
Starts very good for the blue curve.

79
00:03:52.755 --> 00:03:56.430
It's below everything else and iteration is like 200,

80
00:03:56.430 --> 00:03:57.720
400, and so on.

81
00:03:57.720 --> 00:04:01.860
But eventually, it exceeds those of any other curve and keeps on growing.

82
00:04:01.860 --> 00:04:04.860
What happened is, basically, This strategy,

83
00:04:04.860 --> 00:04:08.415
the blue one, the strategy failed to converge to the optimal policy.

84
00:04:08.415 --> 00:04:09.960
This actually means that,

85
00:04:09.960 --> 00:04:12.690
if the final policy is not optimal,

86
00:04:12.690 --> 00:04:15.960
then the difference between your policy and optimal policy of

87
00:04:15.960 --> 00:04:19.950
the difference in reward is going to be non-negative and is going to stack up, and grow,

88
00:04:19.950 --> 00:04:21.345
and grow, and grow over time,

89
00:04:21.345 --> 00:04:25.455
until as the time step t converts to the infinity,

90
00:04:25.455 --> 00:04:27.720
your regret is also going to be infinite.

91
00:04:27.720 --> 00:04:32.325
So, this is the bad, theoretical bad case,

92
00:04:32.325 --> 00:04:37.260
where your policy is not optimal at any given moment of time.

93
00:04:37.260 --> 00:04:41.750
So, let's find out what's going to happen if it does get to the optimal.

94
00:04:41.750 --> 00:04:45.165
The red curve here, the second one,

95
00:04:45.165 --> 00:04:47.385
is quite different in how it behaves.

96
00:04:47.385 --> 00:04:48.750
It starts much worse,

97
00:04:48.750 --> 00:04:54.630
at the beginning it gets a lot of regrets early on, because it explores,

98
00:04:54.630 --> 00:04:57.315
it has to be mix up optimal actions to get

99
00:04:57.315 --> 00:05:01.010
a better look of how the actual space looks is like,

100
00:05:01.010 --> 00:05:03.730
how the rewards are defined at all those actions.

101
00:05:03.730 --> 00:05:05.685
But eventually, it converges.

102
00:05:05.685 --> 00:05:08.400
And this case, you can see that it converges to

103
00:05:08.400 --> 00:05:11.685
either almost the simplistic function or almost a horizontal line,

104
00:05:11.685 --> 00:05:13.800
or it converges to the exact horizontal line.

105
00:05:13.800 --> 00:05:15.210
What this means is that,

106
00:05:15.210 --> 00:05:19.065
it has finally found an optimal strategy after some point in time.

107
00:05:19.065 --> 00:05:21.105
And so regret is basically,

108
00:05:21.105 --> 00:05:22.735
it's a constant, it's fixed,

109
00:05:22.735 --> 00:05:24.885
after some number of iterations.

110
00:05:24.885 --> 00:05:28.160
This is a theoretically again, the best outcome.

111
00:05:28.160 --> 00:05:31.340
There's a guarantee that you're going to eventually get to what you want.

112
00:05:31.340 --> 00:05:35.175
Of course, if you get it faster then your policies even better.

113
00:05:35.175 --> 00:05:37.810
Of course, there can be a middle ground if

114
00:05:37.810 --> 00:05:45.610
your regrets starts not that bad but then it grows, but not linearly.

115
00:05:45.610 --> 00:05:47.920
Its growth speed decreases,

116
00:05:47.920 --> 00:05:51.860
and then in the infinity it reaches the constant value,

117
00:05:51.860 --> 00:05:53.790
which means that the regrets,

118
00:05:53.790 --> 00:05:58.425
it grows logarithmically, while the blue curve grows linearly.

119
00:05:58.425 --> 00:06:03.415
And this can be again only derived by looking at some toy tasks

120
00:06:03.415 --> 00:06:05.560
and particular properties of your algorithm that can

121
00:06:05.560 --> 00:06:08.900
be exploited in mathematical derivation.

122
00:06:08.900 --> 00:06:12.660
In practice however, we're going to see something much

123
00:06:12.660 --> 00:06:16.155
more rough round the edges, much less curvy,

124
00:06:16.155 --> 00:06:20.350
and you can see some step like ascension trajectory

125
00:06:20.350 --> 00:06:24.895
at an aerial plot that you can obtain by actually feeding users with your banners.

126
00:06:24.895 --> 00:06:27.680
But let's get further.