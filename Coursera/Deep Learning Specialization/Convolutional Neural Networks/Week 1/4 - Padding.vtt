WEBVTT

1
00:00:01.410 --> 00:00:05.830
In order to build deep neural networks one modification to

2
00:00:05.830 --> 00:00:10.675
the basic convolutional operation that you need to really use is padding.

3
00:00:10.675 --> 00:00:12.232
Let's see how it works.

4
00:00:12.232 --> 00:00:15.190
What we saw in earlier videos is that if you take

5
00:00:15.190 --> 00:00:19.385
a six by six image and convolve it with a three by three filter,

6
00:00:19.385 --> 00:00:23.585
you end up with a four by four output with a four by four matrix,

7
00:00:23.585 --> 00:00:28.080
and that's because the number of possible positions with the three by three filter,

8
00:00:28.080 --> 00:00:29.470
there are only, sort of,

9
00:00:29.470 --> 00:00:31.780
four by four possible positions,

10
00:00:31.780 --> 00:00:37.035
for the three by three filter to fit in your six by six matrix.

11
00:00:37.035 --> 00:00:41.346
And the math of this this turns out to be that if you have

12
00:00:41.346 --> 00:00:45.725
a end by end image and to involved that with an f by f filter,

13
00:00:45.725 --> 00:00:48.850
then the dimension of the output will be;

14
00:00:48.850 --> 00:00:58.237
n minus f plus one by n minus f plus one.

15
00:00:58.237 --> 00:00:59.665
And in this example,

16
00:00:59.665 --> 00:01:03.455
six minus three plus one is equal to four,

17
00:01:03.455 --> 00:01:07.489
which is why you wound up with a four by four output.

18
00:01:07.489 --> 00:01:10.400
So the two downsides to this; one is that,

19
00:01:10.400 --> 00:01:14.790
if every time you apply a convolutional operator, your image shrinks,

20
00:01:14.790 --> 00:01:17.595
so you come from six by six down to four by four then,

21
00:01:17.595 --> 00:01:21.716
you can only do this a few times before your image starts getting really small,

22
00:01:21.716 --> 00:01:23.870
maybe it shrinks down to one by one or something,

23
00:01:23.870 --> 00:01:26.720
so maybe, you don't want your image to shrink

24
00:01:26.720 --> 00:01:29.902
every time you detect edges or to set other features on it,

25
00:01:29.902 --> 00:01:31.605
so that's one downside,

26
00:01:31.605 --> 00:01:33.590
and the second downside is that,

27
00:01:33.590 --> 00:01:36.665
if you look the pixel at the corner or the edge,

28
00:01:36.665 --> 00:01:40.755
this little pixel is touched as used only in one of the outputs,

29
00:01:40.755 --> 00:01:43.490
because this touches that three by three region.

30
00:01:43.490 --> 00:01:48.905
Whereas, if you take a pixel in the middle, say this pixel,

31
00:01:48.905 --> 00:01:55.380
then there are a lot of three by three regions that overlap that pixel and so,

32
00:01:55.380 --> 00:02:01.455
is as if pixels on the corners or on the edges are use much less in the output.

33
00:02:01.455 --> 00:02:06.390
So you're throwing away a lot of the information near the edge of the image.

34
00:02:06.390 --> 00:02:08.735
So, to solve both of these problems,

35
00:02:08.735 --> 00:02:12.829
both the shrinking output,

36
00:02:12.829 --> 00:02:15.485
and when you build really deep neural networks,

37
00:02:15.485 --> 00:02:19.685
you see why you don't want the image to shrink on every step because if you have,

38
00:02:19.685 --> 00:02:22.038
maybe a hundred layer of deep net,

39
00:02:22.038 --> 00:02:23.710
then it'll shrinks a bit on every layer,

40
00:02:23.710 --> 00:02:27.993
then after a hundred layers you end up with a very small image.

41
00:02:27.993 --> 00:02:29.085
So that was one problem,

42
00:02:29.085 --> 00:02:38.120
the other is throwing away a lot of the information from the edges of the image.

43
00:02:38.120 --> 00:02:40.740
So in order to fix both of these problems,

44
00:02:40.740 --> 00:02:44.774
what you can do is the full apply of convolutional operation.

45
00:02:44.774 --> 00:02:46.959
You can pad the image.

46
00:02:46.959 --> 00:02:56.185
So in this case, let's say you pad the image with an additional one border,

47
00:02:56.185 --> 00:03:00.670
with the additional border of one pixel all around the edges.

48
00:03:00.670 --> 00:03:02.635
So, if you do that,

49
00:03:02.635 --> 00:03:05.517
then instead of a six by six image,

50
00:03:05.517 --> 00:03:09.500
you've now padded this to eight by eight image and if you

51
00:03:09.500 --> 00:03:14.007
convolve an eight by eight image with a three by three image you now get that out.

52
00:03:14.007 --> 00:03:16.960
Now, the four by four by the six by six image,

53
00:03:16.960 --> 00:03:23.667
so you managed to preserve the original input size of six by six.

54
00:03:23.667 --> 00:03:25.350
So by convention when you pad,

55
00:03:25.350 --> 00:03:33.296
you padded with zeros and if p is the padding amounts.

56
00:03:33.296 --> 00:03:34.575
So in this case,

57
00:03:34.575 --> 00:03:36.615
p is equal to one,

58
00:03:36.615 --> 00:03:41.180
because we're padding all around with an extra boarder of one pixels,

59
00:03:41.180 --> 00:03:47.940
then the output becomes

60
00:03:47.940 --> 00:03:54.360
n plus 2p minus f plus one by n plus 2p minus f by one.

61
00:03:54.360 --> 00:04:02.480
So, this becomes six plus two times one minus three plus one by the same thing on that.

62
00:04:02.480 --> 00:04:06.475
So, six plus two minus three plus one that's equals to six.

63
00:04:06.475 --> 00:04:12.880
So you end up with a six by six image that preserves the size of the original image.

64
00:04:12.880 --> 00:04:16.030
So this being pixel actually influences all of

65
00:04:16.030 --> 00:04:23.330
these cells of the output and so this effective,

66
00:04:23.330 --> 00:04:26.700
maybe not by throwing away but counting less

67
00:04:26.700 --> 00:04:32.715
the information from the edge of the corner or the edge of the image is reduced.

68
00:04:32.715 --> 00:04:34.255
And I've shown here,

69
00:04:34.255 --> 00:04:38.240
the effect of padding deep border with just one pixel.

70
00:04:38.240 --> 00:04:42.535
If you want, you can also pad the border with two pixels, in which case I guess,

71
00:04:42.535 --> 00:04:44.820
you do add on another border

72
00:04:44.820 --> 00:04:50.125
here and they can pad it with even more pixels if you choose.

73
00:04:50.125 --> 00:04:52.812
So, I guess what I'm drawing here,

74
00:04:52.812 --> 00:04:55.438
this would be a padded equals to p plus two.

75
00:04:55.438 --> 00:05:00.665
In terms of how much to pad,

76
00:05:00.665 --> 00:05:04.129
it turns out there two common choices that are called,

77
00:05:04.129 --> 00:05:07.380
Valid convolutions and Same convolutions.

78
00:05:07.380 --> 00:05:10.960
Not really is a great names but in a valid convolution,

79
00:05:10.960 --> 00:05:15.170
this basically means no padding.

80
00:05:15.170 --> 00:05:22.600
And so in this case you might have n by n image convolve with an f by

81
00:05:22.600 --> 00:05:25.345
f filter and this would give you an n minus

82
00:05:25.345 --> 00:05:30.298
f plus one by n minus f plus one dimensional output.

83
00:05:30.298 --> 00:05:35.060
So this is like the example we had previously on the previous videos where we had

84
00:05:35.060 --> 00:05:37.250
an n by n image convolve with

85
00:05:37.250 --> 00:05:43.095
the three by three filter and that gave you a four by four output.

86
00:05:43.095 --> 00:05:48.545
The other most common choice of padding is called

87
00:05:48.545 --> 00:05:52.660
the same convolution and that means when you pad,

88
00:05:52.660 --> 00:05:58.580
so the output size is the same as the input size.

89
00:05:58.580 --> 00:06:01.795
So if we actually look at this formula,

90
00:06:01.795 --> 00:06:04.635
when you pad by p pixels then,

91
00:06:04.635 --> 00:06:11.676
its as if n goes to n plus 2p and then you have from the rest of this, right?

92
00:06:11.676 --> 00:06:15.740
Minus f plus one.

93
00:06:15.740 --> 00:06:22.125
So we have an n by n image and the padding of a border of p pixels all around,

94
00:06:22.125 --> 00:06:28.900
then the output sizes of this dimension is xn plus 2p minus f plus one.

95
00:06:28.900 --> 00:06:36.080
And so, if you want n plus 2p minus f plus one to be equal to one,

96
00:06:36.080 --> 00:06:38.795
so the output size is same as input size,

97
00:06:38.795 --> 00:06:42.905
if you take this and solve for, I guess,

98
00:06:42.905 --> 00:06:46.664
n cancels out on both sides and if you solve for p,

99
00:06:46.664 --> 00:06:53.463
this implies that p is equal to f minus one over two.

100
00:06:53.463 --> 00:06:56.181
So when f is odd,

101
00:06:56.181 --> 00:06:58.990
by choosing the padding size to be as follows,

102
00:06:58.990 --> 00:07:01.960
you can make sure that the output size is same as

103
00:07:01.960 --> 00:07:06.265
the input size and that's why, for example,

104
00:07:06.265 --> 00:07:10.795
when the filter was three by three as this had happened in the previous slide,

105
00:07:10.795 --> 00:07:15.990
the padding that would make the output size the same as the input size was three minus

106
00:07:15.990 --> 00:07:21.790
one over two, which is one.

107
00:07:21.790 --> 00:07:23.415
And as another example,

108
00:07:23.415 --> 00:07:28.250
if your filter was five by five,

109
00:07:28.250 --> 00:07:30.395
so if f is equal to five, then,

110
00:07:30.395 --> 00:07:35.590
if you pad it into that equation you find that the padding of two is required to keep

111
00:07:35.590 --> 00:07:43.154
the output size the same as the input size when the filter is five by five.

112
00:07:43.154 --> 00:07:46.440
And by convention in computer vision,

113
00:07:46.440 --> 00:07:50.435
f is usually odd.

114
00:07:50.435 --> 00:07:59.070
It's actually almost always odd and you rarely see even numbered filters,

115
00:07:59.070 --> 00:08:02.631
filter works using computer vision.

116
00:08:02.631 --> 00:08:05.280
And I think that two reasons for that;

117
00:08:05.280 --> 00:08:07.320
one is that if f was even,

118
00:08:07.320 --> 00:08:10.155
then you need some asymmetric padding.

119
00:08:10.155 --> 00:08:15.380
So only if f is odd that this type of same convolution gives a natural padding region,

120
00:08:15.380 --> 00:08:17.180
had the same dimension all around rather than

121
00:08:17.180 --> 00:08:20.290
pad more on the left and pad less on the right,

122
00:08:20.290 --> 00:08:22.104
or something that asymmetric.

123
00:08:22.104 --> 00:08:27.440
And then second, when you have an odd dimension filter,

124
00:08:27.440 --> 00:08:29.770
such as three by three or five by five,

125
00:08:29.770 --> 00:08:32.860
then it has a central position and sometimes in

126
00:08:32.860 --> 00:08:36.095
computer vision its nice to have a distinguisher,

127
00:08:36.095 --> 00:08:37.450
it's nice to have a pixel,

128
00:08:37.450 --> 00:08:43.527
you can call the central pixel so you can talk about the position of the filter.

129
00:08:43.527 --> 00:08:48.080
Right, maybe none of this is a great reason for using f to be pretty much always

130
00:08:48.080 --> 00:08:50.310
odd but if you look a convolutional literature you

131
00:08:50.310 --> 00:08:53.482
see three by three filters are very common.

132
00:08:53.482 --> 00:08:56.155
You see some five by five, seven by sevens.

133
00:08:56.155 --> 00:08:58.985
And actually sometimes, later we'll also

134
00:08:58.985 --> 00:09:02.095
talk about one by one filters and that why that makes sense.

135
00:09:02.095 --> 00:09:04.130
But just by convention,

136
00:09:04.130 --> 00:09:08.335
I recommend you just use odd number filters as well.

137
00:09:08.335 --> 00:09:10.385
I think that you can probably get

138
00:09:10.385 --> 00:09:14.180
just fine performance even if you want to use an even number value for f,

139
00:09:14.180 --> 00:09:18.538
but if you stick to the common computer vision convention,

140
00:09:18.538 --> 00:09:25.865
I usually just use odd number f. So you've now seen how to use padded convolutions.

141
00:09:25.865 --> 00:09:28.890
To specify the padding for your convolution operation,

142
00:09:28.890 --> 00:09:31.200
you can either specify the value for

143
00:09:31.200 --> 00:09:34.835
p or you can just say that this is a valid convolution,

144
00:09:34.835 --> 00:09:38.595
which means p equals zero or you can say this is a same convolution,

145
00:09:38.595 --> 00:09:40.850
which means pad as much as you need to make sure

146
00:09:40.850 --> 00:09:43.780
the output has same dimension as the input.

147
00:09:43.780 --> 00:09:45.181
So that's it for padding.

148
00:09:45.181 --> 00:09:49.220
In the next video, let's talk about how you can implement Strided convolutions.