WEBVTT

1
00:00:00.000 --> 00:00:03.180
You've learned to implement deep learning algorithms more or

2
00:00:03.180 --> 00:00:06.486
less from scratch using Python and NumPY.

3
00:00:06.486 --> 00:00:08.970
And I'm glad you did that because I wanted you to

4
00:00:08.970 --> 00:00:11.960
understand what these deep learning algorithms are really doing.

5
00:00:11.960 --> 00:00:14.970
But you find unless you implement more complex models,

6
00:00:14.970 --> 00:00:18.660
such as convolutional neural networks or recurring neural networks,

7
00:00:18.660 --> 00:00:23.640
or as you start to implement very large models that is increasingly not practical,

8
00:00:23.640 --> 00:00:28.300
at least for most people, is not practical to implement everything yourself from scratch.

9
00:00:28.300 --> 00:00:29.535
Fortunately, there are now

10
00:00:29.535 --> 00:00:34.810
many good deep learning software frameworks that can help you implement these models.

11
00:00:34.810 --> 00:00:36.510
To make an analogy,

12
00:00:36.510 --> 00:00:38.970
I think that hopefully you understand how to do

13
00:00:38.970 --> 00:00:43.157
a matrix multiplication and you should be able to implement how to code,

14
00:00:43.157 --> 00:00:45.155
to multiply two matrices yourself.

15
00:00:45.155 --> 00:00:47.625
But as you build very large applications,

16
00:00:47.625 --> 00:00:51.930
you'll probably not want to implement your own matrix multiplication function but

17
00:00:51.930 --> 00:00:53.475
instead you want to call

18
00:00:53.475 --> 00:00:57.610
a numerical linear algebra library that could do it more efficiently for you.

19
00:00:57.610 --> 00:01:01.755
But this still helps that you understand how multiplying two matrices work.

20
00:01:01.755 --> 00:01:05.520
So I think deep learning has now matured to that point where it's actually more

21
00:01:05.520 --> 00:01:07.590
practical you'll be more efficient doing

22
00:01:07.590 --> 00:01:10.250
some things with some of the deep learning frameworks.

23
00:01:10.250 --> 00:01:13.110
So let's take a look at the frameworks out there.

24
00:01:13.110 --> 00:01:16.620
Today, there are many deep learning frameworks

25
00:01:16.620 --> 00:01:19.527
that makes it easy for you to implement neural networks,

26
00:01:19.527 --> 00:01:22.185
and here are some of the leading ones.

27
00:01:22.185 --> 00:01:27.420
Each of these frameworks has a dedicated user and developer community

28
00:01:27.420 --> 00:01:29.520
and I think each of these frameworks is

29
00:01:29.520 --> 00:01:33.715
a credible choice for some subset of applications.

30
00:01:33.715 --> 00:01:36.310
There are lot of people writing articles comparing

31
00:01:36.310 --> 00:01:41.374
these deep learning frameworks and how well these deep learning frameworks changes.

32
00:01:41.374 --> 00:01:46.315
And because these frameworks are often evolving and getting better month to month,

33
00:01:46.315 --> 00:01:49.704
I'll leave you to do a few internet searches yourself,

34
00:01:49.704 --> 00:01:54.310
if you want to see the arguments on the pros and cons of some of these frameworks.

35
00:01:54.310 --> 00:01:59.800
But I think many of these frameworks are evolving and getting better very rapidly.

36
00:01:59.800 --> 00:02:04.760
So rather than too strongly endorsing any of these frameworks I want to share

37
00:02:04.760 --> 00:02:10.150
with you the criteria I would recommend you use to choose frameworks.

38
00:02:10.150 --> 00:02:13.120
One important criteria is the ease of programming,

39
00:02:13.120 --> 00:02:15.640
and that means both developing the neural network and

40
00:02:15.640 --> 00:02:19.720
iterating on it as well as deploying it for production,

41
00:02:19.720 --> 00:02:25.435
for actual use, by thousands or millions or maybe hundreds of millions of users,

42
00:02:25.435 --> 00:02:27.540
depending on what you're trying to do.

43
00:02:27.540 --> 00:02:30.480
A second important criteria is running speeds,

44
00:02:30.480 --> 00:02:32.410
especially training on large data sets,

45
00:02:32.410 --> 00:02:35.210
some frameworks will let you run and train

46
00:02:35.210 --> 00:02:38.780
your neural network more efficiently than others.

47
00:02:38.780 --> 00:02:42.640
And then, one criteria that people don't often talk about but I think

48
00:02:42.640 --> 00:02:46.690
is important is whether or not the framework is truly open.

49
00:02:46.690 --> 00:02:49.395
And for a framework to be truly open,

50
00:02:49.395 --> 00:02:54.605
it needs not only to be open source but I think it needs good governance as well.

51
00:02:54.605 --> 00:02:58.930
Unfortunately, in the software industry some companies have a history of

52
00:02:58.930 --> 00:03:04.120
open sourcing software but maintaining single corporation control of the software.

53
00:03:04.120 --> 00:03:06.240
And then over some number of years,

54
00:03:06.240 --> 00:03:08.343
as people start to use the software,

55
00:03:08.343 --> 00:03:14.095
some companies have a history of gradually closing off what was open source,

56
00:03:14.095 --> 00:03:19.300
or perhaps moving functionality into their own proprietary cloud services.

57
00:03:19.300 --> 00:03:22.120
So one thing I pay a bit of attention to is how

58
00:03:22.120 --> 00:03:25.480
much you trust that the framework will remain

59
00:03:25.480 --> 00:03:31.960
open source for a long time rather than just being under the control of a single company,

60
00:03:31.960 --> 00:03:35.080
which for whatever reason may choose to close it off in

61
00:03:35.080 --> 00:03:40.415
the future even if the software is currently released under open source.

62
00:03:40.415 --> 00:03:44.470
But at least in the short term depending on your preferences of language,

63
00:03:44.470 --> 00:03:49.005
whether you prefer Python or Java or C++ or something else,

64
00:03:49.005 --> 00:03:51.970
and depending on what application you're working on,

65
00:03:51.970 --> 00:03:54.565
whether this can be division or natural language processing

66
00:03:54.565 --> 00:03:57.880
or online advertising or something else,

67
00:03:57.880 --> 00:04:01.940
I think multiple of these frameworks could be a good choice.

68
00:04:01.940 --> 00:04:05.500
So that said on programming frameworks by providing

69
00:04:05.500 --> 00:04:09.365
a higher level of abstraction than just a numerical linear algebra library,

70
00:04:09.365 --> 00:04:11.740
any of these program frameworks can make you more

71
00:04:11.740 --> 00:04:15.000
efficient as you develop machine learning applications.