WEBVTT

1
00:00:00.000 --> 00:00:00.810
You've heard me say

2
00:00:00.810 --> 00:00:02.031
that the computations

3
00:00:02.031 --> 00:00:03.840
of a neural network are organized

4
00:00:03.840 --> 00:00:05.310
in terms of a forward pass

5
00:00:05.310 --> 00:00:07.253
or a forward propagation step,

6
00:00:07.253 --> 00:00:08.940
in which we compute the output

7
00:00:08.940 --> 00:00:10.005
of the neural network,

8
00:00:10.005 --> 00:00:11.850
followed by a backward pass

9
00:00:11.850 --> 00:00:13.310
or back propagation step,

10
00:00:13.310 --> 00:00:15.270
which we use to compute gradients

11
00:00:15.270 --> 00:00:16.137
or compute derivatives.

12
00:00:16.137 --> 00:00:19.260
The computation graph explains

13
00:00:19.260 --> 00:00:21.540
why it is organized this way.

14
00:00:21.540 --> 00:00:23.010
In this video, we'll go through

15
00:00:23.010 --> 00:00:24.375
an example.

16
00:00:24.375 --> 00:00:26.610
In order to illustrate

17
00:00:26.610 --> 00:00:28.060
the computation graph,

18
00:00:28.060 --> 00:00:30.390
let's use a simpler example

19
00:00:30.390 --> 00:00:32.130
than logistic regression

20
00:00:32.130 --> 00:00:34.260
or a full blown neural network.

21
00:00:34.260 --> 00:00:37.200
Let's say that we're trying to compute a function, J,

22
00:00:37.200 --> 00:00:38.070
which is a function

23
00:00:38.070 --> 00:00:40.020
of three variables a, b, and c

24
00:00:40.020 --> 00:00:44.900
and let's say that function is 3(a+bc).

25
00:00:44.900 --> 00:00:46.830
Computing this function actually

26
00:00:46.830 --> 00:00:49.260
has three distinct steps.

27
00:00:49.260 --> 00:00:50.970
The first is you need to compute

28
00:00:50.970 --> 00:00:52.470
what is bc

29
00:00:52.470 --> 00:00:53.780
and let's say we store that

30
00:00:53.780 --> 00:00:55.195
in the variable call u.

31
00:00:55.195 --> 00:00:59.117
So u=bc and then you my compute V=a *u.

32
00:00:59.117 --> 00:01:04.800
So let's say this is V.

33
00:01:04.800 --> 00:01:09.380
And then finally, your output J is 3V.

34
00:01:09.380 --> 00:01:13.500
So this is your final function J

35
00:01:13.500 --> 00:01:15.555
that you're trying to compute.

36
00:01:15.555 --> 00:01:17.580
We can take these three steps

37
00:01:17.580 --> 00:01:20.970
and draw them in a computation graph as follows.

38
00:01:20.970 --> 00:01:24.602
Let's say, I draw your three variables

39
00:01:24.602 --> 00:01:26.400
a, b, and c here.

40
00:01:26.400 --> 00:01:27.690
So the first thing we did

41
00:01:27.690 --> 00:01:31.825
was compute u=bc.

42
00:01:31.825 --> 00:01:32.430
So I'm going to put

43
00:01:32.430 --> 00:01:35.015
a rectangular box around that.

44
00:01:35.015 --> 00:01:37.860
And so the input to that are b and c.

45
00:01:37.860 --> 00:01:41.505
And then, you might have V=a+u.

46
00:01:41.505 --> 00:01:47.440
So the inputs to that

47
00:01:47.440 --> 00:01:53.564
are V. So the inputs to that are u

48
00:01:53.564 --> 00:01:56.645
with just computed together with a.

49
00:01:56.645 --> 00:02:04.205
And then finally, we have J=3V.

50
00:02:04.205 --> 00:02:07.235
So as a concrete example, if a=5,

51
00:02:07.235 --> 00:02:10.040
b=3 and c=2 then u=bc would be six

52
00:02:10.040 --> 00:02:15.880
because a+u would be 5+6 is 11,.

53
00:02:15.880 --> 00:02:15.967
J is three times that, so J=33.

54
00:02:15.967 --> 00:02:22.310
And indeed, hopefully you can verify

55
00:02:22.310 --> 00:02:26.780
that this is three times five

56
00:02:26.780 --> 00:02:29.520
plus three times two.

57
00:02:29.520 --> 00:02:30.865
And if you expand that out,

58
00:02:30.865 --> 00:02:34.390
you actually get 33 as the value of J.

59
00:02:34.390 --> 00:02:37.220
So, the computation graph comes in handy

60
00:02:37.220 --> 00:02:39.409
when there is some distinguished

61
00:02:39.409 --> 00:02:41.790
or some special output variable,

62
00:02:41.790 --> 00:02:43.940
such as J in this case,

63
00:02:43.940 --> 00:02:46.215
that you want to optimize.

64
00:02:46.215 --> 00:02:46.910
And in the case

65
00:02:46.910 --> 00:02:48.755
of a logistic regression,

66
00:02:48.755 --> 00:02:51.200
J is of course the cost function

67
00:02:51.200 --> 00:02:53.260
that we're trying to minimize.

68
00:02:53.260 --> 00:02:54.380
And what we're seeing

69
00:02:54.380 --> 00:02:56.615
in this little example is that,

70
00:02:56.615 --> 00:02:58.666
through a left-to-right pass,

71
00:02:58.666 --> 00:03:01.075
you can compute the value of J

72
00:03:01.075 --> 00:03:02.030
and what we'll see

73
00:03:02.030 --> 00:03:03.410
in the next couple of slides

74
00:03:03.410 --> 00:03:05.993
is that in order to compute derivatives

75
00:03:05.993 --> 00:03:08.450
there'll be a right-to-left

76
00:03:08.450 --> 00:03:10.010
pass like this,

77
00:03:10.010 --> 00:03:11.840
kind of going in the opposite direction

78
00:03:11.840 --> 00:03:14.380
as the blue arrows.

79
00:03:14.380 --> 00:03:15.530
That would be most natural

80
00:03:15.530 --> 00:03:17.205
for computing the derivatives.

81
00:03:17.205 --> 00:03:19.340
So to recap, the computation graph

82
00:03:19.340 --> 00:03:21.980
organizes a computation with this blue arrow,

83
00:03:21.980 --> 00:03:24.250
left-to-right computation.

84
00:03:24.250 --> 00:03:25.780
Let's refer to the next video

85
00:03:25.780 --> 00:03:28.610
how you can do the backward red arrow

86
00:03:28.610 --> 00:03:30.620
right-to-left computation

87
00:03:30.620 --> 00:03:31.710
of the derivatives.

88
00:03:31.710 --> 00:03:33.000
Let's go on to the next video.