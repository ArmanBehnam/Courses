WEBVTT

1
00:00:00.000 --> 00:00:02.070
With everything you've learned, you're just about

2
00:00:02.070 --> 00:00:04.745
ready to tackle your first programming assignment.

3
00:00:04.745 --> 00:00:10.130
Before you do that, let me just give you a quick tour of iPython notebooks in Coursera.

4
00:00:10.130 --> 00:00:14.545
Here you see Jupiter iPython notebook that you can get to on Coursera.

5
00:00:14.545 --> 00:00:17.520
Let me just quickly show you a few features of this.

6
00:00:17.520 --> 00:00:21.885
The instructions are written right here in the text in the iPython notebook.

7
00:00:21.885 --> 00:00:25.460
And these long light gray blocks are blocks of code.

8
00:00:25.460 --> 00:00:27.030
So occasionally, you'll see in

9
00:00:27.030 --> 00:00:29.255
these blocks something that'll say this is the START CODE HERE and END CODE HERE.

10
00:00:29.255 --> 00:00:31.860
To do your exercise please make sure

11
00:00:31.860 --> 00:00:36.755
to write your code between the START CODE HERE and END CODE HERE.

12
00:00:36.755 --> 00:00:41.485
So, for example, print Hello world.

13
00:00:41.485 --> 00:00:44.085
And then to execute a code block,

14
00:00:44.085 --> 00:00:49.355
you can hit shift+enter and then execute this code block which,

15
00:00:49.355 --> 00:00:51.265
I guess, we just wrote print Hello world.

16
00:00:51.265 --> 00:00:53.355
So that prints it Hello World.

17
00:00:53.355 --> 00:00:55.140
To run a cell,

18
00:00:55.140 --> 00:00:56.940
you can also, to run one of these code blocks of cell,

19
00:00:56.940 --> 00:01:01.200
you can also click cell and then run cell. So that executes this.

20
00:01:01.200 --> 00:01:05.275
It's possible that on your computer,

21
00:01:05.275 --> 00:01:07.364
the keyboard shortcut for Cell,

22
00:01:07.364 --> 00:01:09.105
Run Cell might be different than shift+enter.

23
00:01:09.105 --> 00:01:14.070
But on both, my Mac as well as on my PC is shift+enter,

24
00:01:14.070 --> 00:01:16.550
so might be the same for you as well.

25
00:01:16.550 --> 00:01:18.480
Now when you're reading the instructions,

26
00:01:18.480 --> 00:01:20.960
if you accidentally double click on it,

27
00:01:20.960 --> 00:01:24.270
you might end up with this mark down language.

28
00:01:24.270 --> 00:01:26.700
If you end up with this funny looking text,

29
00:01:26.700 --> 00:01:30.390
to convert it back to the nice looking text just run this Cell.

30
00:01:30.390 --> 00:01:34.740
So you can go to Cell, Run Cell or I'm going to hit shift+enter and

31
00:01:34.740 --> 00:01:39.630
that basically executes the mark down and turns it back into this nice looking code.

32
00:01:39.630 --> 00:01:41.565
Just a couple more tips.

33
00:01:41.565 --> 00:01:43.795
When you execute code like this,

34
00:01:43.795 --> 00:01:48.333
it actually runs on a kernel,

35
00:01:48.333 --> 00:01:51.947
on a piece of code that runs on the server.

36
00:01:51.947 --> 00:01:54.900
If you're running an excessively large job or if

37
00:01:54.900 --> 00:01:59.121
you leave a computer for a very long time or something goes wrong,

38
00:01:59.121 --> 00:02:00.505
your internet connection or something,

39
00:02:00.505 --> 00:02:03.160
there is a small chance that a kernel on the back end might die,

40
00:02:03.160 --> 00:02:06.690
in which case, just click Kernel and then restart Kernel.

41
00:02:06.690 --> 00:02:10.415
And hopefully, that will reboot the kernel and make it work again.

42
00:02:10.415 --> 00:02:13.080
So that shouldn't happen if you're just running

43
00:02:13.080 --> 00:02:16.858
relatively small jobs and you're just starting up iPython notebook.

44
00:02:16.858 --> 00:02:19.995
If you see an error message that the Kernel has died or something,

45
00:02:19.995 --> 00:02:21.310
you can try Kernel, Restart.

46
00:02:21.310 --> 00:02:25.362
Finally, in iPython notebook,

47
00:02:25.362 --> 00:02:27.845
like this, there may be multiple blocks of code.

48
00:02:27.845 --> 00:02:33.255
So even if an earlier block of code doesn't have any create in code,

49
00:02:33.255 --> 00:02:35.550
make sure to execute this block of code because,

50
00:02:35.550 --> 00:02:39.698
in this example, it imports numpy as np and so on,

51
00:02:39.698 --> 00:02:42.360
and sets up some of the variables that you might need in order to

52
00:02:42.360 --> 00:02:45.570
execute the lower down blocks of code.

53
00:02:45.570 --> 00:02:50.845
So be sure to execute the ones on top even if you aren't asked to write any code in them.

54
00:02:50.845 --> 00:02:53.705
And finally, when you're done implementing your solutions,

55
00:02:53.705 --> 00:02:57.920
there's this blue submit assignment buttons here on the upper right and we

56
00:02:57.920 --> 00:03:02.130
click that to submit your solutions for grading.

57
00:03:02.130 --> 00:03:05.520
I've found that the interactive command shell nature

58
00:03:05.520 --> 00:03:09.008
of iPython notebooks to be very useful for learning quickly,

59
00:03:09.008 --> 00:03:10.520
implement a few lines of code,

60
00:03:10.520 --> 00:03:13.450
see an outcome, learn and add very quickly.

61
00:03:13.450 --> 00:03:17.430
And so I hope that from the exercises in Coursera,

62
00:03:17.430 --> 00:03:20.775
Jupyter iPython notebooks will help you quickly learn

63
00:03:20.775 --> 00:03:24.535
and experiment and see how to implement these algorithms.

64
00:03:24.535 --> 00:03:26.325
There's one more video after this.

65
00:03:26.325 --> 00:03:28.695
This is an optional video that talks about

66
00:03:28.695 --> 00:03:32.210
the cost function for logistic regression. You can watch that or not.

67
00:03:32.210 --> 00:03:33.745
Either way is perfectly fine.

68
00:03:33.745 --> 00:03:38.140
But either way, best of luck with the week 2 programming assignments.

69
00:03:38.140 --> 00:03:42.720
And I also look forward to seeing you at the start of the week three.