WEBVTT

1
00:00:10.340 --> 00:00:12.930
Data cleansing is an art and it's

2
00:00:12.930 --> 00:00:15.420
very important to
any data project.

3
00:00:15.420 --> 00:00:19.020
Almost always when you receive
data to perform analysis,

4
00:00:19.020 --> 00:00:21.690
it's not exactly that
you are looking for.

5
00:00:21.690 --> 00:00:23.910
We can have extra characters

6
00:00:23.910 --> 00:00:26.205
left over from a system extract.

7
00:00:26.205 --> 00:00:28.860
The reference data we're
looking for is embedded in

8
00:00:28.860 --> 00:00:32.160
something else or we could
even have duplicate data.

9
00:00:32.160 --> 00:00:35.280
There are many other
opportunities for issues.

10
00:00:35.280 --> 00:00:37.335
These issues are caused by

11
00:00:37.335 --> 00:00:39.480
problems working across systems,

12
00:00:39.480 --> 00:00:42.615
data originally being
prepared for other purposes,

13
00:00:42.615 --> 00:00:45.555
and sometimes just
pure human error.

14
00:00:45.555 --> 00:00:47.920
With these issues, sometimes what

15
00:00:47.920 --> 00:00:50.080
separates a good
data analysts and

16
00:00:50.080 --> 00:00:52.120
a bad one is
their ability to prepare

17
00:00:52.120 --> 00:00:55.145
the data and limit issues
further down the line.

18
00:00:55.145 --> 00:00:56.920
However, to prepare it,

19
00:00:56.920 --> 00:00:59.230
we will start to build
your arsenal tools that you

20
00:00:59.230 --> 00:01:02.110
can use to start to
fix your datasets.

21
00:01:02.110 --> 00:01:05.080
First, we will work with values
and then we will shift to

22
00:01:05.080 --> 00:01:06.940
working with some
interesting techniques

23
00:01:06.940 --> 00:01:09.470
just to split text data.

24
00:01:10.010 --> 00:01:14.860
In problem 1a, we'll learn how
to use the clean function.

25
00:01:14.860 --> 00:01:16.900
This function will remove any of

26
00:01:16.900 --> 00:01:18.610
the non-printable
symbols that you

27
00:01:18.610 --> 00:01:19.870
may get new data when it is

28
00:01:19.870 --> 00:01:22.520
imported from
other various sources.

29
00:01:22.520 --> 00:01:24.250
In this example, we have

30
00:01:24.250 --> 00:01:27.280
a leading paragraph symbol
within our dataset.

31
00:01:27.280 --> 00:01:30.610
Frequently, older
database programs include

32
00:01:30.610 --> 00:01:32.890
system characters
within their extracts

33
00:01:32.890 --> 00:01:35.140
that you would not want
to work with an Excel.

34
00:01:35.140 --> 00:01:38.365
I'm going to type
the equal sign, clean,

35
00:01:38.365 --> 00:01:41.830
and open parentheses and
reference the first cell in

36
00:01:41.830 --> 00:01:43.360
the table above to return

37
00:01:43.360 --> 00:01:45.700
the data without
that paragraph symbol.

38
00:01:45.700 --> 00:01:48.815
I'll close the parentheses
and click enter.

39
00:01:48.815 --> 00:01:52.420
Next, I'll drag down
the formula using

40
00:01:52.420 --> 00:01:55.825
the plus sign in the bottom
right corner of the cell.

41
00:01:55.825 --> 00:01:57.340
When you drag that down,

42
00:01:57.340 --> 00:01:59.860
you'll notice that
our formula was dragged

43
00:01:59.860 --> 00:02:02.905
down but also the formatting
of the first cell.

44
00:02:02.905 --> 00:02:04.690
So I'm going to click the little

45
00:02:04.690 --> 00:02:06.580
menu button that pops up,

46
00:02:06.580 --> 00:02:09.490
and click fill
without formatting.

47
00:02:09.490 --> 00:02:12.680
This will ensure that
only the formula is

48
00:02:12.680 --> 00:02:14.120
dragged down to
the other cells in

49
00:02:14.120 --> 00:02:16.710
the table and not the format.