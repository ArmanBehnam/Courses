WEBVTT

1
00:00:00.000 --> 00:00:10.629
[MUSIC]

2
00:00:10.629 --> 00:00:13.974
Storing data within
a database is important.

3
00:00:13.974 --> 00:00:17.470
But as we learned in data
cleansing in course two,

4
00:00:17.470 --> 00:00:21.560
it is also important to understand
how the data is stored.

5
00:00:22.600 --> 00:00:27.170
Taking things one step further,
it is also important to

6
00:00:27.170 --> 00:00:32.050
understand the relationships between
the data stored in a database.

7
00:00:33.140 --> 00:00:39.310
In this video, I am going to talk
about the architecture of a database.

8
00:00:39.310 --> 00:00:45.580
We are going to look at tables,
rows, functions and columns,

9
00:00:45.580 --> 00:00:51.610
and talk about what they are and how they
are used within a relational database.

10
00:00:53.350 --> 00:00:55.650
Let's start with tables.

11
00:00:55.650 --> 00:00:59.929
What are tables and how are they
used within a relational database?

12
00:01:01.090 --> 00:01:05.170
A table is used to store
data within a database and

13
00:01:05.170 --> 00:01:09.310
should be thought of as a dataset,
which we frequently used in course two.

14
00:01:10.390 --> 00:01:15.550
Typically, a database would be
comprised of many different tables.

15
00:01:15.550 --> 00:01:18.820
In the case of a relational database,

16
00:01:18.820 --> 00:01:23.970
usually there will be many tables that
have some relation to each other.

17
00:01:25.790 --> 00:01:28.810
Next, let's talk about rows.

18
00:01:28.810 --> 00:01:33.430
What is a row and what is its function
within a relational database?

19
00:01:34.450 --> 00:01:37.580
A row is an entry of data into a table.

20
00:01:38.590 --> 00:01:43.190
Databases are comprised of tables and
tables are comprised of rows.

21
00:01:44.570 --> 00:01:47.590
Each row is an entry within a table.

22
00:01:49.040 --> 00:01:54.410
Rows might share a relationship
with a row in another table,

23
00:01:54.410 --> 00:01:58.180
just like tables might have
a relationship to one another.

24
00:01:59.510 --> 00:02:02.290
Finally, let's look at columns.

25
00:02:02.290 --> 00:02:06.740
What is a column and what is its
function within a relational database?

26
00:02:07.750 --> 00:02:11.180
A column is an element within a row.

27
00:02:11.180 --> 00:02:15.670
In the table setup, the column
dictates what type of information

28
00:02:15.670 --> 00:02:20.140
is stored within all
rows within the table.

29
00:02:20.140 --> 00:02:25.580
For example, if we have a data set
that includes hospital patient data,

30
00:02:25.580 --> 00:02:30.470
the first column could be the name of
a patient, the second the age of that

31
00:02:30.470 --> 00:02:36.140
patient within the row, and
the third column is the patient's address.

32
00:02:36.140 --> 00:02:40.440
Frequently, we refer to
these columns as attributes.

33
00:02:40.440 --> 00:02:45.450
Databases are comprised of tables,
tables are comprised of rows and

34
00:02:45.450 --> 00:02:50.300
rows are comprised of columns,
also known as attributes.

35
00:02:50.300 --> 00:02:55.500
Now that I have introduced you to
the architecture of a database, let's take

36
00:02:55.500 --> 00:03:00.460
a look at a graphical representation of
a database to illustrate these concepts.

37
00:03:01.870 --> 00:03:06.300
The image we are looking at is
a graphical representation of a table

38
00:03:06.300 --> 00:03:08.470
within a database.

39
00:03:08.470 --> 00:03:13.610
It is easy to see that a table
is comprised of rows and

40
00:03:13.610 --> 00:03:16.300
that a row is a collection of columns.

41
00:03:17.500 --> 00:03:20.910
Each row has prescribed
attributes in the column.

42
00:03:22.150 --> 00:03:25.450
One of the columns is labeled as Date,

43
00:03:25.450 --> 00:03:29.490
which is an attribute in this
data within each of the rows.

44
00:03:30.860 --> 00:03:34.740
Now that we have seen what a table,
row and

45
00:03:34.740 --> 00:03:39.730
a column look like within a database,
we need to understand how we can

46
00:03:39.730 --> 00:03:44.550
link the table and establish the
relationship that we referenced earlier.

47
00:03:45.840 --> 00:03:49.650
We use keys to establish
the relationships.

48
00:03:49.650 --> 00:03:53.960
You can picture a key
similar to an actual key.

49
00:03:53.960 --> 00:03:59.820
It will help us unlock further information
about a matching key within a new table.

50
00:04:01.070 --> 00:04:06.747
We utilize two types of keys to unlock
these relationships: primary keys and

51
00:04:06.747 --> 00:04:07.890
foreign keys.

52
00:04:09.030 --> 00:04:12.090
First, a primary key is an attribute

53
00:04:12.090 --> 00:04:15.750
that mandates the value will be
unique throughout the entire table.

54
00:04:16.910 --> 00:04:19.860
If an attribute is a primary key,

55
00:04:19.860 --> 00:04:23.680
no two rows within this table
will have the same value.

56
00:04:24.840 --> 00:04:31.130
However, it is possible for
that value to exist in another table.

57
00:04:31.130 --> 00:04:35.110
If that primary key is
present in a different table,

58
00:04:35.110 --> 00:04:38.440
then it might not be
the primary key of that table.

59
00:04:39.580 --> 00:04:42.110
In that case, it would be a foreign key.

60
00:04:43.790 --> 00:04:48.100
Therefore, a foreign key is
an attribute within a table

61
00:04:48.100 --> 00:04:52.320
that provides a link
between data in two tables.

62
00:04:52.320 --> 00:04:57.290
It acts as a bridge between
tables because the primary key

63
00:04:57.290 --> 00:05:01.329
of another table is one of
the attributes in this table.

64
00:05:02.670 --> 00:05:06.390
Once the bridges and keys are established,

65
00:05:06.390 --> 00:05:10.860
we now have identified
a relationship between the tables.

66
00:05:10.860 --> 00:05:16.260
To explore this concept further,
let's look at our airline database.

67
00:05:16.260 --> 00:05:20.780
The image on the screen displays
one of the tables in the database

68
00:05:20.780 --> 00:05:22.320
that stores airline data.

69
00:05:23.710 --> 00:05:27.140
In this table, the first column,
labeled Flight ID,

70
00:05:28.310 --> 00:05:31.620
is a primary key to reference
the values in the database.

71
00:05:32.780 --> 00:05:37.600
The reason this is considered a primary
key is that each of the entities

72
00:05:37.600 --> 00:05:41.950
has a unique value,
with no two rows having the same value.

73
00:05:43.080 --> 00:05:47.800
Flight ID can be used to reference
any row in this table and

74
00:05:47.800 --> 00:05:51.160
access corresponding attribute
values within that row.

75
00:05:52.520 --> 00:05:55.900
Now that we have discussed
the existence of relationships,

76
00:05:55.900 --> 00:06:01.240
let's explore the three main
types of relationships: 1 to 1.

77
00:06:01.240 --> 00:06:05.635
This type of relationship implies that for
each key (foreign or

78
00:06:05.635 --> 00:06:09.970
primary), you'd expect one
match in another table.

79
00:06:09.970 --> 00:06:14.158
For example, if we had a table
consisting of drivers and

80
00:06:14.158 --> 00:06:19.773
another consisting of licences,
you would expect one drivers license for

81
00:06:19.773 --> 00:06:22.550
each person in the driver's table.

82
00:06:22.550 --> 00:06:23.993
1 to many.

83
00:06:23.993 --> 00:06:30.001
A 1 to many relationship would imply
that each value identified in one table,

84
00:06:30.001 --> 00:06:33.940
you may find multiple
values in another table.

85
00:06:33.940 --> 00:06:38.680
For example,
our drivers table may have many matches

86
00:06:38.680 --> 00:06:43.650
in the vehicle table because some
drivers may have multiple cars.

87
00:06:43.650 --> 00:06:46.860
The final relationship is many to many.

88
00:06:46.860 --> 00:06:51.540
As you may expect, that means that
neither of the keys can be primary keys

89
00:06:51.540 --> 00:06:54.180
as both sets have multiple matches.

90
00:06:54.180 --> 00:06:55.450
For example,

91
00:06:55.450 --> 00:07:00.170
if our drivers table contained
personal identification information,

92
00:07:00.170 --> 00:07:05.469
such as sex, it may have a many to many
relationship with the vehicles table.

93
00:07:06.760 --> 00:07:12.860
In the driver's table, we would expect
multiple drivers that are female.

94
00:07:12.860 --> 00:07:14.760
And in the vehicle table,

95
00:07:14.760 --> 00:07:19.280
you may have a car driven by both male and
female drivers.

96
00:07:20.280 --> 00:07:23.560
Let's look at the example
table we have here.

97
00:07:23.560 --> 00:07:26.580
In this example, we have three tables.

98
00:07:26.580 --> 00:07:31.050
The first being the Airline table,
the second being Aircraft, and

99
00:07:31.050 --> 00:07:32.160
the third being Flights.

100
00:07:33.420 --> 00:07:37.330
We have shown that each
table has a primary key.

101
00:07:37.330 --> 00:07:42.830
For example, we would not expect to
have multiple flights with same ID,

102
00:07:42.830 --> 00:07:46.270
as the following attributes
would make the flight ID unique.

103
00:07:47.590 --> 00:07:53.425
The flight table also contains two
foreign keys,.Airline ID and Aircraft ID.

104
00:07:53.425 --> 00:07:56.140
These provide the links
back to the other tables.

105
00:07:57.610 --> 00:08:01.400
Let's look at the type of
relationship we have here.

106
00:08:01.400 --> 00:08:04.350
First, let's look at the top one.

107
00:08:04.350 --> 00:08:07.520
How the Airline ID
relates to the Flight ID.

108
00:08:07.520 --> 00:08:12.630
Since Airline ID is a primary key,
it has to be unique.

109
00:08:12.630 --> 00:08:16.370
However, the airline could
have multiple flight IDs, so

110
00:08:16.370 --> 00:08:20.590
we have a one to many relationship.

111
00:08:20.590 --> 00:08:24.820
In this video, we covered how
data is stored in a database.

112
00:08:24.820 --> 00:08:29.490
How it can be referenced in the database
using primary and foreign keys.

113
00:08:29.490 --> 00:08:33.160
And the different relationships
within the database.

114
00:08:33.160 --> 00:08:38.173
In the next video, we are going
to explore how we can leverage

115
00:08:38.173 --> 00:08:42.909
these relationships to combine
different sets of data.

116
00:08:42.909 --> 00:08:52.909
[MUSIC].