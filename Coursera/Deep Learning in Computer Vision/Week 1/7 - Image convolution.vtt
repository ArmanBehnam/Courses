WEBVTT

1
00:00:02.760 --> 00:00:08.840
Image convolution is probably the most important operation in image processing.

2
00:00:08.840 --> 00:00:12.860
I'll start the talk about convolution from image noise.

3
00:00:12.860 --> 00:00:15.590
There are several types of image noise but I will

4
00:00:15.590 --> 00:00:18.715
consider only one of them, additive Gaussian noise.

5
00:00:18.715 --> 00:00:21.510
In this case noise is added to the true signal.

6
00:00:21.510 --> 00:00:25.585
Intensity of the noise is drawn from a Gaussian normal distribution.

7
00:00:25.585 --> 00:00:30.800
Each pixel is corrupted randomly and independently from all other pixels.

8
00:00:30.800 --> 00:00:33.290
Given a camera in a static scene,

9
00:00:33.290 --> 00:00:36.235
what are the easiest way to remove the noise?

10
00:00:36.235 --> 00:00:39.390
Because noise is random and independent,

11
00:00:39.390 --> 00:00:43.590
the simplest way is to capture several images and average them.

12
00:00:43.590 --> 00:00:45.470
Because noise is random,

13
00:00:45.470 --> 00:00:47.340
averaging will reduce it.

14
00:00:47.340 --> 00:00:52.140
But usually has only one noisy image and cannot average several images.

15
00:00:52.140 --> 00:00:56.935
So we need to devise another way for reducing the noise in image.

16
00:00:56.935 --> 00:01:00.205
Instead of averaging pixels in several images,

17
00:01:00.205 --> 00:01:02.370
we can replace each pixel X,

18
00:01:02.370 --> 00:01:05.190
with weighted average of its local neighborhood.

19
00:01:05.190 --> 00:01:08.230
Weights are jointly named as filter kernel.

20
00:01:08.230 --> 00:01:10.725
The simplest case is equal weights.

21
00:01:10.725 --> 00:01:13.510
This particular filter is called the box filter.

22
00:01:13.510 --> 00:01:16.990
Sum of all weights in the Filter Kernel should equal to one

23
00:01:16.990 --> 00:01:21.030
so that applying the filter does not change overall brightness of image.

24
00:01:21.030 --> 00:01:24.765
For clarity, we can write the common factor separately.

25
00:01:24.765 --> 00:01:33.335
The process of filtering the image with weighted averaging is called convolution.

26
00:01:33.335 --> 00:01:35.220
Let F be the image,

27
00:01:35.220 --> 00:01:36.920
and G be the kernel.

28
00:01:36.920 --> 00:01:44.000
The output of convolving F with G is denoted F star G. Each pixel is coordinates M,

29
00:01:44.000 --> 00:01:46.360
N. In the result of convolution,

30
00:01:46.360 --> 00:01:51.080
can be computed as sum of all K and L,

31
00:01:51.080 --> 00:01:54.880
of products of F sub M minus K,

32
00:01:54.880 --> 00:01:58.835
N minus L by G sub K,

33
00:01:58.835 --> 00:02:01.590
G. We can visualize convolution as

34
00:02:01.590 --> 00:02:05.975
a scanian of image F is filter kernel on G from top to bottom.

35
00:02:05.975 --> 00:02:09.255
The simplest filter is Identity Filter,

36
00:02:09.255 --> 00:02:15.490
where only one weight in the center of filter kernel equals to one,

37
00:02:15.490 --> 00:02:18.420
and all other weights equals to zero.

38
00:02:18.420 --> 00:02:20.840
Applying this filter kernel for

39
00:02:20.840 --> 00:02:25.550
image convolution will result in no change in filter of images.

40
00:02:25.550 --> 00:02:32.885
But, if you move the only one from center of the kernel to the other place,

41
00:02:32.885 --> 00:02:36.440
then the image after convolution will change.

42
00:02:36.440 --> 00:02:41.800
It will be shifted. In this case it will be shifted left by one pixel.

43
00:02:41.800 --> 00:02:44.500
Generally, any filter kernel is

44
00:02:44.500 --> 00:02:50.000
all positive weights and the sum equal to one will be the image smoothing filter.

45
00:02:50.000 --> 00:02:52.835
Here's the example of box filter now,

46
00:02:52.835 --> 00:02:54.905
imaging with a lot of fine details.

47
00:02:54.905 --> 00:02:59.975
You can see that a lot of spurious lines in the right image appear after smoothing.

48
00:02:59.975 --> 00:03:03.450
We believe that smoothing operation should look like

49
00:03:03.450 --> 00:03:08.585
a image from a defocused lens because it introduced blurred to the image.

50
00:03:08.585 --> 00:03:13.475
And we can see that smoothing with average doesn't compare too well with defocused lens.

51
00:03:13.475 --> 00:03:16.885
If we try to apply averaging to a single point of light,

52
00:03:16.885 --> 00:03:18.725
we will get a little square.

53
00:03:18.725 --> 00:03:21.660
If we see the same point light in a defocused lens,

54
00:03:21.660 --> 00:03:23.515
it will look like a fuzzy blob.

55
00:03:23.515 --> 00:03:26.995
We want to device a filter kernel that will produce

56
00:03:26.995 --> 00:03:32.565
the same effect as defocused lens when applying to the point of light.

57
00:03:32.565 --> 00:03:34.400
To reach these results,

58
00:03:34.400 --> 00:03:35.920
to eliminate edge effects,

59
00:03:35.920 --> 00:03:38.685
weight contribution of neighborhood pixels

60
00:03:38.685 --> 00:03:41.600
should be according to the closeness to the center,

61
00:03:41.600 --> 00:03:44.300
like this image of fuzzy blob.

62
00:03:44.300 --> 00:03:48.830
We can set filter weight according to two dimensional Gaussian distribution,

63
00:03:48.830 --> 00:03:51.765
centered at the filter center with arbitrary sigma.

64
00:03:51.765 --> 00:03:53.420
In this particular example,

65
00:03:53.420 --> 00:03:58.085
sigma is set to one and filter size is set five by five.

66
00:03:58.085 --> 00:04:01.800
Filters with weights distributed

67
00:04:01.800 --> 00:04:05.440
according to Gaussian distribution are called Gaussian filters.

68
00:04:05.440 --> 00:04:12.215
And they're probably the most used filters in image processing and image recognition.

69
00:04:12.215 --> 00:04:14.860
Gaussian filters have infinite support,

70
00:04:14.860 --> 00:04:17.830
but discrete filters use finite kernels.

71
00:04:17.830 --> 00:04:21.245
For the same sigma, we can build filters of different sizes.

72
00:04:21.245 --> 00:04:23.185
Here for the sigma equals five,

73
00:04:23.185 --> 00:04:26.930
two filters with sizes 10 by 10 and 30 by 30 are given.

74
00:04:26.930 --> 00:04:28.930
Notice that for the second filter,

75
00:04:28.930 --> 00:04:32.550
the weight near the boundaries of the filter are close to zero.

76
00:04:32.550 --> 00:04:34.530
As a general rule of thumb,

77
00:04:34.530 --> 00:04:38.780
we usually set Gaussian filter half-width to about three sigma.

78
00:04:38.780 --> 00:04:43.460
So the total size of Gaussian filter equals to six sigma.

79
00:04:43.460 --> 00:04:46.780
In this case as demonstrated in this light,

80
00:04:46.780 --> 00:04:50.845
all weights near the edges of the filter are close to zero.

81
00:04:50.845 --> 00:04:55.250
Here's the comparison of smoothing this box filter and this Gaussian filter.

82
00:04:55.250 --> 00:04:59.655
Please know that spurious lines in the left image are absent in the right image.

83
00:04:59.655 --> 00:05:02.600
It can even be proved that Gaussian filter is

84
00:05:02.600 --> 00:05:06.330
the only filter that doesn't add any additional information to the image.

85
00:05:06.330 --> 00:05:11.975
So no additional signals of spurious lines can appear when applying Gaussian filter.

86
00:05:11.975 --> 00:05:17.855
This is one of the reasons why Gaussian filter are so extensively used in algorithms.

87
00:05:17.855 --> 00:05:21.280
Applying Gaussian filter can reduce noise in image,

88
00:05:21.280 --> 00:05:23.155
but it also blurs the image.

89
00:05:23.155 --> 00:05:25.220
The larger the intensity of noise,

90
00:05:25.220 --> 00:05:28.165
a larger filter kernel should be used to remove the noise.

91
00:05:28.165 --> 00:05:29.690
But the larger the filter,

92
00:05:29.690 --> 00:05:31.395
the stronger is the blur.

93
00:05:31.395 --> 00:05:37.565
So it's a compromise between smoothing of the image and reducing the additive noise.

94
00:05:37.565 --> 00:05:40.475
Image convolution can be used for many tasks.

95
00:05:40.475 --> 00:05:43.225
For example, we can use image convolution to reduce

96
00:05:43.225 --> 00:05:46.585
image blur and make edges more pronounced.

97
00:05:46.585 --> 00:05:50.250
The idea of this process is very simple.

98
00:05:50.250 --> 00:05:56.735
Let's try to apply blurring and subtract blurred image from original image.

99
00:05:56.735 --> 00:05:58.540
What does blurring take away?

100
00:05:58.540 --> 00:06:01.960
It is information regarding sharp edges in images.

101
00:06:01.960 --> 00:06:08.140
We can add this information to the original image with some scale factor.

102
00:06:08.140 --> 00:06:11.445
And this will make edges more pronounced, more sharp.

103
00:06:11.445 --> 00:06:14.580
So this operation is called image sharpening.

104
00:06:14.580 --> 00:06:17.730
You can combine all operations into

105
00:06:17.730 --> 00:06:22.075
single convolution and approximate it with negative Laplacian of Gaussian.

106
00:06:22.075 --> 00:06:24.990
Such filter is called unsharp mask.

107
00:06:24.990 --> 00:06:30.055
On this slide, you can see an example of image sharpening with this specific kernel.

108
00:06:30.055 --> 00:06:35.965
You can see that edges in the image are more pronounced and the image look sharper.

109
00:06:35.965 --> 00:06:41.505
And the left image in the slide look a bit blurrier than the image of the right.

110
00:06:41.505 --> 00:06:45.305
Sharpening produce visually pleasing results usually.

111
00:06:45.305 --> 00:06:50.770
So it's oftenly used in consumer cameras to improve the quality of images.

112
00:06:50.770 --> 00:06:54.300
And you can only turn it off if you tried to

113
00:06:54.300 --> 00:06:58.550
capture the raw images with no post-processing.