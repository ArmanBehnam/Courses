WEBVTT

1
00:00:00.470 --> 00:00:04.950
Overclocking, is the process of

2
00:00:04.950 --> 00:00:06.660
increasing the clock frequency of

3
00:00:06.660 --> 00:00:09.630
the device beyond
the recommended frequency.

4
00:00:09.630 --> 00:00:11.760
So, they call it overclocking.

5
00:00:11.760 --> 00:00:16.785
Now, that term is sometimes
misused in my opinion.

6
00:00:16.785 --> 00:00:19.980
Overclocking also sometimes
is used to refer to

7
00:00:19.980 --> 00:00:21.930
increasing the internal voltage

8
00:00:21.930 --> 00:00:23.655
levels to increase the speed.

9
00:00:23.655 --> 00:00:26.775
A better term for that
would be overvolting.

10
00:00:26.775 --> 00:00:29.400
But overclocking is
where you are increasing

11
00:00:29.400 --> 00:00:32.325
the clock frequency and

12
00:00:32.325 --> 00:00:35.215
to increase the speed of
the performance of the chip.

13
00:00:35.215 --> 00:00:37.040
So, one thing to note

14
00:00:37.040 --> 00:00:38.764
is that when you're talking
about overclocking,

15
00:00:38.764 --> 00:00:41.990
there's more than one clock
inside one of these devices.

16
00:00:41.990 --> 00:00:46.650
So, for instance, a typical
board say, Raspberry Pi.

17
00:00:46.650 --> 00:00:50.490
It's got several clocks.

18
00:00:50.490 --> 00:00:52.710
There is a clock
going into the chip,

19
00:00:52.710 --> 00:00:54.480
into the main
processor but there's

20
00:00:54.480 --> 00:00:56.510
a system clock that's for

21
00:00:56.510 --> 00:00:57.530
the rest of the components on

22
00:00:57.530 --> 00:00:59.075
the board and the rate base be.

23
00:00:59.075 --> 00:01:00.890
By the way, system
clock rate is always

24
00:01:00.890 --> 00:01:03.110
slower or the magnitude

25
00:01:03.110 --> 00:01:05.080
slower than the clock
rate of the chip.

26
00:01:05.080 --> 00:01:08.330
Because communication from
chip to chip is slower.

27
00:01:08.330 --> 00:01:10.535
So, you have to slow
down the clock rate.

28
00:01:10.535 --> 00:01:14.285
Also, even internally
in the processor

29
00:01:14.285 --> 00:01:18.535
inside the microcontroller
or microprocessor,

30
00:01:18.535 --> 00:01:21.410
whichever it is, there are
multiple clocks inside there.

31
00:01:21.410 --> 00:01:23.630
So, there's one high-speed
clock coming in,

32
00:01:23.630 --> 00:01:25.670
but there are different what
they call clock domains.

33
00:01:25.670 --> 00:01:27.560
Different regions
of the chip which

34
00:01:27.560 --> 00:01:29.900
can run at different
clock frequencies.

35
00:01:29.900 --> 00:01:35.010
So, it's a little bit
simple to just say,

36
00:01:35.010 --> 00:01:36.225
"I'm just going to
be at the clock."

37
00:01:36.225 --> 00:01:37.455
Which clock you talking about?

38
00:01:37.455 --> 00:01:40.560
But we're assuming right now
assuming all the clocks,

39
00:01:40.560 --> 00:01:43.550
basically the one high-speed
clock that goes into

40
00:01:43.550 --> 00:01:45.260
the microprocessor that is

41
00:01:45.260 --> 00:01:46.800
being used to create
all the rest of the clock.

42
00:01:46.800 --> 00:01:48.080
So, you can assume
all the clocks on

43
00:01:48.080 --> 00:01:51.060
chip are going up together.

44
00:01:51.290 --> 00:01:54.495
So, what's the impact
of overclocking?

45
00:01:54.495 --> 00:01:57.695
Now, the first obvious impact

46
00:01:57.695 --> 00:02:00.005
is it instructions are
executed more quickly.

47
00:02:00.005 --> 00:02:02.810
So, roughly there's
one instruction

48
00:02:02.810 --> 00:02:04.340
per clock period
and I say roughly

49
00:02:04.340 --> 00:02:05.840
because this is vastly

50
00:02:05.840 --> 00:02:08.390
simplifying what goes on
inside Computer Architecture.

51
00:02:08.390 --> 00:02:10.850
I'm hiding tons of parallelism

52
00:02:10.850 --> 00:02:13.760
and pipelining and all sorts
of details like that.

53
00:02:13.760 --> 00:02:15.500
But roughly, a component

54
00:02:15.500 --> 00:02:17.060
can only do one thing
at one time.

55
00:02:17.060 --> 00:02:18.170
So, if you've got

56
00:02:18.170 --> 00:02:19.490
one adder is going to do

57
00:02:19.490 --> 00:02:21.035
one add instruction
in a clock cycle.

58
00:02:21.035 --> 00:02:22.340
You've got one multiplier
is going to do one

59
00:02:22.340 --> 00:02:24.340
multiply instruction in
clock cycle and so on.

60
00:02:24.340 --> 00:02:26.730
So, it happens per clock cycle.

61
00:02:26.730 --> 00:02:27.750
Each one house per clock cycle.

62
00:02:27.750 --> 00:02:30.230
So, roughly you're speeding

63
00:02:30.230 --> 00:02:32.530
up the rate at which
instructions are executed.

64
00:02:32.530 --> 00:02:34.990
Now, there's a downside though,

65
00:02:34.990 --> 00:02:36.210
because even if I say,
"Wow, why don't I

66
00:02:36.210 --> 00:02:37.820
just crank it up forever?"

67
00:02:37.820 --> 00:02:39.650
So, there's a limit to this.

68
00:02:39.650 --> 00:02:42.255
Signals have a shorter
time in which to travel.

69
00:02:42.255 --> 00:02:43.875
So, what I mean by this is that,

70
00:02:43.875 --> 00:02:45.785
and this is my quick overview

71
00:02:45.785 --> 00:02:48.485
of synchronous circuit design.

72
00:02:48.485 --> 00:02:50.330
So, there are what are called

73
00:02:50.330 --> 00:02:52.025
flip-flops inside these devices.

74
00:02:52.025 --> 00:02:53.750
A flip-flop is part
of a register,

75
00:02:53.750 --> 00:02:55.385
a flip-flop [inaudible]
storage elements.

76
00:02:55.385 --> 00:02:57.565
It stores one bit
a zero or a one.

77
00:02:57.565 --> 00:03:00.365
We talk about D flip-flops
is to a one-bit 01.

78
00:03:00.365 --> 00:03:03.215
Each one of these flip-flops
receives a clock,

79
00:03:03.215 --> 00:03:04.790
and remember that the clock is

80
00:03:04.790 --> 00:03:06.890
just a waveform
that's low then high,

81
00:03:06.890 --> 00:03:08.585
then low then high square wave

82
00:03:08.585 --> 00:03:10.960
over time at some frequency.

83
00:03:10.960 --> 00:03:13.200
So, what happens with
these flip-flops is,

84
00:03:13.200 --> 00:03:15.225
they can load a new value.

85
00:03:15.225 --> 00:03:17.140
Every time the
clock edge goes up,

86
00:03:17.140 --> 00:03:18.440
every time it goes
from low to high.

87
00:03:18.440 --> 00:03:19.825
They can load a new value.

88
00:03:19.825 --> 00:03:21.710
So, the rate of which they load

89
00:03:21.710 --> 00:03:23.660
new values like you
might have an adder,

90
00:03:23.660 --> 00:03:26.210
and there is a flip flop at
the output of the adder.

91
00:03:26.210 --> 00:03:28.070
There's a set of
flip-flops that hold

92
00:03:28.070 --> 00:03:29.645
the result of the addition.

93
00:03:29.645 --> 00:03:32.330
If the rate at which they load

94
00:03:32.330 --> 00:03:33.830
new values is the rate at which

95
00:03:33.830 --> 00:03:35.390
the addition operations
are happening.

96
00:03:35.390 --> 00:03:37.910
The maximum is the best rate
at which it can happen?

97
00:03:37.910 --> 00:03:42.110
Because if it loads
one every second,

98
00:03:42.110 --> 00:03:44.310
then there's one addition
happening every second.

99
00:03:44.310 --> 00:03:46.645
One additional result is
captured every second?

100
00:03:46.645 --> 00:03:49.635
So, the trick though is that,

101
00:03:49.635 --> 00:03:51.690
saying you've got
an adder, take an adder.

102
00:03:51.690 --> 00:03:54.470
The adder has some flip-flops

103
00:03:54.470 --> 00:03:56.870
as input holding some numbers
that you want to add,

104
00:03:56.870 --> 00:03:58.550
and then it's got
flip-flops that at

105
00:03:58.550 --> 00:04:00.580
his output that hold
the result of the addition.

106
00:04:00.580 --> 00:04:03.215
So, let's say
the clock edge goes up

107
00:04:03.215 --> 00:04:04.610
and new numbers get

108
00:04:04.610 --> 00:04:06.725
loaded into the input
redshifts for the adder.

109
00:04:06.725 --> 00:04:09.410
Then the adder starts
performing the addition.

110
00:04:09.410 --> 00:04:10.970
The result has to be

111
00:04:10.970 --> 00:04:13.760
completed by the time
the next clock edge goes up.

112
00:04:13.760 --> 00:04:15.320
The reason for that is because

113
00:04:15.320 --> 00:04:17.780
the register at the output set

114
00:04:17.780 --> 00:04:19.255
of flip-flops to
the output of the adder,

115
00:04:19.255 --> 00:04:22.460
they have to have
the right result there when

116
00:04:22.460 --> 00:04:25.910
the clock edge goes up when
they load in the new values.

117
00:04:25.910 --> 00:04:28.205
If the adder doesn't finish

118
00:04:28.205 --> 00:04:30.440
in that time between
the clock edges,

119
00:04:30.440 --> 00:04:32.915
then these result registers
in the output of the adder,

120
00:04:32.915 --> 00:04:35.905
are going to catch
the wrong data.

121
00:04:35.905 --> 00:04:37.440
Then you're going
to have garbage.

122
00:04:37.440 --> 00:04:38.550
Basically that's failure.

123
00:04:38.550 --> 00:04:41.040
When that happens, then
the whole machine fails.

124
00:04:41.040 --> 00:04:43.520
Weird things happen and you
get the blue screen of death.

125
00:04:43.520 --> 00:04:45.740
There's Windows or
whatever. Things fail.

126
00:04:45.740 --> 00:04:50.145
So, the delay across
these components like an adder,

127
00:04:50.145 --> 00:04:53.315
determine the fastest clock
frequency you can have.

128
00:04:53.315 --> 00:04:56.210
So, because as you increase
the clock frequency,

129
00:04:56.210 --> 00:04:59.365
you reduce the time
between the clock edges.

130
00:04:59.365 --> 00:05:01.430
That gives you less time to do

131
00:05:01.430 --> 00:05:03.635
each computation like an add.

132
00:05:03.635 --> 00:05:05.720
Now, at some point
you're going to hit

133
00:05:05.720 --> 00:05:08.145
a limit where errors
start happening.

134
00:05:08.145 --> 00:05:09.920
Where there isn't enough time,

135
00:05:09.920 --> 00:05:11.570
the result registers
get the wrong data

136
00:05:11.570 --> 00:05:12.710
and your system fails.

137
00:05:12.710 --> 00:05:15.520
The question is
where is that point?

138
00:05:15.520 --> 00:05:19.445
Now, what happens typically
when chips are manufactured,

139
00:05:19.445 --> 00:05:22.580
as they manufacture them and
then they test them to see

140
00:05:22.580 --> 00:05:23.990
what is the fastest rate at which

141
00:05:23.990 --> 00:05:25.760
they work and they don't fail.

142
00:05:25.760 --> 00:05:27.440
They test them at
different clock like at

143
00:05:27.440 --> 00:05:28.760
a high clock frequency

144
00:05:28.760 --> 00:05:30.380
that is called speed
binning, by the way.

145
00:05:30.380 --> 00:05:31.070
They test them at

146
00:05:31.070 --> 00:05:33.620
a higher clock frequency
and see if it fails.

147
00:05:33.620 --> 00:05:35.390
If it doesn't fail,

148
00:05:35.390 --> 00:05:36.710
then they sell it at,

149
00:05:36.710 --> 00:05:38.990
they cut off 15 percent or

150
00:05:38.990 --> 00:05:40.615
10-15 percent of
that clock frequency

151
00:05:40.615 --> 00:05:41.995
and sell it at that rate.

152
00:05:41.995 --> 00:05:43.410
Usually what happens is, you

153
00:05:43.410 --> 00:05:44.700
test it a high clock frequency,

154
00:05:44.700 --> 00:05:46.435
it fails because of weird delays.

155
00:05:46.435 --> 00:05:47.695
They tested a lower,

156
00:05:47.695 --> 00:05:49.780
lower, lower, until
finally it works.

157
00:05:49.780 --> 00:05:51.370
Wherever that clock frequency is,

158
00:05:51.370 --> 00:05:52.540
then they may be cutoff like

159
00:05:52.540 --> 00:05:54.700
10 percent of the clock
frequency something like that.

160
00:05:54.700 --> 00:05:56.020
To be safe, it's sort of

161
00:05:56.020 --> 00:05:58.880
a boundary and then
they sell it at that.

162
00:05:58.880 --> 00:06:00.880
Now, this boundary that's

163
00:06:00.880 --> 00:06:04.120
sort of a margin that they use
cutting up 10- 15 percent.

164
00:06:04.120 --> 00:06:05.530
When you are overclocking, you

165
00:06:05.530 --> 00:06:07.195
are eating into that margin.

166
00:06:07.195 --> 00:06:10.700
You're saying, well I'm going
to add 10 more percent in.

167
00:06:10.700 --> 00:06:12.990
That may work, it may not.

168
00:06:12.990 --> 00:06:15.015
Basically, this is
all probabilistic.

169
00:06:15.015 --> 00:06:16.970
Maybe that works
most of the time.

170
00:06:16.970 --> 00:06:20.475
But every once in
a while, you just crash.

171
00:06:20.475 --> 00:06:21.950
Because there's a timing error.

172
00:06:21.950 --> 00:06:23.630
Some result doesn't
reach a register fast

173
00:06:23.630 --> 00:06:25.700
enough and bam
everything crashes.

174
00:06:25.700 --> 00:06:27.860
So, that's what you're
doing with overclocking.

175
00:06:27.860 --> 00:06:29.150
So, there's always this risk

176
00:06:29.150 --> 00:06:30.980
that everything is going to fail.

177
00:06:30.980 --> 00:06:35.250
It's just the more you
overclock, the higher the risk.

178
00:06:35.390 --> 00:06:37.570
Also another thing is,

179
00:06:37.570 --> 00:06:38.720
that when you overclock

180
00:06:38.720 --> 00:06:41.015
the temperature of
the device increases.

181
00:06:41.015 --> 00:06:43.830
This happens because switching

182
00:06:43.830 --> 00:06:44.980
signals going from low to high,

183
00:06:44.980 --> 00:06:47.840
high to low it uses
power and it makes heat,

184
00:06:47.840 --> 00:06:50.255
and so the temperature of
the device just gets higher,

185
00:06:50.255 --> 00:06:51.740
and that's going to
generally shorten

186
00:06:51.740 --> 00:06:53.420
the lifetime of
your component because

187
00:06:53.420 --> 00:06:55.220
as it heats up it can

188
00:06:55.220 --> 00:06:57.030
only dissipate heat
at a certain rate.

189
00:06:57.030 --> 00:06:59.240
If you've ever seen
inside a motherboard,

190
00:06:59.240 --> 00:07:00.425
you seen these heat sinks

191
00:07:00.425 --> 00:07:02.075
that they attach to these devices

192
00:07:02.075 --> 00:07:06.200
big old things of metal
that dissipate the heat.

193
00:07:06.200 --> 00:07:08.075
They can only dissipate
heat at a certain rate.

194
00:07:08.075 --> 00:07:10.160
Assuming fan cooling, you
have a fan that blows

195
00:07:10.160 --> 00:07:12.320
over it and they can only
dissipate at a certain rate,

196
00:07:12.320 --> 00:07:14.575
and by the way Raspberry Pi,

197
00:07:14.575 --> 00:07:16.275
they don't have that.

198
00:07:16.275 --> 00:07:17.820
They don't have a fan.
They don't have

199
00:07:17.820 --> 00:07:20.480
heat sinks attached to
the process or any of that.

200
00:07:20.480 --> 00:07:22.550
So, they're not good
at dissipating heat.

201
00:07:22.550 --> 00:07:25.115
In fact, my Raspberry Pi
gets quite hot.

202
00:07:25.115 --> 00:07:26.705
I mean hot to the touch.

203
00:07:26.705 --> 00:07:28.460
You'll notice if you
tried doing something

204
00:07:28.460 --> 00:07:30.290
with it for awhile,
touch that thing.

205
00:07:30.290 --> 00:07:32.190
When I do computationally
intensive stuff with it,

206
00:07:32.190 --> 00:07:33.270
you touch the chip, it's

207
00:07:33.270 --> 00:07:35.340
actually hot like you
don't want to touch it.

208
00:07:35.340 --> 00:07:38.970
That damages it over time
and eventually fails.

209
00:07:39.320 --> 00:07:43.045
Increasing voltage. So,
another thing is overvolting.

210
00:07:43.045 --> 00:07:44.900
You can do in people
who often lump that in

211
00:07:44.900 --> 00:07:47.245
with overclocking, but
it is a different thing.

212
00:07:47.245 --> 00:07:49.560
So, increasing the voltage swing.

213
00:07:49.560 --> 00:07:51.570
So, instead of going from 0-3.3,

214
00:07:51.570 --> 00:07:53.655
you'd go 0-5 or
something like this.

215
00:07:53.655 --> 00:07:56.385
Typically, the voltage
swing on the chip

216
00:07:56.385 --> 00:07:58.700
the I/O is different than

217
00:07:58.700 --> 00:08:01.130
the voltage swing on
the individual processor,

218
00:08:01.130 --> 00:08:02.850
it's usually lower
on the processor.

219
00:08:02.850 --> 00:08:04.160
But increasing the voltage swing

220
00:08:04.160 --> 00:08:05.870
can increase
the transistor speed.

221
00:08:05.870 --> 00:08:08.960
If you increase the swing go
to a much higher voltage,

222
00:08:08.960 --> 00:08:10.460
then it takes less time

223
00:08:10.460 --> 00:08:12.830
to fill it with
current essentially.

224
00:08:12.830 --> 00:08:15.200
Really simplify. So, increase

225
00:08:15.200 --> 00:08:17.285
voltage swing could speed it up.

226
00:08:17.285 --> 00:08:19.670
But energy consumption is

227
00:08:19.670 --> 00:08:21.350
proportional to the square
of the voltage.

228
00:08:21.350 --> 00:08:23.030
So you increase voltage and you

229
00:08:23.030 --> 00:08:24.830
are greatly increasing
energy consumption.

230
00:08:24.830 --> 00:08:27.710
Now, if you plugged into
the wall maybe you don't care.

231
00:08:27.710 --> 00:08:31.045
But if you are using a battery
then that's a problem.

232
00:08:31.045 --> 00:08:33.150
Thermal effects can alter timing.

233
00:08:33.150 --> 00:08:34.615
So, when I say thermal effects,

234
00:08:34.615 --> 00:08:36.860
remember all this
switching that is

235
00:08:36.860 --> 00:08:43.160
actually increasing
energy consumption

236
00:08:43.160 --> 00:08:44.845
which is making more heat,

237
00:08:44.845 --> 00:08:47.685
and that he can alter timing.

238
00:08:47.685 --> 00:08:49.520
So, he can change timing in

239
00:08:49.520 --> 00:08:52.590
funny ways and we're not
going to get into the class.