WEBVTT

1
00:00:00.000 --> 00:00:05.746
[MUSIC]

2
00:00:05.746 --> 00:00:10.258
[SOUND] In this lecture we'll show a small

3
00:00:10.258 --> 00:00:14.637
example of how a human can interact with

4
00:00:14.637 --> 00:00:19.956
the Raspberry Pi through the library.

5
00:00:19.956 --> 00:00:22.924
So somebody can write a Python
program that uses that library, and

6
00:00:22.924 --> 00:00:25.945
allows the user to have the right
control over something hardware,

7
00:00:25.945 --> 00:00:28.436
some aspect of the hardware,
through these widgets and

8
00:00:28.436 --> 00:00:30.560
library components that
appear on the screen.

9
00:00:32.300 --> 00:00:36.020
So, here's our small example
using a Scale Widget.

10
00:00:36.020 --> 00:00:38.630
So a Scale Widget is basically that
slider that you see right there.

11
00:00:39.690 --> 00:00:41.280
It's called a Scale.

12
00:00:41.280 --> 00:00:41.907
And Tkinter.

13
00:00:41.907 --> 00:00:43.930
So our program to generate that.

14
00:00:43.930 --> 00:00:46.922
we start off with this from
Tkinter import star, so we import.

15
00:00:46.922 --> 00:00:49.620
Master = tk, so
that's creating the master window, right?

16
00:00:49.620 --> 00:00:53.170
Or the root window,
whatever you want to call it.

17
00:00:53.170 --> 00:00:53.880
So we create that.

18
00:00:53.880 --> 00:00:54.878
Then we create the scale.

19
00:00:54.878 --> 00:00:59.050
So w = scale and we call this function
scale and it generates the scale.

20
00:00:59.050 --> 00:01:03.480
And it returns w, which is the scale root,
the object to represent that scale.

21
00:01:03.480 --> 00:01:06.640
And scale in this case
takes several arguments.

22
00:01:06.640 --> 00:01:10.140
Some of them are required and some of them
are not, so master is the first argument.

23
00:01:10.140 --> 00:01:13.500
The first argument is actually
the name of the root window,

24
00:01:13.500 --> 00:01:17.520
which is mater in our case, so
you've gotta pass through that argument.

25
00:01:17.520 --> 00:01:22.320
And then from _0 to 100,
that gives you the range of the scale.

26
00:01:22.320 --> 00:01:24.880
So every scale has to
have a range of numbers.

27
00:01:24.880 --> 00:01:28.320
See, these scales,
they all have an integer inside or

28
00:01:28.320 --> 00:01:29.990
not necessarily an integer but
in our case an integer.

29
00:01:29.990 --> 00:01:33.060
They have a value,
a numerical value inside there

30
00:01:33.060 --> 00:01:36.477
associated with how far the scale
has moved to the left or the right.

31
00:01:36.477 --> 00:01:39.690
So that value has to have a range
from something to something.

32
00:01:39.690 --> 00:01:43.330
So that's what those two
arguments are from 0 to 100.

33
00:01:43.330 --> 00:01:44.860
This scale starts at 0.

34
00:01:44.860 --> 00:01:46.920
If you moved it all the way to
the right it would go to 100.

35
00:01:46.920 --> 00:01:50.070
And you have to give it
the some kind of a range.

36
00:01:51.340 --> 00:01:54.240
Now then the next argument which
is optional is the orientation.

37
00:01:54.240 --> 00:01:55.790
It says orient = horizontal.

38
00:01:55.790 --> 00:01:58.180
We've made a horizontal scale here.

39
00:01:58.180 --> 00:02:00.620
If you didn't give it that I think
the default is actually vertical so

40
00:02:00.620 --> 00:02:03.710
it could do a vertical up down scale but
either way,

41
00:02:03.710 --> 00:02:06.010
you can give it an orientation
if you want to.

42
00:02:06.010 --> 00:02:10.850
So, that call to scale, it returns this
scale object, which is assigned to w, so

43
00:02:10.850 --> 00:02:12.400
w is now a scale.

44
00:02:12.400 --> 00:02:13.850
And then to make that
appear on the screen,

45
00:02:13.850 --> 00:02:17.060
we have to say w.pack, and
then it appears on the screen, and

46
00:02:17.060 --> 00:02:21.360
you see something like
depending on what you're using.

47
00:02:21.360 --> 00:02:25.010
You see something that looks like
the picture on the screen that scale.

48
00:02:25.010 --> 00:02:27.770
Now this draws the Scale Widget and
the user can now move it.

49
00:02:27.770 --> 00:02:31.150
The user can take their mouse and grab on
the widget, and grab on the slider and

50
00:02:31.150 --> 00:02:32.230
slide it to the left and the right.

51
00:02:33.380 --> 00:02:35.520
Now that's part of our gooey.

52
00:02:35.520 --> 00:02:37.910
But that doesn't do anything
particularly interesting yet.

53
00:02:37.910 --> 00:02:40.560
It draws a scale and
you can move it left to right.

54
00:02:40.560 --> 00:02:43.030
But now we wanna interact with
something like that, right?

55
00:02:43.030 --> 00:02:50.260
We wanna allow the user to use
that scale to control something.

56
00:02:50.260 --> 00:02:53.240
Let's say have some pulse
width modulated signal, okay?

57
00:02:53.240 --> 00:02:54.450
And we've talked about,

58
00:02:54.450 --> 00:02:57.580
in the previous lecture, how to make
a pulse width modulated signal on a pin.

59
00:02:57.580 --> 00:03:00.950
Say we've got that, and
we want the pulse width to change and

60
00:03:00.950 --> 00:03:03.310
to be controlled by
the user through the scale.

61
00:03:03.310 --> 00:03:06.790
So, this, so
our scale was from 0 to 100, right?

62
00:03:06.790 --> 00:03:09.570
So, let's say the duty
cycle was that value.

63
00:03:09.570 --> 00:03:11.610
And, if the scale was moved
all the way to the left,

64
00:03:11.610 --> 00:03:14.820
its at 0, then the duty cycle is 0,
which means its low all the time.

65
00:03:14.820 --> 00:03:17.050
There's pulse, pwm signal.

66
00:03:17.050 --> 00:03:19.940
And, they move it all to the right
its 100, so its high all the time.

67
00:03:19.940 --> 00:03:22.790
And, they can move it in between,
50, and its high half the time,

68
00:03:22.790 --> 00:03:24.270
low half the time, and so on.

69
00:03:24.270 --> 00:03:27.690
So, we want to make something with
a pulse width, we have a pulse

70
00:03:27.690 --> 00:03:30.980
width modulated signal, the pulse
width is controlled by that scale, so

71
00:03:30.980 --> 00:03:35.090
by the user, through this scale.

72
00:03:35.090 --> 00:03:36.140
So, how do we do this?

73
00:03:36.140 --> 00:03:39.540
So first thing, we'd have to change
our original program a little bit.

74
00:03:39.540 --> 00:03:42.340
So remember that line of code
where we said w = scale.

75
00:03:42.340 --> 00:03:43.660
We call that function scale, right?

76
00:03:43.660 --> 00:03:45.480
So now we're changing that call.

77
00:03:46.920 --> 00:03:49.430
The first four arguments are the same,
right?

78
00:03:49.430 --> 00:03:54.100
Master, the root window,
the from and to, the range 0 to 100.

79
00:03:54.100 --> 00:03:56.410
Orient horizontal,
make a horizontal orientation.

80
00:03:56.410 --> 00:03:59.520
But we're adding this command = update.

81
00:03:59.520 --> 00:04:03.140
So what that is, that's whats called
a reference tool call back function.

82
00:04:05.000 --> 00:04:09.150
Now, the call back function,
in this case, is called, update.

83
00:04:09.150 --> 00:04:14.040
What that means is that any time
a user actually moves that slider,

84
00:04:14.040 --> 00:04:15.409
it's called this update function.

85
00:04:16.530 --> 00:04:20.160
And what it, what it does is it passes
an argument to that update function.

86
00:04:20.160 --> 00:04:25.120
It passes a single argument, the number
inside that is associated with this scale.

87
00:04:25.120 --> 00:04:27.260
So this scale goes from 0 to 100, right?

88
00:04:27.260 --> 00:04:31.520
So that number 0 to 100, according to you
know, whatever the scale is on, that is,

89
00:04:31.520 --> 00:04:34.240
passes an argument to the update function.

90
00:04:34.240 --> 00:04:35.190
Now this update function.

91
00:04:35.190 --> 00:04:36.610
You might ask well what
is this update function?

92
00:04:36.610 --> 00:04:38.990
This update function is
whatever you want it to be.

93
00:04:38.990 --> 00:04:41.290
So you now have to update
this update function.

94
00:04:41.290 --> 00:04:43.690
So you can see we've written
an definition of an update function.

95
00:04:43.690 --> 00:04:44.860
Def update duty.

96
00:04:44.860 --> 00:04:46.250
It takes an argument right?

97
00:04:46.250 --> 00:04:49.130
Remember I said this update
function has to take one argument,

98
00:04:49.130 --> 00:04:53.250
the value from 0 to 100 that
the scale is containing, right?

99
00:04:53.250 --> 00:04:54.840
It takes it as an argument and

100
00:04:54.840 --> 00:04:59.280
we just inside there we call
pwm.ChangeDuty Cyclefloatduty.

101
00:04:59.280 --> 00:05:02.560
We just change the duty cycle,
make duty into a float, and

102
00:05:02.560 --> 00:05:05.640
then we pass that to Change Duty Cycle.

103
00:05:05.640 --> 00:05:08.810
Whatever that scale value is,
whatever the new scale value is

104
00:05:08.810 --> 00:05:12.360
because this update function it only gets
called if somebody moved that scale.

105
00:05:12.360 --> 00:05:15.750
If they move that scale and
they set the scale now at 25.

106
00:05:15.750 --> 00:05:18.940
Then a duty will equal 25
when you make that call and

107
00:05:18.940 --> 00:05:20.370
you'll change the duty cycle to 25.

108
00:05:20.370 --> 00:05:24.700
And then if they take that scale and
move to 50 update will get called again,

109
00:05:24.700 --> 00:05:27.400
duty will be 50,
you change the duty cycle to 50.

110
00:05:27.400 --> 00:05:29.740
So, in this way,
by adding that command = update,

111
00:05:29.740 --> 00:05:32.390
we've added what's called
a callback function, right?

112
00:05:32.390 --> 00:05:34.340
A reference to a callback function.

113
00:05:34.340 --> 00:05:36.780
Basically, a callback
function is a generic term.

114
00:05:36.780 --> 00:05:39.580
It means a function that is called
when an event happens, okay?

115
00:05:39.580 --> 00:05:41.840
And it's often used with
graphic user interfaces.

116
00:05:41.840 --> 00:05:44.230
So, updates have callback function,
we have to define it.

117
00:05:44.230 --> 00:05:46.440
And note, we don't have to
call that function update.

118
00:05:46.440 --> 00:05:47.520
We chose to call it update.

119
00:05:47.520 --> 00:05:49.430
We could have used any name we wanted to.

120
00:05:49.430 --> 00:05:49.980
Okay?

121
00:05:49.980 --> 00:05:51.470
In this case we use update.

122
00:05:51.470 --> 00:05:54.520
So and we can define the update
function and do whatever we want.

123
00:05:54.520 --> 00:05:56.200
In this case it's changing
pulse with modulation.

124
00:05:56.200 --> 00:06:00.520
But you could be changing,
I don't know, whatever you want.

125
00:06:00.520 --> 00:06:05.330
So yeah, the function takes
the slider value of an argument and

126
00:06:05.330 --> 00:06:07.720
that's a way you can get
interaction to work.

127
00:06:07.720 --> 00:06:08.239
Thank you.

128
00:06:08.239 --> 00:06:16.401
[MUSIC]