WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.462 --> 00:00:15.280
List methods are very
similar to list operators.

3
00:00:15.280 --> 00:00:19.430
The main difference is that list
methods are invoked in a different way.

4
00:00:19.430 --> 00:00:22.080
They're invoked on a list, so

5
00:00:22.080 --> 00:00:26.760
you have to use the name of the list
that you're invoking the operation on.

6
00:00:26.760 --> 00:00:31.500
You use that name in the invocation,
you prefix it actually.

7
00:00:31.500 --> 00:00:33.730
So let's just take a look.

8
00:00:33.730 --> 00:00:37.950
So you've got a list, [1, 2, 3], and
you want to append something to the list,

9
00:00:37.950 --> 00:00:40.440
meaning add a number 8
onto the end of the list.

10
00:00:40.440 --> 00:00:43.630
So there's a list method called append.

11
00:00:43.630 --> 00:00:46.394
And the way you invoke is you say,
list.append, and

12
00:00:46.394 --> 00:00:48.380
in parentheses you pass 8.

13
00:00:48.380 --> 00:00:52.470
So what that will do is it'll take this
list, lst, which we just defined, and

14
00:00:52.470 --> 00:00:55.040
it will append 8 onto that list.

15
00:00:55.040 --> 00:00:57.610
Notice that one of
the arguments is append,

16
00:00:57.610 --> 00:00:59.590
this append operator is working on list.

17
00:00:59.590 --> 00:01:04.130
But list is not an explicit argument
to the append function, right?

18
00:01:04.130 --> 00:01:09.690
You prefix the whole invocation
with the list, lst., right?

19
00:01:09.690 --> 00:01:12.910
So what happens underneath the hood
is it basically takes that list and

20
00:01:12.910 --> 00:01:14.470
passes it to the append function.

21
00:01:14.470 --> 00:01:17.020
But it's just a different way
of doing the same thing, for

22
00:01:17.020 --> 00:01:20.610
all appearances sake it looks different,
but it does the same thing, okay.

23
00:01:20.610 --> 00:01:25.950
So there are several methods like this
where you invoke them by starting off

24
00:01:25.950 --> 00:01:29.750
by prefixing the invocation with the name
of the list that you wanna operate on.

25
00:01:29.750 --> 00:01:32.570
And then a dot and then you give
the name of the function or the method.

26
00:01:34.330 --> 00:01:38.231
So now if you print that list after
doing this append, it's [1, 2, 3, 8], so

27
00:01:38.231 --> 00:01:38.950
it did its job.

28
00:01:40.640 --> 00:01:44.580
So there's a set of list methods,
here's some list methods.

29
00:01:44.580 --> 00:01:45.845
The most common ones anyway.

30
00:01:45.845 --> 00:01:50.455
lst.append, it does just what we saw,
it appends an item onto a list.

31
00:01:50.455 --> 00:01:55.660
lst.count, it returns the number of times
a particular item appears in a list.

32
00:01:57.355 --> 00:01:58.750
lst.index for

33
00:01:58.750 --> 00:02:02.260
a particular item, it returns the index
of the first occurrence of the item.

34
00:02:02.260 --> 00:02:07.001
So if you have that list that we just saw,
[1, 2, 3, 8], and

35
00:02:07.001 --> 00:02:10.760
I said lst.item for 8,
it would return 3, right?

36
00:02:10.760 --> 00:02:14.489
Because that's the third element starting
at 0, 0, 1, 2, 3, it's the third element.

37
00:02:15.870 --> 00:02:17.050
Pop.

38
00:02:17.050 --> 00:02:24.250
Pop removes the last item out of a list,
and it returns the item, okay?

39
00:02:24.250 --> 00:02:26.930
So pop, and that's different
than lst.remove, if you look at

40
00:02:26.930 --> 00:02:30.260
lst.remove which is the next one,
it just removes the item from the list.

41
00:02:30.260 --> 00:02:32.600
It will remove an arbitrary
item from the list.

42
00:02:32.600 --> 00:02:37.200
but pop removes the first item,
but it also returns,

43
00:02:37.200 --> 00:02:41.280
oh, excuse me, pop removes the last item,
and it returns the last item,

44
00:02:41.280 --> 00:02:44.445
where lst.remove doesn't return anything,
so there's a difference there.

45
00:02:44.445 --> 00:02:49.250
lst.reverse, it doesn't return anything,
it reverses the order of the list,

46
00:02:49.250 --> 00:02:51.522
reverses the order of
the elements in the list.

47
00:02:51.522 --> 00:02:56.140
And lst.sort, it doesn't return anything,
it just sorts the element of the list in

48
00:02:56.140 --> 00:02:57.950
increasing order for
whatever the elements are.

49
00:02:57.950 --> 00:03:01.631
So if it's alphabetical or alphanumeric,
it just sorts them in alphanumeric order.

50
00:03:04.173 --> 00:03:08.600
Yeah and append, remove, reverse and
sort don't actually return any values,

51
00:03:08.600 --> 00:03:11.802
they just modify the list,
they don't return anything.

52
00:03:11.802 --> 00:03:12.642
Thank you.

53
00:03:12.642 --> 00:03:21.459
[MUSIC]