WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.258 --> 00:00:15.778
Python, you can define functions in Python
like you can in basically every high level

3
00:00:15.778 --> 00:00:16.810
language.

4
00:00:16.810 --> 00:00:19.750
Now we talked about functions
a little bit with Arduino too.

5
00:00:19.750 --> 00:00:22.080
We didn't use them a whole lot,
but we talked about them and

6
00:00:22.080 --> 00:00:23.620
how to define them and how to use them.

7
00:00:23.620 --> 00:00:27.190
You can do the same thing in Python and
functions can be very useful.

8
00:00:27.190 --> 00:00:30.930
So, a function is really just
a sequence of instructions

9
00:00:30.930 --> 00:00:32.790
that are associated with
some function name.

10
00:00:32.790 --> 00:00:34.810
So, you make a sequence
of instructions and

11
00:00:34.810 --> 00:00:37.660
you put a name on top of them,
that's the function name.

12
00:00:37.660 --> 00:00:42.450
And then you can invoke that
function using that name later on.

13
00:00:44.150 --> 00:00:49.420
A function in Python starts with a def,
to define the function, and then

14
00:00:49.420 --> 00:00:54.800
it's followed by the name of the function,
open, close parentheses, and a colon.

15
00:00:54.800 --> 00:00:56.170
That's always what
the first line looks like.

16
00:00:57.410 --> 00:01:00.010
So, here we've got an example of
the beginning of the function,

17
00:01:00.010 --> 00:01:04.210
let's say def test, I'll call my
function test, put the colon there.

18
00:01:04.210 --> 00:01:08.225
And then after that I have my code inside
my function, print('A test function'),

19
00:01:08.225 --> 00:01:09.601
that's the whole function.

20
00:01:09.601 --> 00:01:13.360
And then later on,
that's the definition of my function.

21
00:01:13.360 --> 00:01:17.498
And then later on I type test(), and it
will, I type type test(), hit Return, and

22
00:01:17.498 --> 00:01:20.674
it will actually execute my function,
printing a test function,

23
00:01:20.674 --> 00:01:22.060
which is what I told it to do.

24
00:01:24.173 --> 00:01:27.400
So, that's basically how
you define a function.

25
00:01:27.400 --> 00:01:30.198
Now a few things about
defining these functions.

26
00:01:30.198 --> 00:01:33.940
One thing to note is that,
so here's my function.

27
00:01:33.940 --> 00:01:34.910
That's my function definition,

28
00:01:34.910 --> 00:01:39.530
every function has to have a definition
before you can invoke it and call it.

29
00:01:39.530 --> 00:01:42.490
Inside a function,
all the instructions are indented,

30
00:01:42.490 --> 00:01:44.330
and this is really important.

31
00:01:44.330 --> 00:01:47.804
If you don't do proper indentation
Python will not understand the code,

32
00:01:47.804 --> 00:01:48.933
it will not run, okay?

33
00:01:48.933 --> 00:01:51.318
So that notice of that word print,

34
00:01:51.318 --> 00:01:55.820
that print statement is indented
after the def, all right.

35
00:01:55.820 --> 00:01:59.050
Since it's indented the interpreter knows,

36
00:01:59.050 --> 00:02:01.620
oh, this print statement
is part of this function.

37
00:02:01.620 --> 00:02:07.090
And if it were indented, if it were
indented the same amount as the word def.

38
00:02:07.090 --> 00:02:08.930
So warrant indented within the def.

39
00:02:08.930 --> 00:02:11.347
Then it would think, oh,
this must not be part of the function.

40
00:02:11.347 --> 00:02:15.634
The function definition must be finished,
and now I'm moving on to other code.

41
00:02:15.634 --> 00:02:17.794
But because I've indented it,
it knows, oh,

42
00:02:17.794 --> 00:02:21.330
this is within the function definition,
that's really important.

43
00:02:21.330 --> 00:02:25.970
Indentation is one thing about Python
which, on the one hand, is a pain.

44
00:02:25.970 --> 00:02:30.211
Because in C you don't need indentation,
You can write the whole program on

45
00:02:30.211 --> 00:02:33.804
one gigantic line of nasty looking
line of code and it'll work.

46
00:02:33.804 --> 00:02:37.140
Now it's a terrible way to write code,
but it'll work.

47
00:02:37.140 --> 00:02:39.670
Where Python, they force you to indent.

48
00:02:39.670 --> 00:02:43.840
Now indentation as I've often taught
in class as say in C classes,

49
00:02:43.840 --> 00:02:45.080
indentation is important,

50
00:02:45.080 --> 00:02:49.490
you should do it as a programmer to make
your code easier to read and so forth.

51
00:02:49.490 --> 00:02:51.640
But C doesn't force it,
doesn't require it.

52
00:02:51.640 --> 00:02:55.400
Python requires it, so Python is forcing
the programmer to do the right thing.

53
00:02:55.400 --> 00:02:57.840
Indentation's a good idea,
Python just forces it.

54
00:02:59.250 --> 00:03:03.895
So IDLE will do this automatically, which
means that once you type in the def and

55
00:03:03.895 --> 00:03:06.825
the colon and hit return,
the next line will be indented.

56
00:03:06.825 --> 00:03:09.405
If you're doing this interactively,

57
00:03:09.405 --> 00:03:11.665
it will be indented and
it'll keep doing that.

58
00:03:11.665 --> 00:03:14.205
And when you actually get
to the end of the function,

59
00:03:14.205 --> 00:03:15.285
you don't want it to be indented.

60
00:03:15.285 --> 00:03:18.045
So you'd hit return and
then hit delete to unindent it and

61
00:03:18.045 --> 00:03:19.785
then you keep writing your code.

62
00:03:19.785 --> 00:03:22.145
If you were doing this in IDLE,
that's what you'd do.

63
00:03:24.080 --> 00:03:27.490
So, once you define the function, you call
the function, invoke the function, or

64
00:03:27.490 --> 00:03:28.170
call the function.

65
00:03:28.170 --> 00:03:29.310
The way you call the function,

66
00:03:29.310 --> 00:03:33.740
is you type the name of the function,
followed by the parenthesis after it.

67
00:03:33.740 --> 00:03:37.274
So, with test, you would say test,
open paren, closed paren.

68
00:03:37.274 --> 00:03:40.135
Now, note that you can have
arguments inside those parenthesis,

69
00:03:40.135 --> 00:03:42.241
we'll talk about that in
the next set of slides.

70
00:03:42.241 --> 00:03:46.938
But that is how you would invoke
a function, give it a function name plus

71
00:03:46.938 --> 00:03:52.598
the open parenthesis close parenthesis and
hit Enter then it will execute function.

72
00:03:52.598 --> 00:04:00.840
[MUSIC]