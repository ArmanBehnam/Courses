WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.415 --> 00:00:15.054
We'll start off talking about the features
of Python that are very basic.

3
00:00:15.054 --> 00:00:17.970
That are common to basically
all programming languages.

4
00:00:17.970 --> 00:00:19.305
Algebraic expressions,

5
00:00:19.305 --> 00:00:23.439
every programming language can parse
algebraic expressions and process them.

6
00:00:23.439 --> 00:00:26.909
What we see down here in blue,
the blue background.

7
00:00:26.909 --> 00:00:30.120
Those are some algebraic expressions
that have been evaluated by Python.

8
00:00:30.120 --> 00:00:32.490
They've been typed into
the Python shell interactively.

9
00:00:32.490 --> 00:00:35.700
So the three, greater than signs,
those are the prompt.

10
00:00:35.700 --> 00:00:38.291
And so at the top 2+2 you type that in,
you hit Enter.

11
00:00:38.291 --> 00:00:40.980
It returns four,
it prints out four, and so on.

12
00:00:40.980 --> 00:00:44.330
So it has regular algebraic operations
that you can use in these algebraic

13
00:00:44.330 --> 00:00:45.070
expressions.

14
00:00:45.070 --> 00:00:47.180
And there's nothing uncommon about this.

15
00:00:47.180 --> 00:00:48.800
So the shell can evaluate those.

16
00:00:48.800 --> 00:00:52.880
Also there are other functions besides the
regular add, subtract, multiply, divide.

17
00:00:52.880 --> 00:00:56.230
There are few other built in functions,
mathematical functions you can use.

18
00:00:56.230 --> 00:00:59.990
Here are a few of them,
abs, A-B-S, absolute value.

19
00:00:59.990 --> 00:01:02.170
Min, find the min between
a set of numbers.

20
00:01:02.170 --> 00:01:03.690
Max, so forth.

21
00:01:03.690 --> 00:01:06.810
So there are a pile of these mathematical
functions that you can use inside your

22
00:01:06.810 --> 00:01:07.620
algebraic expressions.

23
00:01:09.740 --> 00:01:11.140
Boolean expressions.

24
00:01:11.140 --> 00:01:12.588
So Boolean expressions,

25
00:01:12.588 --> 00:01:17.010
they're similar to algebraic expressions
except they return true or false.

26
00:01:17.010 --> 00:01:18.359
They evaluate to true or false.

27
00:01:18.359 --> 00:01:21.559
So you can see here two
less than four is true.

28
00:01:21.559 --> 00:01:24.030
One greater than three is false.

29
00:01:24.030 --> 00:01:25.440
And so on.

30
00:01:25.440 --> 00:01:28.080
So there's greater than equal,
equal is a comparison.

31
00:01:28.080 --> 00:01:31.210
Remember to distinguish equal
equal from single equal, right?

32
00:01:31.210 --> 00:01:34.848
So a single equal is
a variable assignment, x = 3.

33
00:01:34.848 --> 00:01:38.168
Where if you say x == 3 that's
a comparison that evaluates to true

34
00:01:38.168 --> 00:01:39.350
or false.

35
00:01:39.350 --> 00:01:43.860
But these are Boolean expressions,
you find these in all languages.

36
00:01:43.860 --> 00:01:45.720
They involve comparison operators.

37
00:01:45.720 --> 00:01:49.540
So greater than, less than, equal,
not equal, less than equal,

38
00:01:49.540 --> 00:01:53.570
greater than equal, so
forth usually involve comparisons.

39
00:01:54.810 --> 00:01:59.970
So, Boolean operators, Boolean meaning
things that evaluate to true false.

40
00:01:59.970 --> 00:02:04.050
These are operators, basically they're
and, or, and not, are the basic ones.

41
00:02:04.050 --> 00:02:07.500
There are other ones too but and,
or, not, the logic operators.

42
00:02:07.500 --> 00:02:09.850
And these also evaluate to true or false.

43
00:02:09.850 --> 00:02:13.810
They return true or false, but
their inputs are also true or false.

44
00:02:13.810 --> 00:02:15.670
Are also Boolean, right.

45
00:02:15.670 --> 00:02:17.587
So for instance here, take the and.

46
00:02:17.587 --> 00:02:23.425
If you look at that first line 2<3 and
3<4 and it returns true.

47
00:02:23.425 --> 00:02:25.788
So and in this case has two inputs.

48
00:02:25.788 --> 00:02:27.106
This is in fixed notation.

49
00:02:27.106 --> 00:02:28.345
So the and has two inputs.

50
00:02:28.345 --> 00:02:30.400
The thing on the left, and
the thing on the right.

51
00:02:30.400 --> 00:02:33.190
The thing on the left evaluated
to true two less than three.

52
00:02:33.190 --> 00:02:35.240
The thing on the right evaluated to true.

53
00:02:35.240 --> 00:02:36.489
And so, its result is true.

54
00:02:36.489 --> 00:02:43.319
So these operators and, or, and not,
their inputs are Boolean, true and false.

55
00:02:43.319 --> 00:02:45.150
And their outputs are Boolean true and
false.

56
00:02:46.500 --> 00:02:47.925
You can see at the bottom.

57
00:02:47.925 --> 00:02:51.250
Actually and, and or
take two inputs, not just takes one.

58
00:02:51.250 --> 00:02:53.918
So if you look at not it just
says not of three less than four.

59
00:02:53.918 --> 00:02:58.180
Three less than four is true, so not
of that is false then and returns that.

60
00:02:58.180 --> 00:03:00.880
So that takes a single argument,
but the other ones are double, or

61
00:03:00.880 --> 00:03:02.950
two arguments and
they're in fixed notations.

62
00:03:02.950 --> 00:03:04.780
Where actually the not
is pre-fixed notation.

63
00:03:04.780 --> 00:03:06.790
The word not is placed
before the argument.

64
00:03:06.790 --> 00:03:08.759
But that's not how it is with and, and or.

65
00:03:12.039 --> 00:03:13.320
Variables.

66
00:03:13.320 --> 00:03:17.780
So like all, basically every other
high-level language there are variables.

67
00:03:17.780 --> 00:03:20.600
And you can assign these
variables to values.

68
00:03:20.600 --> 00:03:23.020
So, this is pretty straightforward, and

69
00:03:23.020 --> 00:03:25.130
note the syntax difference
between this and C.

70
00:03:25.130 --> 00:03:28.890
Remember how C, every assignment you'd
have to have a semicolon at the end right?

71
00:03:28.890 --> 00:03:31.530
Not here, you just write it.

72
00:03:31.530 --> 00:03:34.250
So variable types are not declared.

73
00:03:34.250 --> 00:03:36.400
That's another difference between this and
C.

74
00:03:36.400 --> 00:03:39.660
So that a, you can say x equals three on
the first line and you don't have to say,

75
00:03:39.660 --> 00:03:41.180
x is an int, x is afloat.

76
00:03:41.180 --> 00:03:44.428
It'll just use x as an int
because three is an int.

77
00:03:44.428 --> 00:03:46.809
Interpreter determines the type by usage.

78
00:03:46.809 --> 00:03:47.609
Thank you.

79
00:03:47.609 --> 00:03:54.970
[MUSIC]