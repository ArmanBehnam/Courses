WEBVTT

1
00:00:00.000 --> 00:00:07.862
[MUSIC]

2
00:00:11.662 --> 00:00:16.080
So we want to use the Raspberry Pi
device as an IoT device.

3
00:00:16.080 --> 00:00:19.050
That's most common for
the purpose of this course anyway.

4
00:00:19.050 --> 00:00:20.480
That's what we want.

5
00:00:20.480 --> 00:00:23.670
And now Raspberry Pi remember doesn't
have to be used as an IoT device.

6
00:00:23.670 --> 00:00:28.450
Raspberry Pi can be used as a laptop,
desktop, substitute for such a thing.

7
00:00:28.450 --> 00:00:31.250
It might be a slow substitute but
you can use it that way.

8
00:00:31.250 --> 00:00:35.252
You just plug in the HDMI,
plug in the monitor into HDMI.

9
00:00:35.252 --> 00:00:40.090
Plug in keyboard and mouse into
the USB and it'll act like a laptop.

10
00:00:41.520 --> 00:00:43.996
We're going to use it as an IoT device.

11
00:00:43.996 --> 00:00:47.125
What that means is that we're going to
use it inside some bigger system and

12
00:00:47.125 --> 00:00:49.906
we will use it to control other devices,
observe other devices.

13
00:00:49.906 --> 00:00:53.952
So we'll connect the sensors and actuators
and it'll receive data from sensors,

14
00:00:53.952 --> 00:00:56.440
output command, and actuators.

15
00:00:56.440 --> 00:00:59.230
So when you're using it like that,
a programming is needed.

16
00:00:59.230 --> 00:01:02.630
Notice that if you use it as a laptop,
desktop you don't have to program.

17
00:01:02.630 --> 00:01:06.040
You can sit there and,
just like you would with any laptop,

18
00:01:06.040 --> 00:01:09.870
run applications on in it and so
forth and you don't have to write code.

19
00:01:09.870 --> 00:01:13.720
But, when you wanna use it as an IoT
device you need to write code.

20
00:01:13.720 --> 00:01:16.010
Because the code basically
is telling it what to do.

21
00:01:16.010 --> 00:01:19.120
You don't want the user directly
interfacing with the device telling it how

22
00:01:19.120 --> 00:01:21.410
to work step-by-step.

23
00:01:21.410 --> 00:01:23.650
You want to have a bunch of
code there that just runs and

24
00:01:23.650 --> 00:01:24.930
does what it's supposed to do.

25
00:01:24.930 --> 00:01:27.460
So you need programming, so
that's what we're going to do.

26
00:01:27.460 --> 00:01:29.580
So what language can you program in?

27
00:01:29.580 --> 00:01:34.020
Well with the Raspberry Pi,
it's a microcontroller, and

28
00:01:34.020 --> 00:01:35.160
you have many choices.

29
00:01:35.160 --> 00:01:37.100
It's a microcontroller
with an operating system.

30
00:01:37.100 --> 00:01:41.990
So you have many choices as to what type
of programming environment you wanna use.

31
00:01:41.990 --> 00:01:42.780
You can use,

32
00:01:42.780 --> 00:01:47.030
really, any language that you can find
the appropriate compiler interpreter for.

33
00:01:47.030 --> 00:01:51.060
So for instance, C, C++,
Java, these are all compiled.

34
00:01:51.060 --> 00:01:55.050
Well, Java's in between, you need
an interpreter for Java, too, but C, C++,

35
00:01:55.050 --> 00:01:57.590
anything like that, you can compile it,

36
00:01:57.590 --> 00:02:00.220
as long as you have a C compiler,
C++ compiler.

37
00:02:00.220 --> 00:02:03.010
And that exists for Raspberry Pi,
and you can use that.

38
00:02:03.010 --> 00:02:05.460
Cross compile it, maybe, or you can
compile it directly on the machine.

39
00:02:05.460 --> 00:02:06.760
That's fine, too.

40
00:02:06.760 --> 00:02:07.680
So you can do that.

41
00:02:08.690 --> 00:02:12.580
You can also use an interpreted language
or a scripted language like Java which is

42
00:02:12.580 --> 00:02:16.720
interpreted with the Java virtual machine,
Python, Perl, any of these type

43
00:02:16.720 --> 00:02:20.070
of languages where there's some type of
interpreter there to translate the code.

44
00:02:20.070 --> 00:02:21.100
As long as you have an interpreter for

45
00:02:21.100 --> 00:02:24.080
Raspberry Pi you can use
those languages too.

46
00:02:24.080 --> 00:02:25.850
So you have a lot of choice.

47
00:02:25.850 --> 00:02:27.770
We are going to use Python.

48
00:02:27.770 --> 00:02:32.136
Python is the best supported language for
Raspberry Pi.

49
00:02:32.136 --> 00:02:35.500
Now, I think that's supported,
you can use any language you want, but

50
00:02:35.500 --> 00:02:39.480
Python is the most popular and
best supported for Raspberry Pi.

51
00:02:39.480 --> 00:02:42.438
And when I say best supported there
is a good programming environment.

52
00:02:42.438 --> 00:02:44.580
There are good programming
environments for a lot of languages.

53
00:02:44.580 --> 00:02:48.935
But Python there is a lot of good
API's for Python on Raspberry Pi.

54
00:02:48.935 --> 00:02:51.180
API, meaning application
programming interface,

55
00:02:51.180 --> 00:02:55.890
basically library functions that are
convenient that do things that you want.

56
00:02:55.890 --> 00:02:59.042
So Python is the language that we're
going to use on the Raspberry Pi.

57
00:03:00.350 --> 00:03:02.630
So we got to learn
a little bit about Python,

58
00:03:02.630 --> 00:03:05.680
and so this module is really about Python.

59
00:03:06.830 --> 00:03:08.026
Learning the basics of Python so

60
00:03:08.026 --> 00:03:10.920
that you can use it comfortably when
you're programming your Raspberry Pi.

61
00:03:12.960 --> 00:03:15.410
So Python is a high level language.

62
00:03:15.410 --> 00:03:19.948
High level roughly means
that it's easy to use.

63
00:03:19.948 --> 00:03:24.440
The details are hidden from the program,
some details are hidden from the program.

64
00:03:24.440 --> 00:03:27.434
So there are a lot of details in Python
that are hidden from the program, or

65
00:03:27.434 --> 00:03:29.400
a programmer does not have to see.

66
00:03:29.400 --> 00:03:33.278
For instance, in Python you don't have
to explicitly declare data types.

67
00:03:33.278 --> 00:03:35.420
You don't have to say this variable.

68
00:03:35.420 --> 00:03:39.597
Say you had a variable x you don't have
to say integer, or car, or float, or

69
00:03:39.597 --> 00:03:40.528
whatever it is.

70
00:03:40.528 --> 00:03:41.700
You don't have to say that.

71
00:03:41.700 --> 00:03:45.935
Which by the way in C like with an Arduino
we had to say that we had to specify

72
00:03:45.935 --> 00:03:47.768
oh n to x.

73
00:03:47.768 --> 00:03:50.530
With Python you don't have to do
that it takes care of that itself.

74
00:03:50.530 --> 00:03:53.490
It basically looks at the interpreter

75
00:03:53.490 --> 00:03:58.870
on the fly can see how the variable;s
being used and then cast it accordingly.

76
00:03:58.870 --> 00:04:02.061
So, it says oh this is being used as
an integer I'll call this an integer

77
00:04:02.061 --> 00:04:03.370
and so forth.

78
00:04:03.370 --> 00:04:05.220
So, things like that, no pointers.

79
00:04:05.220 --> 00:04:06.760
Now, we haven't talked about pointers, but

80
00:04:06.760 --> 00:04:09.960
pointers are basically pointers
to addresses in memory.

81
00:04:09.960 --> 00:04:14.800
C, C++ support these but
those are hidden from you in Python.

82
00:04:14.800 --> 00:04:20.410
It's object orientated, Python is object
orientated, meaning it has classes.

83
00:04:20.410 --> 00:04:23.718
Now we haven't gone into classes and
really what they're about,

84
00:04:23.718 --> 00:04:25.618
we sort of touched on it with Arduino.

85
00:04:25.618 --> 00:04:29.810
There are classes, take my word for
it, it's a useful feature.

86
00:04:29.810 --> 00:04:31.368
And you don't get it in, say, C.

87
00:04:31.368 --> 00:04:34.120
In C++ you do get it, but
in C you don't get it.

88
00:04:34.120 --> 00:04:37.350
So, Python has a lot of these features
that make it really nice to use, and

89
00:04:37.350 --> 00:04:40.460
I use it a lot for
various programming assignments.

90
00:04:40.460 --> 00:04:42.790
Now, it has disadvantages.

91
00:04:42.790 --> 00:04:44.790
It is slow,
that's the biggest disadvantage.

92
00:04:44.790 --> 00:04:46.859
It is slow compared to C, C++.

93
00:04:46.859 --> 00:04:50.092
It's slow compared to
a compiled language in general,

94
00:04:50.092 --> 00:04:53.165
because the interpretation
process takes time.

95
00:04:53.165 --> 00:04:53.950
[COUGH] Excuse me.

96
00:04:53.950 --> 00:04:56.070
Takes a certain amount of time.

97
00:04:56.070 --> 00:05:00.120
So compilation is, once you've compiled
it, you don't have to convert it

98
00:05:00.120 --> 00:05:04.620
again into machine code, so
it's quicker to run C, C++.

99
00:05:04.620 --> 00:05:08.598
So also, one thing that's
related to that is that Python,

100
00:05:08.598 --> 00:05:11.794
it's very hard to meet
real-time deadlines.

101
00:05:11.794 --> 00:05:15.662
So, this comes up in more
sophisticated In IoT devices,

102
00:05:15.662 --> 00:05:20.190
we're not building devices
like that right now, but.

103
00:05:20.190 --> 00:05:21.146
Where you have to meet deadlines.

104
00:05:21.146 --> 00:05:25.252
So, if this has to be done, a certain task
needs to be completed within this time,

105
00:05:25.252 --> 00:05:26.978
precisely in a certain deadline,

106
00:05:26.978 --> 00:05:30.420
that's much easier to accomplish
in C than it is in Python.

107
00:05:30.420 --> 00:05:33.800
The reason why is because the Python
interpreter itself which is running and

108
00:05:33.800 --> 00:05:36.680
converting instructions while
you're executing the code.

109
00:05:36.680 --> 00:05:40.640
That interpreter takes time and
that time is a little hard to predict.

110
00:05:40.640 --> 00:05:43.510
So when you're trying to meet
deadlines you also have to consider

111
00:05:43.510 --> 00:05:45.310
the interpreters delay and
things like this.

112
00:05:45.310 --> 00:05:48.312
And you don't know exactly how the
interpreter is going to convert the code

113
00:05:48.312 --> 00:05:49.910
a priori.

114
00:05:49.910 --> 00:05:53.110
So, you don't know if it'll convert
in a fast way or a slow way.

115
00:05:53.110 --> 00:05:56.425
So, it gets difficult to meet
real time deadlines with Python.

116
00:05:56.425 --> 00:05:58.690
But that is not our goal here.

117
00:05:58.690 --> 00:06:00.190
We're just trying to use
it in a reasonable way.

118
00:06:02.310 --> 00:06:05.540
So with Python there
are roughly two versions.

119
00:06:05.540 --> 00:06:07.260
I say roughly, broadly two versions.

120
00:06:07.260 --> 00:06:08.366
Now, there are refinements
on these versions.

121
00:06:08.366 --> 00:06:11.110
There's Python 2 and Python 3.

122
00:06:11.110 --> 00:06:13.465
There's 2.2, 2.3, 2.4 and so on.

123
00:06:13.465 --> 00:06:16.720
They're basically I
think on 2.7 something.

124
00:06:16.720 --> 00:06:21.180
Then there's Python 3, 3.43 is
the last one I think I remember using,

125
00:06:21.180 --> 00:06:22.650
but they're somewhere up there.

126
00:06:22.650 --> 00:06:25.040
So there's Python 2, Python 3.

127
00:06:25.040 --> 00:06:28.240
Python 2 and 3, they're both supported.

128
00:06:28.240 --> 00:06:31.200
So even though Python 3 exists
they haven't gotten rid

129
00:06:31.200 --> 00:06:35.000
of Python 2 support because there's a lot
of old code out there, a lot of open

130
00:06:35.000 --> 00:06:39.900
source software that relies, it's written
in Python 2 and assumes Python 2.

131
00:06:39.900 --> 00:06:42.280
So they're both supported.

132
00:06:42.280 --> 00:06:44.620
And actually both of them will
be present on your Raspberry Pi.

133
00:06:45.690 --> 00:06:47.610
We're gonna use a Python 3.

134
00:06:47.610 --> 00:06:51.570
There are small differences in syntax,
specifically print statements.

135
00:06:51.570 --> 00:06:53.851
Okay, print statements
are done differently, or

136
00:06:53.851 --> 00:06:56.770
the syntax is different in
Python 2 than in Python 3.

137
00:06:56.770 --> 00:06:59.970
There are a few other little
things that'll confuse, so

138
00:06:59.970 --> 00:07:03.010
we're just going to stick with
Python 3 throughout this course.

139
00:07:03.010 --> 00:07:06.509
It's probably the best,
if you're programming new stuff in Python,

140
00:07:06.509 --> 00:07:08.431
you probably want to go with Python 3,

141
00:07:08.431 --> 00:07:11.544
because one day I suppose,
Python 2's gotta get phased out.

142
00:07:11.544 --> 00:07:12.305
Thank you.

143
00:07:12.305 --> 00:07:19.632
[MUSIC]