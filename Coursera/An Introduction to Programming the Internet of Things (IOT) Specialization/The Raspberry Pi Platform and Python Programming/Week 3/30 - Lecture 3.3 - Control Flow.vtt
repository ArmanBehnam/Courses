WEBVTT

1
00:00:00.000 --> 00:00:06.256
[MUSIC]

2
00:00:06.256 --> 00:00:13.065
[SOUND]
The control flow

3
00:00:13.065 --> 00:00:17.897
statements are statements that alter the
order in which statements are executed and

4
00:00:17.897 --> 00:00:19.881
which lines of code are executed.

5
00:00:19.881 --> 00:00:22.621
So we've seen these before in C.

6
00:00:22.621 --> 00:00:24.687
And these are common in every language.

7
00:00:24.687 --> 00:00:26.690
We're gonna look at the if statement.

8
00:00:26.690 --> 00:00:28.770
If then, if then else.

9
00:00:28.770 --> 00:00:30.350
For loops.

10
00:00:30.350 --> 00:00:30.960
And while loops.

11
00:00:30.960 --> 00:00:34.210
So let's start with the if statement.

12
00:00:34.210 --> 00:00:36.230
And this is pretty generic right here.

13
00:00:36.230 --> 00:00:37.870
The template you can see up above.

14
00:00:37.870 --> 00:00:42.270
If a condition is true,
colon, you do some code.

15
00:00:42.270 --> 00:00:45.050
That indented code block,
that's all the code that you want to do,

16
00:00:45.050 --> 00:00:48.730
you make sure it's indented right, so that
the if statement, so the interpreter can

17
00:00:48.730 --> 00:00:52.540
tell that it's supposed to be
executed when the condition is true.

18
00:00:52.540 --> 00:00:55.842
And then after the if statement is done,
you have non-indented code.

19
00:00:55.842 --> 00:01:01.750
And whatever non-indented code you have
that signifies the if statement is done.

20
00:01:01.750 --> 00:01:02.850
So, for instance, example.

21
00:01:02.850 --> 00:01:05.140
If temp is greater than
80 it'll print it is hot.

22
00:01:05.140 --> 00:01:06.880
There it'll print goodbye.

23
00:01:06.880 --> 00:01:09.839
So, even if the temp isn't greater
than 80, it'll still print goodbye.

24
00:01:09.839 --> 00:01:13.570
Because the print goodbye is indented
the same as the if which tells you,

25
00:01:13.570 --> 00:01:15.780
okay the if statement is finished.

26
00:01:15.780 --> 00:01:19.330
The print is not, the second print
goodbye is not part of your statement.

27
00:01:19.330 --> 00:01:22.190
It ends the if statement over before it..

28
00:01:22.190 --> 00:01:24.760
So the indentation, again, is key here.

29
00:01:24.760 --> 00:01:26.960
And, it is hot is printed if it's over 80.

30
00:01:26.960 --> 00:01:29.195
So this is an if statement,
you've seen this type of thing before.

31
00:01:29.195 --> 00:01:31.690
If-else statements.

32
00:01:31.690 --> 00:01:34.850
This is a very similar thing,
an if condition but you add an else.

33
00:01:34.850 --> 00:01:38.810
Now you have else: and you have another
statement or a set of statements.

34
00:01:38.810 --> 00:01:41.340
So this case I'm using a single
statement in each path.

35
00:01:41.340 --> 00:01:43.700
it temp is greater than 80 print hot.

36
00:01:43.700 --> 00:01:44.810
Else print not hot.

37
00:01:44.810 --> 00:01:46.260
Notice the print hot is indented,

38
00:01:46.260 --> 00:01:51.150
the print not hot is indented,
the print hot is indented under the if.

39
00:01:51.150 --> 00:01:53.950
The print not hot is
indented under the else.

40
00:01:53.950 --> 00:01:56.030
And then print goodbye is not indented so

41
00:01:56.030 --> 00:01:59.610
it means that the statement is done and
it happens regardless of the condition.

42
00:02:01.460 --> 00:02:02.840
For loops.

43
00:02:02.840 --> 00:02:05.890
So these are inter loops,
we've seen these before.

44
00:02:05.890 --> 00:02:11.500
The way, one difference about for loops,
inside into Python is that these for

45
00:02:11.500 --> 00:02:15.800
loops, and y loops too,
these loops iterate through sequences.

46
00:02:15.800 --> 00:02:16.370
Okay?

47
00:02:16.370 --> 00:02:22.990
Now, sequences typically, a string is a
sequence, a sequence of characters, right?

48
00:02:22.990 --> 00:02:26.490
A list is a sequence,
a sequence of items of any type.

49
00:02:26.490 --> 00:02:31.370
So a for loop or a while loop
is gonna iterate through, sorry,

50
00:02:31.370 --> 00:02:32.980
not a while loop, just a for loop.

51
00:02:32.980 --> 00:02:35.470
A for loop iterates through some sequence.

52
00:02:35.470 --> 00:02:37.512
So in this case, we're using a string.

53
00:02:37.512 --> 00:02:40.600
Name equals Ian, I-A-N, three letters.

54
00:02:40.600 --> 00:02:41.877
It's a three letter string.

55
00:02:41.877 --> 00:02:43.390
It's a three letter sequence.

56
00:02:43.390 --> 00:02:47.800
So for char in name :print(char).

57
00:02:47.800 --> 00:02:50.070
So, it's gonna iterate every pass through.

58
00:02:50.070 --> 00:02:51.560
It'll go through three passes, right?

59
00:02:51.560 --> 00:02:54.810
Because there are three
characters inside Ian.

60
00:02:54.810 --> 00:02:58.840
And each pass through,
it'll take that variable for char in name.

61
00:02:58.840 --> 00:03:03.990
It'll take that char, and
bind it to one character in the name.

62
00:03:03.990 --> 00:03:06.250
So the first pass-through char will be I.

63
00:03:06.250 --> 00:03:07.990
The next pass-through char will be a.

64
00:03:07.990 --> 00:03:10.680
The next pass-through it'll be n.

65
00:03:10.680 --> 00:03:12.710
And since it's printing char each time,

66
00:03:12.710 --> 00:03:15.680
what you get printed out is I and
then a and then n.

67
00:03:15.680 --> 00:03:17.250
So that's how a for loop works.

68
00:03:17.250 --> 00:03:20.590
A for loop actually iterate through some
sequence, which could be a string, or

69
00:03:20.590 --> 00:03:21.420
could be a list.

70
00:03:21.420 --> 00:03:23.420
There are a few other types of sequences,
but

71
00:03:23.420 --> 00:03:25.910
those are the main ones that we're
gonna focus on, strings and lists.

72
00:03:25.910 --> 00:03:30.290
In this case, a string, and
notice that at each pass through the loop,

73
00:03:30.290 --> 00:03:34.087
it is binding the variable,
car in this case, to an element,

74
00:03:34.087 --> 00:03:36.367
to one element inside the sequence.

75
00:03:40.500 --> 00:03:41.600
Another for example.

76
00:03:41.600 --> 00:03:43.480
So in this example, a similar thing.

77
00:03:43.480 --> 00:03:46.610
This time we've got a list of three names,
three strings.

78
00:03:46.610 --> 00:03:47.990
Joy, Mary, Pete.

79
00:03:47.990 --> 00:03:52.300
So name in Joy, Mary, Pete, so every time
you run through this, every pass through,

80
00:03:52.300 --> 00:03:53.960
name's gonna be one of these names.

81
00:03:53.960 --> 00:03:57.020
So the first time through, name's gonna
be Joy, next time through it'll be Mary,

82
00:03:57.020 --> 00:03:58.220
next time through it'll be Pete.

83
00:03:58.220 --> 00:04:02.610
So if we print the names, it just prints,
Jon, I'm sorry, I can't read.

84
00:04:02.610 --> 00:04:03.640
Jon, Mary, Pete.

85
00:04:03.640 --> 00:04:05.519
So it printed Jon, and
then Mary, and then Pete.

86
00:04:07.539 --> 00:04:11.804
And any sequence, so in this case it's
a list instead of a string as we had in

87
00:04:11.804 --> 00:04:15.210
the last slide, but strings and
lists are both sequences.

88
00:04:16.850 --> 00:04:18.820
And all code in the loop
needs to be indented.

89
00:04:18.820 --> 00:04:20.290
So in this case we just
have one statement,

90
00:04:20.290 --> 00:04:22.180
the print statement that we've indented.

91
00:04:22.180 --> 00:04:24.940
But you could have as many
lines of code as you want.

92
00:04:24.940 --> 00:04:27.650
So a while loop is different than a for
loop,

93
00:04:27.650 --> 00:04:28.909
it doesn't iterate through a sequence.

94
00:04:29.970 --> 00:04:32.750
Instead a while loop just
checks a condition at the top.

95
00:04:32.750 --> 00:04:35.350
It iterates until that
condition is not true.

96
00:04:35.350 --> 00:04:38.520
So if we look at our while loop here,
while i < 3.

97
00:04:38.520 --> 00:04:42.160
That means that it's going to execute
all the statements in this loop

98
00:04:42.160 --> 00:04:44.610
until i is no longer less than 3.

99
00:04:44.610 --> 00:04:46.980
It'll keep doing that over and
over and over again.

100
00:04:46.980 --> 00:04:49.290
If i is always less than 3,

101
00:04:49.290 --> 00:04:51.970
i never changes, then this would
be an infinite loop, right?

102
00:04:51.970 --> 00:04:54.620
But in our loop, if we look at our loop,
it contains two statements.

103
00:04:54.620 --> 00:04:57.470
First, print(i), next, i = i + 1.

104
00:04:57.470 --> 00:05:01.260
So it's always changing i,
which is the way you'd want a loop, right?

105
00:05:01.260 --> 00:05:04.398
You want whatever the condition
is to change periodically or

106
00:05:04.398 --> 00:05:06.437
else you'll never get out of the loop.

107
00:05:06.437 --> 00:05:10.615
So this loop, I noticed it before
the while loop, I'd say i = 0.

108
00:05:10.615 --> 00:05:15.750
So I set i = 0, and then, a while i less
than 3 it prints i and then increments i.

109
00:05:15.750 --> 00:05:16.630
And so

110
00:05:16.630 --> 00:05:20.150
what you're going to get printed out is
a zero, one two and then it will end.

111
00:05:20.150 --> 00:05:23.599
Because as soon as I hits three, then
when it gets to the top of the loop and

112
00:05:23.599 --> 00:05:26.258
checks is I less than three
it'll say no that's false,

113
00:05:26.258 --> 00:05:29.331
it'll jump out of the while loop and
that'll be the end of that.

114
00:05:29.331 --> 00:05:30.097
Thank you.

115
00:05:30.097 --> 00:05:37.465
[MUSIC]