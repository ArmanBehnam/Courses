WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.623 --> 00:00:15.385
Functions can be called with arguments or
parameters.

3
00:00:15.385 --> 00:00:17.808
Arguments are basically
input data to the function.

4
00:00:17.808 --> 00:00:20.746
So in my test function that I
did in the last set of slides,

5
00:00:20.746 --> 00:00:22.411
it didn't have any arguments.

6
00:00:22.411 --> 00:00:25.593
It just printed something,
it didn't need any input data.

7
00:00:25.593 --> 00:00:29.345
But often, functions require
input data to process on.

8
00:00:29.345 --> 00:00:31.425
So those input datas,
you call those arguments.

9
00:00:31.425 --> 00:00:35.678
A function can take arguments, which are
values that are bound to variables inside

10
00:00:35.678 --> 00:00:37.330
the program at execution time.

11
00:00:38.480 --> 00:00:43.800
So any arguments that you want to
pass as information to the function,

12
00:00:43.800 --> 00:00:47.910
you list them inside the parenthesis
when you make the function call.

13
00:00:49.020 --> 00:00:52.357
And also inside parentheses when you're
doing definition of the function, so

14
00:00:52.357 --> 00:00:53.313
we'll see that here.

15
00:00:53.313 --> 00:00:57.308
So say, I wanna define something
that computes the area of a circle.

16
00:00:57.308 --> 00:00:59.152
So I say, def circle_area.

17
00:00:59.152 --> 00:01:02.689
Now if you wanna compute the area
of a circle that's pi r squared,

18
00:01:02.689 --> 00:01:03.731
where r is radius.

19
00:01:03.731 --> 00:01:04.923
So I have to take an argument,

20
00:01:04.923 --> 00:01:08.040
you can't figure out the area of
a circle without knowing the radius.

21
00:01:08.040 --> 00:01:10.329
So I'm gonna make radius an argument,
I call it rad here.

22
00:01:11.360 --> 00:01:13.420
So I put rad in parentheses to say,

23
00:01:13.420 --> 00:01:17.475
look this function has to take one
argument, which I will call rad.

24
00:01:17.475 --> 00:01:20.313
Then inside it, I just say print 3.14,

25
00:01:20.313 --> 00:01:23.394
which is approximately
pi times rad times rad.

26
00:01:23.394 --> 00:01:27.179
My simple version,
that's pi rad squared r squared.

27
00:01:27.179 --> 00:01:30.014
And so when I run that,
when I want to execute that.

28
00:01:30.014 --> 00:01:33.542
I call the function circle_area,
I pass it 2 as an argument.

29
00:01:33.542 --> 00:01:34.797
That's the radius I want.

30
00:01:34.797 --> 00:01:39.765
I put 2 inside the parenthesis and then it
computes it and prints out the results.

31
00:01:39.765 --> 00:01:42.132
So that's how you pass
arguments to functions.

32
00:01:42.132 --> 00:01:46.010
So you have to define it in
the definition, you name the argument.

33
00:01:46.010 --> 00:01:49.938
And then at run time that two,
when you call circle area capacity two,

34
00:01:49.938 --> 00:01:51.613
that two will be bound to rad.

35
00:01:51.613 --> 00:01:53.864
That variable red and so two will be rad.

36
00:01:53.864 --> 00:01:58.122
So it will print out 3.14 times 2 times 2,

37
00:01:58.122 --> 00:02:01.746
it will substitute the 2 in for the rad.

38
00:02:01.746 --> 00:02:05.465
Now functions in addition
to taking input values,

39
00:02:05.465 --> 00:02:08.154
they can also return output values.

40
00:02:08.154 --> 00:02:09.812
Those are called return values.

41
00:02:09.812 --> 00:02:13.733
So function can return values if you
use a return instruction at the end of

42
00:02:13.733 --> 00:02:14.575
the function.

43
00:02:14.575 --> 00:02:17.951
And notice on my last program,
I didn't use return I said, print,

44
00:02:17.951 --> 00:02:19.741
which just prints it to the screen.

45
00:02:19.741 --> 00:02:22.713
That's different than returning a value.

46
00:02:22.713 --> 00:02:25.309
Returning a value,
when you return a value,

47
00:02:25.309 --> 00:02:29.819
the whole function call is substituted for
whatever the return value is inside

48
00:02:29.819 --> 00:02:32.638
whatever expression you
use the function call.

49
00:02:32.638 --> 00:02:36.048
So if you use the function call
inside a bigger expression.

50
00:02:36.048 --> 00:02:41.535
So if I say, x plus 5 plus circle_area and
I call it with a 2,

51
00:02:41.535 --> 00:02:46.298
then it'll compute with
the circle areas with a two.

52
00:02:46.298 --> 00:02:48.835
If I return that,
it'll substitute that in.

53
00:02:48.835 --> 00:02:51.589
So, it'll do 5 plus whatever
the return value is.

54
00:02:51.589 --> 00:02:53.141
So, I'll give you an example.

55
00:02:53.141 --> 00:02:55.881
So I got my circle_area, I define it.

56
00:02:55.881 --> 00:02:57.135
And this time, I say, return.

57
00:02:57.135 --> 00:03:00.316
Return 3.14 * rad * rad.

58
00:03:00.316 --> 00:03:01.593
Now I say circle_area (2).

59
00:03:01.593 --> 00:03:04.635
If I just call circle_area (2),
it returns 12.56.

60
00:03:04.635 --> 00:03:08.382
But if I say, a 3 plus circle_area (2),
it return 15.56,

61
00:03:08.382 --> 00:03:11.935
because it just takes a whatever
circle_area (2) returns and

62
00:03:11.935 --> 00:03:15.182
it substitute the grade in
there into a bigger expression.

63
00:03:15.182 --> 00:03:16.613
3 plus circle_area (2).

64
00:03:16.613 --> 00:03:20.337
So 3 plus 12.56 and the return is 15.56.

65
00:03:20.337 --> 00:03:23.936
So that's a return value and
that's useful a lot of times.

66
00:03:23.936 --> 00:03:24.539
Thank you.

67
00:03:24.539 --> 00:03:33.459
[MUSIC]