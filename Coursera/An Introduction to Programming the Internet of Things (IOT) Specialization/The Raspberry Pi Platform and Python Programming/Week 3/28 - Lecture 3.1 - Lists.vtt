WEBVTT

1
00:00:00.000 --> 00:00:05.501
[MUSIC]

2
00:00:05.501 --> 00:00:11.715
[SOUND]
Lists

3
00:00:11.715 --> 00:00:14.710
are a really important
data structure in Python.

4
00:00:14.710 --> 00:00:18.710
Lists are basically what they sound like,
they're groups of objects put together.

5
00:00:18.710 --> 00:00:22.525
They're ordered lists, so
a list is a comma-separated sequence,

6
00:00:22.525 --> 00:00:26.460
an ordered sequence of items
enclosed in square brackets.

7
00:00:26.460 --> 00:00:30.391
Now these items can be anything,
numbers, strings, other lists.

8
00:00:30.391 --> 00:00:35.390
Whatever data type you want, you can put
those into a list, so for instance here,

9
00:00:35.390 --> 00:00:40.113
we've got pets = [ 'ant',
'bat', 'cod', and 'dog'], right?

10
00:00:40.113 --> 00:00:43.970
So we've got four strings, and
we put them together in a list.

11
00:00:43.970 --> 00:00:46.210
So now, this list has four elements in it,
four different strings.

12
00:00:47.820 --> 00:00:52.010
Here's another list, now this one has one,
two, three, four elements in this list.

13
00:00:52.010 --> 00:00:53.320
0 is the first element,

14
00:00:53.320 --> 00:00:57.870
1 is the second element,
the next element is a string two, T-W-O.

15
00:00:57.870 --> 00:00:59.810
Notice that you're allowed to mix and
match, right?

16
00:00:59.810 --> 00:01:02.698
The first two elements are integers,
the next one's a string, that's fine.

17
00:01:02.698 --> 00:01:07.090
The fourth element is
actually another list.

18
00:01:07.090 --> 00:01:10.275
You look at it, it's another list
that itself has two elements in it,

19
00:01:10.275 --> 00:01:14.010
4 and the string five, so that's legal.

20
00:01:14.010 --> 00:01:14.830
That's perfectly legal.

21
00:01:14.830 --> 00:01:16.540
You can have a list with four elements and

22
00:01:16.540 --> 00:01:19.170
the last element in that list
is another list, that's okay.

23
00:01:20.760 --> 00:01:23.380
Here's another list,
some lists, a bunch of numbers.

24
00:01:23.380 --> 00:01:29.478
0 through 8, and so on, but that's
the idea that you just put items together,

25
00:01:29.478 --> 00:01:32.004
and it's an ordered list right?

26
00:01:32.004 --> 00:01:35.705
So there's a first element,
second element, and third element, and so

27
00:01:35.705 --> 00:01:37.180
now we have this sequence.

28
00:01:37.180 --> 00:01:41.302
It's a list of the basic type of sequence
inside Python, and they're used for

29
00:01:41.302 --> 00:01:46.807
a lot of things, So,
here are some operators and

30
00:01:46.807 --> 00:01:50.632
functions that operate on lists,
some of the common ones.

31
00:01:50.632 --> 00:01:52.350
This is not exhaustive, but
these are the common ones.

32
00:01:52.350 --> 00:01:56.304
Now, a lot of these are very similar
to the operators that we saw for

33
00:01:56.304 --> 00:01:59.090
strings, so for instance, x in lst.

34
00:01:59.090 --> 00:02:03.390
What that does is, it takes a list,
it takes an item, x, some piece of data,

35
00:02:03.390 --> 00:02:05.170
x, and checks to see if it's in the list.

36
00:02:05.170 --> 00:02:07.960
If it's in the list,
it returns true, else returns false.

37
00:02:07.960 --> 00:02:10.848
X not in lst,
it's pretty clear what that does.

38
00:02:10.848 --> 00:02:14.360
Lst + lstB, so list and
list b are two lists.

39
00:02:14.360 --> 00:02:17.270
If you add them together,
you concatenate the list, so

40
00:02:17.270 --> 00:02:20.190
you're taking all the elements of
the first list and the second list and

41
00:02:20.190 --> 00:02:21.710
putting them together into one big list.

42
00:02:21.710 --> 00:02:24.270
And they're in order, so
the first list elements are first and

43
00:02:24.270 --> 00:02:25.550
the second list elements come next.

44
00:02:27.060 --> 00:02:30.700
Lst*n, or n*lstn, n,
where it ends in integer.

45
00:02:30.700 --> 00:02:33.780
List is a list,
that basically is similar to a string.

46
00:02:33.780 --> 00:02:38.240
It takes the contents of the list and
repeats it over and over multiple times.

47
00:02:38.240 --> 00:02:42.790
As if n was equal to three, I would take
the contents of the list and triple them.

48
00:02:42.790 --> 00:02:45.310
Have the list contents,
then the same list contents again,

49
00:02:45.310 --> 00:02:47.030
then again all in one big list.

50
00:02:48.470 --> 00:02:52.410
Then list I,
that's again the index operator.

51
00:02:52.410 --> 00:02:56.990
You can get the IF element of a list
by passing whatever at integer,

52
00:02:56.990 --> 00:02:59.289
I, starting at zero,
zero's the first element to list.

53
00:03:00.430 --> 00:03:02.550
Length list, L-E-N, len.

54
00:03:02.550 --> 00:03:06.440
Also, there's a few counter functions,
min, max and sum, so

55
00:03:06.440 --> 00:03:09.270
these work on lists of
numerical data types.

56
00:03:09.270 --> 00:03:11.010
They don't work, if you don't list a list,

57
00:03:11.010 --> 00:03:14.370
that wouldn't make sense, but
you can do the minimum number in a list,

58
00:03:14.370 --> 00:03:17.810
the maximum number in a list, and
the sum of all the numbers in a list.

59
00:03:17.810 --> 00:03:21.054
If these numbers are all numerical.

60
00:03:21.054 --> 00:03:24.579
Or you've written a special function,
which we probably won't talk about, but

61
00:03:24.579 --> 00:03:27.656
generally just assume they're numbers,
then those functions work.

62
00:03:27.656 --> 00:03:28.169
Thank you.

63
00:03:28.169 --> 00:03:34.223
[MUSIC]