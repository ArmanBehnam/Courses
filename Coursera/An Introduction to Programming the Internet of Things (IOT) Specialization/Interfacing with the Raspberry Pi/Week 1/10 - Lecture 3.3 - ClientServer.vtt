WEBVTT

1
00:00:00.217 --> 00:00:10.217
[MUSIC]

2
00:00:11.464 --> 00:00:13.509
I'll talk a little bit
about client-server model.

3
00:00:13.509 --> 00:00:17.149
We need to have this information so
we can start programming,

4
00:00:17.149 --> 00:00:21.422
connecting to the Internet through
programs rather than just as users.

5
00:00:21.422 --> 00:00:25.369
So client-server model describes
most of the interactions, or

6
00:00:25.369 --> 00:00:30.640
many interactions over the network
on the Internet, between machines.

7
00:00:30.640 --> 00:00:33.598
So this is not completely all inclusive.

8
00:00:33.598 --> 00:00:37.944
Sometimes you're talking peer-to-peer but
client-server's a very common model for

9
00:00:37.944 --> 00:00:39.554
communication on the Internet.

10
00:00:39.554 --> 00:00:42.963
So client-server model,
you've got these two processes running,

11
00:00:42.963 --> 00:00:46.300
a client on one machine,
a server on another machine.

12
00:00:46.300 --> 00:00:50.920
The server is guarding some resource,
whatever the resource might be.

13
00:00:50.920 --> 00:00:55.750
So say it's a print server, then
the client might want to print something,

14
00:00:55.750 --> 00:00:58.150
it sends that thing to the server,
says please print.

15
00:00:58.150 --> 00:01:00.330
It sends a request to the server,
please print.

16
00:01:00.330 --> 00:01:03.935
And the resource would be the printer
itself and the server prints it or

17
00:01:03.935 --> 00:01:07.006
doesn't, it sends a response,
says look, I printed it.

18
00:01:07.006 --> 00:01:10.157
Or a web server, the client sends
a request to the web server,

19
00:01:10.157 --> 00:01:13.913
says server give me the contents of this
Web page, the resource is going to be

20
00:01:13.913 --> 00:01:17.126
the contents of the Web pages and
the server gets the resource,

21
00:01:17.126 --> 00:01:19.929
sends it back in the response
to the client, and so on.

22
00:01:19.929 --> 00:01:24.337
So this client-server model is a very,
is a common protocol,

23
00:01:24.337 --> 00:01:28.993
common model that's used on the Internet,
because the server manages

24
00:01:28.993 --> 00:01:33.420
the resource whatever it is and
the client that makes request.

25
00:01:33.420 --> 00:01:35.900
So the server accepts request, waits for

26
00:01:35.900 --> 00:01:39.170
request, I had to sit there listening,
waiting for request and

27
00:01:39.170 --> 00:01:42.710
then it sends the responses that have
the results of whatever the request is.

28
00:01:44.430 --> 00:01:46.720
Now, [COUGH] Internet connections,
the client and

29
00:01:46.720 --> 00:01:50.110
the server communicate over
a connection on the Internet.

30
00:01:51.830 --> 00:01:56.680
And the socket, this term socket,
a socket is the endpoint of a connection.

31
00:01:57.950 --> 00:02:00.472
So if there's a connection
between a client and a server,

32
00:02:00.472 --> 00:02:03.969
there's going to be two sockets, right,
one for the client on its end, and one for

33
00:02:03.969 --> 00:02:04.966
the server on its end.

34
00:02:04.966 --> 00:02:07.004
So they'll be listening to sockets.

35
00:02:07.004 --> 00:02:09.514
And this term socket,
we're going to use this, because,

36
00:02:09.514 --> 00:02:12.706
once we start writing network code,
we're going to be creating sockets,

37
00:02:12.706 --> 00:02:15.360
opening sockets,
closing sockets, and so on.

38
00:02:15.360 --> 00:02:18.020
So a socket is really
a programming concept for

39
00:02:18.020 --> 00:02:20.080
how you're going to
connect on the network.

40
00:02:21.770 --> 00:02:24.660
Now, we've already defined a port, again,

41
00:02:24.660 --> 00:02:26.893
it's a 16-bit integer that
identifies a process.

42
00:02:26.893 --> 00:02:30.010
The reason why we want to
bring it up again is because

43
00:02:30.010 --> 00:02:34.170
a socket is really associated
with an IP address,

44
00:02:34.170 --> 00:02:37.252
the host of the socket that the processor
is running on and the port.

45
00:02:37.252 --> 00:02:40.780
So if you take an IP address and
a port together that's,

46
00:02:40.780 --> 00:02:43.980
a socket is always associated with
an IP address and a port, okay?

47
00:02:45.060 --> 00:02:47.090
And with that has active
communication going over it.

48
00:02:48.840 --> 00:02:54.730
So ports and servers, so in this picture
we got two machines, on the left,

49
00:02:54.730 --> 00:02:57.480
you got the client machine, and
on the right you got the server machine.

50
00:02:57.480 --> 00:03:01.100
Now actually notice that on
the left I've got two clients,

51
00:03:01.100 --> 00:03:02.730
two client processes
running on here at once.

52
00:03:02.730 --> 00:03:06.120
I've got a web client,
I also got an SSH, secure shell client.

53
00:03:06.120 --> 00:03:07.820
On the right I've got my server machines.

54
00:03:07.820 --> 00:03:11.390
It's got two servers,
a web server and an SSH server.

55
00:03:11.390 --> 00:03:13.670
And there are two connections going on,
right,

56
00:03:13.670 --> 00:03:15.670
web client is talking to web server.

57
00:03:15.670 --> 00:03:17.540
Secure shell client is talking
to secure shell server.

58
00:03:19.190 --> 00:03:21.716
Now, notice that they're
talking on different ports.

59
00:03:21.716 --> 00:03:25.652
So you can think of the, well,
okay, so web clients, they use,

60
00:03:25.652 --> 00:03:30.388
I don't know if I got the port number
right, web clients use port number 80.

61
00:03:30.388 --> 00:03:33.781
So, you can see that,
notice that if you look at the request,

62
00:03:33.781 --> 00:03:38.354
because it's a request, 192.1.1.1,
which is the IP address, colon 80,

63
00:03:38.354 --> 00:03:40.601
80 is the port number for web traffic.

64
00:03:40.601 --> 00:03:44.100
Then secure shell client,
it says same IP address but colon 22.

65
00:03:44.100 --> 00:03:46.884
I might have that wrong it might be 23,
I really don't remember but

66
00:03:46.884 --> 00:03:48.150
it doesn't matter too much.

67
00:03:48.150 --> 00:03:51.990
You can Google that, but the number
after the colon is support number.

68
00:03:51.990 --> 00:03:55.900
So notice that there are several ports
being used on two different machines at

69
00:03:55.900 --> 00:03:56.480
the same time.

70
00:03:57.730 --> 00:04:00.960
So multiple clients and servers can
exist on the same machine, right?

71
00:04:00.960 --> 00:04:03.460
You can have multiple clients,
web client and secure shell client,

72
00:04:03.460 --> 00:04:07.710
you could have any number of clients on
there as long as they're each associated

73
00:04:07.710 --> 00:04:12.330
with different points on the machine,
you could have as many as you want.

74
00:04:12.330 --> 00:04:14.890
Server processes listen
to their assigned ports.

75
00:04:14.890 --> 00:04:19.332
So, the web server is listening to its
port, the SSH server is listening to its

76
00:04:19.332 --> 00:04:23.050
port and they only hear traffic that
comes in on their particular ports.

77
00:04:24.760 --> 00:04:28.980
So, the client processes,
a client process sends a request

78
00:04:28.980 --> 00:04:33.740
to the server IP address
on the particular port

79
00:04:33.740 --> 00:04:37.790
that's associated with that operation,
with that application.

80
00:04:37.790 --> 00:04:40.862
So, if it's a web client,
it's going to send it to port 80,

81
00:04:40.862 --> 00:04:43.472
because port 80 is
associated with web traffic.

82
00:04:43.472 --> 00:04:44.137
Thank you.

83
00:04:44.137 --> 00:04:52.799
[MUSIC]