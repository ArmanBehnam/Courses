WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.767 --> 00:00:15.084
I'll start talking about internet
protocols, a little bit more of the detail

3
00:00:15.084 --> 00:00:17.910
about internet protocols that we
haven't been looking at so far.

4
00:00:19.380 --> 00:00:25.100
So Internet Protocols, I need to describe
to you what an Internet Protocol is and

5
00:00:25.100 --> 00:00:29.590
a little bit about the different types
of protocols that are used in the unit

6
00:00:29.590 --> 00:00:31.650
with the structure of the messages.

7
00:00:31.650 --> 00:00:32.900
We've been glossing over this.

8
00:00:32.900 --> 00:00:35.790
We haven't covered this information yet
because we've been talking

9
00:00:35.790 --> 00:00:38.670
about using the Raspberry Pi,
connecting it to the Internet.

10
00:00:38.670 --> 00:00:43.480
But from a user's perspective,
as if it were a desktop or

11
00:00:43.480 --> 00:00:45.920
laptop or something like that,
and I'm sitting at the machine.

12
00:00:45.920 --> 00:00:47.880
I use a browser or
something like that, right?

13
00:00:47.880 --> 00:00:50.970
Connect to it and type commands,
but from a user perspective.

14
00:00:50.970 --> 00:00:54.050
But once we start writing code,
and the code has to actually

15
00:00:54.050 --> 00:00:57.990
connect to the Internet, then we need to
understand a little bit more in detail

16
00:00:57.990 --> 00:01:00.980
about how these connections are being made
and how these messages are being made.

17
00:01:00.980 --> 00:01:04.400
So, that's why we're going to start
talking about some of the features of

18
00:01:04.400 --> 00:01:08.320
internet protocols, of the protocols that
define the internet, and how they work.

19
00:01:09.800 --> 00:01:13.310
Okay so, key feature, unique naming.

20
00:01:13.310 --> 00:01:16.829
So, every machine that's on
the internet has to have a unique name.

21
00:01:18.260 --> 00:01:21.220
And, these protocols have
to define the name, right.

22
00:01:21.220 --> 00:01:26.010
They have to specify a name for every,
everything on the on the internet.

23
00:01:26.010 --> 00:01:28.090
So every node gets a unique host address,

24
00:01:28.090 --> 00:01:31.920
every host gets a host address that
we call this an IP address, okay.

25
00:01:31.920 --> 00:01:37.080
But every node on the internet
has to have its unique address.

26
00:01:37.080 --> 00:01:41.440
Now, this is Module O on NAT mappings,
but we'll talk about that later.

27
00:01:41.440 --> 00:01:43.800
So generally,
everything gets a unique address.

28
00:01:45.820 --> 00:01:47.020
Also, message, so

29
00:01:47.020 --> 00:01:51.875
these messages that are sent on
the Internet, they have a structure.

30
00:01:51.875 --> 00:01:54.765
And these structures, the code that
you write, is going to have to create

31
00:01:54.765 --> 00:01:58.245
these messages so you have to know
a little bit about the structure.

32
00:01:58.245 --> 00:02:01.665
The internet protocols define
the standard structure of these messages.

33
00:02:01.665 --> 00:02:05.175
Now if you look at any one of these
messages that goes across the internet,

34
00:02:05.175 --> 00:02:08.305
you can generically, no matter what
protocol you're talking about,

35
00:02:08.305 --> 00:02:11.050
you can generically cut it up
into a header or a payload.

36
00:02:12.120 --> 00:02:15.550
The header has protocol
related information, okay?

37
00:02:15.550 --> 00:02:18.430
Where the payload is the actual
data that you want to send.

38
00:02:18.430 --> 00:02:19.370
So you want to send data,

39
00:02:19.370 --> 00:02:22.250
say I want to send the words
hello world to somebody, right?

40
00:02:22.250 --> 00:02:25.540
You just put hello world on the wires,
right?

41
00:02:25.540 --> 00:02:27.860
You put that on the wires,
that's the payload.

42
00:02:27.860 --> 00:02:31.240
But before that you have to put some
header information, some information that

43
00:02:31.240 --> 00:02:34.650
the protocol needs to get that
message to where it's going to go.

44
00:02:34.650 --> 00:02:37.840
For instance you might put the destination
address in the header, right.

45
00:02:37.840 --> 00:02:40.530
You might put the mind type or what type,

46
00:02:40.530 --> 00:02:44.110
yeah this is text or this is doc file or
something like that.

47
00:02:44.110 --> 00:02:47.720
You might put information about the text,
the size of the message.

48
00:02:47.720 --> 00:02:50.700
There's a lot of data that
you might put in the header,

49
00:02:50.700 --> 00:02:53.720
before you add onto the message.

50
00:02:53.720 --> 00:02:56.130
So the payload is the actual
data you want to send, but

51
00:02:56.130 --> 00:02:59.870
the header is information that's
required by the protocol,

52
00:02:59.870 --> 00:03:06.340
in order to get the message where it's
going to go, and get it there efficiently.

53
00:03:06.340 --> 00:03:11.564
Internet Protocol Family,
is defined really by a set of protocols.

54
00:03:11.564 --> 00:03:13.990
Really, pretty much, three protocols.

55
00:03:13.990 --> 00:03:16.990
So, first there's the IP protocol,
internet protocol.

56
00:03:16.990 --> 00:03:20.610
That, it does a lot of things, and we're
not going into great detail about these

57
00:03:20.610 --> 00:03:23.380
protocols, but you need to know
something about these protocols.

58
00:03:23.380 --> 00:03:26.030
IP protocol defines the naming scheme,
okay?

59
00:03:26.030 --> 00:03:29.200
So the IP protocol defines the IP address,
right?

60
00:03:29.200 --> 00:03:31.090
That's where the IP address, every host,

61
00:03:31.090 --> 00:03:34.670
every machine that's on a network
has its own IP address.

62
00:03:34.670 --> 00:03:37.860
And so IP protocol deals with
host-to-host connections,

63
00:03:37.860 --> 00:03:41.950
so a machine to another machine,
two hosts that are on the network.

64
00:03:41.950 --> 00:03:46.980
The communication between those two
machines is dealt with by the IP protocol.

65
00:03:46.980 --> 00:03:50.510
And all the information that you need
to connect between two different

66
00:03:50.510 --> 00:03:53.760
machines is going to be contained in
the IP protocol part of the header.

67
00:03:54.830 --> 00:03:56.580
And in its unreliable communications.

68
00:03:56.580 --> 00:03:58.490
So IP in general is unreliable.

69
00:03:58.490 --> 00:04:02.800
What that means is when you send a message
to another from one host to another

70
00:04:02.800 --> 00:04:04.800
you are not guaranteed
that message will arrive.

71
00:04:05.980 --> 00:04:09.600
Not if you just use IP protocol alone
if you'll just use that alone you

72
00:04:09.600 --> 00:04:11.180
would not be guaranteed
that it would arrive.

73
00:04:11.180 --> 00:04:12.935
It might fail for many number of reasons.

74
00:04:12.935 --> 00:04:17.190
Maybe it reaches a host, so when these
messages travel, they travel from one

75
00:04:17.190 --> 00:04:19.990
machine to the next, to the next,
until they get to their destination.

76
00:04:19.990 --> 00:04:22.420
Maybe it reaches a machine and
that machine drops it for some reason,

77
00:04:22.420 --> 00:04:23.800
that machine has a bug.

78
00:04:23.800 --> 00:04:26.000
Maybe the machine crashes and
it disappears, right?

79
00:04:26.000 --> 00:04:27.390
Things like this can happen.

80
00:04:27.390 --> 00:04:31.110
So for one reason or another the message
might not get to the destination.

81
00:04:31.110 --> 00:04:35.140
And that's okay, with IP, if you look
at internet protocol, IP protocol.

82
00:04:35.140 --> 00:04:38.870
It that's that happens
every once in a while.

83
00:04:38.870 --> 00:04:41.240
So IP alone is an unreliable protocol.

84
00:04:42.420 --> 00:04:47.720
Now on top of IP, in addition to IP
you're going to use either UDP or TCP.

85
00:04:48.760 --> 00:04:51.380
We'll end up using TCP but
let's define these two.

86
00:04:51.380 --> 00:04:54.910
UDP stands for
unreliable datagram protocol.

87
00:04:54.910 --> 00:04:57.710
It is process to process communications.

88
00:04:57.710 --> 00:05:01.620
So what that is,
if you remember the IP, listen up here,

89
00:05:01.620 --> 00:05:05.150
IP is host to host, machine to machine.

90
00:05:05.150 --> 00:05:09.110
But remember every particular machine
can have many processes running on it.

91
00:05:09.110 --> 00:05:12.410
Maybe I want a machine I'm
running a web browser,

92
00:05:12.410 --> 00:05:14.500
I also running World of Warcraft, okay?

93
00:05:14.500 --> 00:05:17.440
So those are two processes both
communicating on the network.

94
00:05:17.440 --> 00:05:20.600
So my World of Warcraft to
World of Warcraft communication

95
00:05:20.600 --> 00:05:24.450
is different than my web browser to
web server communication, right.

96
00:05:24.450 --> 00:05:28.050
So, UDP is Datagram Protocol.

97
00:05:28.050 --> 00:05:30.650
It is working at the process-to-process.

98
00:05:30.650 --> 00:05:33.130
So, that's going to allow

99
00:05:33.130 --> 00:05:36.890
the web browser to communicate with web
server on the two different machines.

100
00:05:36.890 --> 00:05:40.060
And that's going to allow World
of Warcraft client to communicate

101
00:05:40.060 --> 00:05:42.390
World of Warcraft server
on two different machines.

102
00:05:42.390 --> 00:05:44.662
So IP is handling host-to-host,

103
00:05:44.662 --> 00:05:47.660
machine-to-machine, but
a UDP is refining that and

104
00:05:47.660 --> 00:05:52.050
allowing to communicate process-to-process
on those two different machines.

105
00:05:52.050 --> 00:05:56.150
So in order to do that, these processes
have to have names associated with them.

106
00:05:56.150 --> 00:05:59.270
These network processes,
they have to have unique names as well.

107
00:05:59.270 --> 00:06:01.260
These are called ports, and
we'll talk about those later.

108
00:06:02.500 --> 00:06:06.660
So a process naming at this level,
the UDP level There's as a naming for

109
00:06:06.660 --> 00:06:10.960
each process, each process on the network.

110
00:06:10.960 --> 00:06:12.430
It's also unreliable.

111
00:06:12.430 --> 00:06:15.520
So just IP is unreliable,
UDP is also unreliable.

112
00:06:15.520 --> 00:06:18.740
You send a message from one process to
another, and it might not get there.

113
00:06:18.740 --> 00:06:19.970
And that's okay with UDP.

114
00:06:21.660 --> 00:06:25.940
Now the other protocol that you
can use instead of UDP is TCP,

115
00:06:25.940 --> 00:06:28.490
Transmission Control Protocol.

116
00:06:28.490 --> 00:06:32.360
TCP is also process to process
communication, just like UDP.

117
00:06:32.360 --> 00:06:38.200
And it also uses the same type of process
naming, but it's reliable communication.

118
00:06:38.200 --> 00:06:41.100
So what that means is
if it sends a message,

119
00:06:41.100 --> 00:06:45.150
you send a message from one process
to another on a different machine,

120
00:06:45.150 --> 00:06:48.060
that message is guaranteed to
arrive at the destination.

121
00:06:48.060 --> 00:06:49.350
Now how does it guarantee this?

122
00:06:49.350 --> 00:06:52.860
Basically by retry, so it'll send
a message and it'll wait for a response.

123
00:06:52.860 --> 00:06:55.540
If it doesn't get the response,
it assumes the message didn't arrive so

124
00:06:55.540 --> 00:06:57.840
it'll try again and try again and so on.

125
00:06:57.840 --> 00:07:00.830
So that's built in to the TCP Protocol.

126
00:07:00.830 --> 00:07:03.920
So TCP,
it's a more complicated protocol than UDP.

127
00:07:03.920 --> 00:07:09.020
UDP is very cheap, because it doesn't have
to handle retrys and things like this.

128
00:07:09.020 --> 00:07:13.530
TCP Protocol, it has to deal with,
it has to handle that, wait for

129
00:07:13.530 --> 00:07:14.890
the reply and all this.

130
00:07:14.890 --> 00:07:17.820
It's a more complicated protocol but
it gives you better guarantees,

131
00:07:17.820 --> 00:07:19.410
it's reliable communication.

132
00:07:19.410 --> 00:07:21.300
So TCP is generally what we'll be using.

133
00:07:21.300 --> 00:07:25.060
So generally we'll be using
TCP together with IP.

134
00:07:26.515 --> 00:07:31.925
You can use UDP with IP or TCP with IP and
either way that's Internet, okay?

135
00:07:31.925 --> 00:07:35.965
But you notice that you have to
use IP with either TCP or UDP.

136
00:07:35.965 --> 00:07:39.965
IP has to be used because the hosts
have to have their own unique naming,

137
00:07:39.965 --> 00:07:41.255
IP addresses.

138
00:07:41.255 --> 00:07:43.955
And then TCP or UDP had to be used so

139
00:07:43.955 --> 00:07:47.695
that the processes ach get their
own different name as well.

140
00:07:47.695 --> 00:07:51.630
So TCP and IDP is really
the pair that we'll be using.

141
00:07:51.630 --> 00:07:56.740
You can also use a UDP and IP but
that's not what we'll probably work with.

142
00:07:56.740 --> 00:08:00.460
SO TCP versus UDP just to summarize
the difference between the two,

143
00:08:00.460 --> 00:08:02.300
they're called transport layer protocols.

144
00:08:04.080 --> 00:08:09.380
They deal with process to process
communication is basically what it means.

145
00:08:09.380 --> 00:08:12.170
TCP is connection-oriented,
so it's reliable.

146
00:08:12.170 --> 00:08:14.950
When you make a connection between two
different processes that connection

147
00:08:14.950 --> 00:08:16.800
exists over a period of time.

148
00:08:16.800 --> 00:08:17.800
It's not just a one-off.

149
00:08:17.800 --> 00:08:19.840
It assumes that it exists for a while.

150
00:08:19.840 --> 00:08:21.520
Packet sequencing is supported.

151
00:08:21.520 --> 00:08:24.330
So it assumes you're sending many
messages from one process to another.

152
00:08:24.330 --> 00:08:26.820
So it sequences the package,
basically numbers them.

153
00:08:26.820 --> 00:08:30.851
So at the receiving end, you know
what order the packets were sent in.

154
00:08:30.851 --> 00:08:33.560
Okay, and that's important for
a lot of applications,

155
00:08:33.560 --> 00:08:36.800
the order in which the packets
are received may matter.

156
00:08:36.800 --> 00:08:40.360
Also, TCP handles flow control,
error detection, other things like this.

157
00:08:40.360 --> 00:08:42.780
Error detection correction so
if there's a bit that's flipped.

158
00:08:42.780 --> 00:08:45.320
Maybe there's some kind of
a electromagnetic noise that messes up

159
00:08:45.320 --> 00:08:50.000
a bit, that's checked at the receiving end
using a checksum or something like that.

160
00:08:50.000 --> 00:08:55.190
And flow control so it can reroute a date,
reroute a package to avoid heavy flow,

161
00:08:55.190 --> 00:08:56.800
heavy congestion on the network,
things like this.

162
00:08:58.490 --> 00:09:00.580
A UDP is connectionless.

163
00:09:00.580 --> 00:09:03.720
UDP, it assumes it's a one off,
this one package that you're sending,

164
00:09:03.720 --> 00:09:07.590
it's just one and you don't intend to send
any other or not anytime soon anyway.

165
00:09:07.590 --> 00:09:10.345
So, there's not some long lasting
connection that exists when you're

166
00:09:10.345 --> 00:09:11.525
doing the UDP.

167
00:09:11.525 --> 00:09:15.355
It's unreliable,
it does not guarantee packet arrival.

168
00:09:15.355 --> 00:09:17.395
It doesn't do packet sequencing.

169
00:09:17.395 --> 00:09:20.718
So packets arrive and the order that you
sent them in might be different than

170
00:09:20.718 --> 00:09:22.206
the order they were received in.

171
00:09:22.206 --> 00:09:24.402
Which is okay It's also true with TCP, but

172
00:09:24.402 --> 00:09:28.007
UDP doesn't attempt to label them so
you can figure out the order.

173
00:09:28.007 --> 00:09:32.066
So at the receiving end, you have no idea
what order the packets were sent in,

174
00:09:32.066 --> 00:09:34.072
you just know I got a bunch of packets.

175
00:09:34.072 --> 00:09:37.667
Which is fine in a lot of cases,
as long as you don't care about the order.

176
00:09:37.667 --> 00:09:42.187
UDP is simpler and faster than TCP because
it doesn't have to handle retries, and

177
00:09:42.187 --> 00:09:45.130
flow control and all this,
error correction detection and all that.

178
00:09:45.130 --> 00:09:47.280
So, that's a comparison between the two.

179
00:09:47.280 --> 00:09:52.022
And we're generally going to stick
with TCP, TCP together with IP.

180
00:09:52.022 --> 00:09:53.414
Thank you.

181
00:09:53.414 --> 00:09:59.800
[MUSIC]