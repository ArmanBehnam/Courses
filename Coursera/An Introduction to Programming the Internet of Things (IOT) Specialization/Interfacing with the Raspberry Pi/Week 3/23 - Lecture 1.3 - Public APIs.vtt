WEBVTT

1
00:00:00.003 --> 00:00:10.003
[MUSIC]

2
00:00:11.337 --> 00:00:16.906
So, there are a lot of services out there,
and this lectural talk about some of these

3
00:00:16.906 --> 00:00:23.190
online services, these web based services,
and public ones that anybody can access.

4
00:00:23.190 --> 00:00:25.420
We'll just talk about what
they're like and using them.

5
00:00:25.420 --> 00:00:27.520
We're not going to go through all of
them because there are far too many,

6
00:00:27.520 --> 00:00:29.410
but we'll give an example.

7
00:00:29.410 --> 00:00:33.410
So, we're going to look at an example
API on Sentiment Analysis,

8
00:00:33.410 --> 00:00:34.670
that's what it does.

9
00:00:34.670 --> 00:00:39.438
Now, I bring up this example only because
I've used it in the recent past for

10
00:00:39.438 --> 00:00:41.462
some research that I'm doing.

11
00:00:41.462 --> 00:00:44.975
So, this is just one out of hundreds and

12
00:00:44.975 --> 00:00:50.839
hundreds of different API's that
are out there that you can use.

13
00:00:50.839 --> 00:00:53.712
Let me talk about what Sentiment Analysis
is, so you can get a little background.

14
00:00:53.712 --> 00:00:58.722
So the idea is Sentiment Analysis analyzes
text to determine if it is positive or

15
00:00:58.722 --> 00:01:03.000
negative, if it has a positive
sentiment or a negative sentiment.

16
00:01:03.000 --> 00:01:05.520
It's trying to look at some aspect
of the meaning of the sentence.

17
00:01:06.620 --> 00:01:09.930
So for instance you got a sentence,
I love cats.

18
00:01:09.930 --> 00:01:11.330
Oh, I hate cats.

19
00:01:11.330 --> 00:01:15.350
You get a negative one score and
I love cats you get a positive one score.

20
00:01:15.350 --> 00:01:17.220
And there can be intermediate sentiments.

21
00:01:17.220 --> 00:01:18.500
I'm okay with cats.

22
00:01:18.500 --> 00:01:21.260
Maybe you get a zero score,
something like that.

23
00:01:21.260 --> 00:01:26.360
So the question is really, with sentiment
analysis, is this sentence expressing,

24
00:01:26.360 --> 00:01:30.030
or maybe a sequence of sentences
is expressing a positive or

25
00:01:30.030 --> 00:01:31.360
negative sentiment.

26
00:01:31.360 --> 00:01:34.880
So when do people use something
like Sentiment Analysis?

27
00:01:34.880 --> 00:01:39.830
Say you want to look up movie reviews,
you want to see if this is a good movie.

28
00:01:39.830 --> 00:01:44.380
So what you do is,
you might go through Twitter and

29
00:01:44.380 --> 00:01:46.990
look at everybody's comments
related to that movie.

30
00:01:46.990 --> 00:01:51.660
So search through Twitter for all the
comments that have that movie title in it,

31
00:01:51.660 --> 00:01:54.600
and see if their sentiments
are positive or negative.

32
00:01:54.600 --> 00:01:59.040
And if you see people are people
are talking about Star Wars, and

33
00:01:59.040 --> 00:02:03.020
95% of the sentiments in their discussion
of Star Wars is positive, then you say oh,

34
00:02:03.020 --> 00:02:04.170
everyone loves Star Wars.

35
00:02:04.170 --> 00:02:08.350
Right, so you get sort of a broad idea,
how people feel about something.

36
00:02:08.350 --> 00:02:12.560
So that's an example of the type of thing
you would use Sentiment Analysis for.

37
00:02:12.560 --> 00:02:16.180
Sentiment Analysis is a complicated task.

38
00:02:16.180 --> 00:02:18.010
It's computationally complex and

39
00:02:18.010 --> 00:02:20.710
a Raspberry Pi would not
be able to do it by itself.

40
00:02:20.710 --> 00:02:23.370
Also it requires a lot of data,
learned data.

41
00:02:23.370 --> 00:02:26.960
They typically use machine
learning to learn the patterns,

42
00:02:26.960 --> 00:02:30.480
but that type of thing, your Raspberry Pi,

43
00:02:30.480 --> 00:02:33.920
you might not want to perform that
operation on your Raspberry Pi.

44
00:02:33.920 --> 00:02:38.850
It wouldn't happen fast enough
to do what you need to do.

45
00:02:38.850 --> 00:02:40.500
So what happens is oh and

46
00:02:40.500 --> 00:02:43.840
another thing would it not only it would
not happen fast enough but the techniques

47
00:02:43.840 --> 00:02:48.130
that companies use for this that
are relatively fast, they are proprietary.

48
00:02:48.130 --> 00:02:50.960
These companies don't want to release
their secrets about how they do this

49
00:02:50.960 --> 00:02:52.020
so effectively.

50
00:02:52.020 --> 00:02:54.670
So what they do is they
provide you with this API.

51
00:02:54.670 --> 00:02:59.030
So actually this company, the company
that I use AlchemyAPI is owned by IBM.

52
00:03:00.360 --> 00:03:03.630
And so, you know IBM doesn't want to
reveal their secrets, alchemy API doesn't

53
00:03:03.630 --> 00:03:08.160
want to reveal their secrets so They let
you request answers from their server.

54
00:03:08.160 --> 00:03:12.530
So you can send them some text or
link to a webpage and

55
00:03:12.530 --> 00:03:17.000
their tool will go and do the Sentiment
Analysis and send you the results.

56
00:03:17.000 --> 00:03:17.815
So that's the idea.

57
00:03:17.815 --> 00:03:24.180
[COUGH] Now you can download their SDK and
use their API.

58
00:03:24.180 --> 00:03:29.210
So this is what I do,
I download their SDK and

59
00:03:29.210 --> 00:03:33.820
then provides me with a set of functions
that allow me to access their service.

60
00:03:33.820 --> 00:03:35.660
And, so I use those.

61
00:03:35.660 --> 00:03:37.740
I don't actually even know,
I've seen it once.

62
00:03:37.740 --> 00:03:40.250
But I don't pay attention to
what details the API are.

63
00:03:40.250 --> 00:03:41.750
I don't look at the message format.

64
00:03:41.750 --> 00:03:42.580
I just use their SDK.

65
00:03:43.580 --> 00:03:46.170
So you download their SDK,
it's still under your machine and

66
00:03:46.170 --> 00:03:47.420
then call the function.

67
00:03:47.420 --> 00:03:49.910
Now I say it may not work on Raspberry Pi.

68
00:03:49.910 --> 00:03:54.620
I actually use this API on just
a regular desktop Linux box that I have.

69
00:03:55.620 --> 00:03:57.120
That's where I use it.

70
00:03:57.120 --> 00:03:59.920
Raspberry Pi,
it should work on Raspberry Pi, actually.

71
00:03:59.920 --> 00:04:03.680
I have not tried it on a Raspberry Pi,
so I'm not going to guarantee it, but

72
00:04:03.680 --> 00:04:07.790
I'm not sure, I don't know 100% their
SKD actually installs on a Raspberry Pi.

73
00:04:07.790 --> 00:04:09.230
But you could try it.

74
00:04:09.230 --> 00:04:12.370
But this is idea though,
this is the same idea.

75
00:04:12.370 --> 00:04:14.850
This SDK may or
may not install on Raspberry Pi, but

76
00:04:14.850 --> 00:04:16.030
generally this is what you would do.

77
00:04:16.030 --> 00:04:18.660
You'd download their SDK,
install it on your machine.

78
00:04:19.960 --> 00:04:22.680
Then, let me give you an example
of what it might look like,

79
00:04:22.680 --> 00:04:27.010
the little piece of code that
involves the AlchemyAPI's SDK.

80
00:04:28.700 --> 00:04:32.150
So let's say I want to check a webpage and

81
00:04:32.150 --> 00:04:35.370
scan it's content and
find out a sentiment.

82
00:04:35.370 --> 00:04:38.890
So I look at the webpage and
see this webpage is on Star Wars.

83
00:04:38.890 --> 00:04:41.610
And I want to look at it to see if
it's a positive or negative sentiment.

84
00:04:42.770 --> 00:04:47.790
So the webpage is written in HTML,
as webpages are.

85
00:04:47.790 --> 00:04:53.440
So here's an example of a program
in Python that uses the AlchemyAPI.

86
00:04:54.980 --> 00:04:57.220
First I start off, I import.

87
00:04:57.220 --> 00:05:00.600
From AlchemyAPI I import
the AlchemyAPI: Class.

88
00:05:00.600 --> 00:05:02.420
That gives me a bunch of
methods I'm going to need.

89
00:05:03.440 --> 00:05:04.680
Then I demo HTML.

90
00:05:04.680 --> 00:05:09.520
The demo HTML is just an HTML string
that I'm going to want to analyze.

91
00:05:09.520 --> 00:05:11.680
It just says AlchemyAPI works on HTML.

92
00:05:11.680 --> 00:05:12.940
It could say anything.

93
00:05:12.940 --> 00:05:16.230
So that's my string that I'm
going to demonstrate this on.

94
00:05:16.230 --> 00:05:18.840
And then the next line is
response to equals, and in red,

95
00:05:18.840 --> 00:05:22.125
I have highlighted the AlchemyAPI method.

96
00:05:22.125 --> 00:05:24.800
AlchemyAPI.sentiment.

97
00:05:24.800 --> 00:05:26.340
So that's the call.

98
00:05:26.340 --> 00:05:28.890
Now it takes as an argument,
actually we're showing it,

99
00:05:28.890 --> 00:05:30.030
we're taking two arguments.

100
00:05:30.030 --> 00:05:32.040
First argument tells you
the type of data you're sending.

101
00:05:32.040 --> 00:05:34.170
How it's formatted and that's HTML.

102
00:05:34.170 --> 00:05:37.390
Because this demo to HTML,
it's HTML format.

103
00:05:37.390 --> 00:05:39.960
So we say HTML.

104
00:05:39.960 --> 00:05:41.820
And then the next thing,
the second argument,

105
00:05:41.820 --> 00:05:44.360
is the actual text that
you want to process.

106
00:05:44.360 --> 00:05:46.350
Demo to HTML in this case.

107
00:05:46.350 --> 00:05:51.410
So calling that function
AlchemyAPI.sentiment creates a message

108
00:05:51.410 --> 00:05:56.700
appropriately formatted and
sends it to the AlchemyAPI web servers.

109
00:05:56.700 --> 00:06:00.620
Their servers receive it and
then look at the demo HTML,

110
00:06:00.620 --> 00:06:04.170
process it, and
then they get a response back.

111
00:06:04.170 --> 00:06:07.060
They send a bunch of data back but
I'm more interested in the score.

112
00:06:07.060 --> 00:06:09.190
The score they give is actually
is negative one to positive one

113
00:06:09.190 --> 00:06:10.680
depending on what you send it.

114
00:06:10.680 --> 00:06:11.680
So they send back the score.

115
00:06:13.770 --> 00:06:17.350
So, if score and
response now docSentiment.

116
00:06:17.350 --> 00:06:18.660
Okay so what that's doing is,

117
00:06:18.660 --> 00:06:22.930
essentially what that's doing is checking
if the response has a score in it.

118
00:06:22.930 --> 00:06:25.950
Now we haven't gone through
this aspect of Python but

119
00:06:25.950 --> 00:06:29.480
the response Is actually a dictionary,
what's called a dictionary.

120
00:06:29.480 --> 00:06:35.720
So, document sentiment is
a field inside a dictionary.

121
00:06:35.720 --> 00:06:36.820
But trust me on this, so,

122
00:06:36.820 --> 00:06:40.120
if there's a score inside that,
then it just prints the score.

123
00:06:40.120 --> 00:06:43.020
Print, score, and then it prints
a response doc sentiment score.

124
00:06:43.020 --> 00:06:44.490
And that's that.

125
00:06:44.490 --> 00:06:48.880
So, that's an example of a little
piece of code that uses their

126
00:06:48.880 --> 00:06:52.920
API to get the response that I need
to perform the operation that I want.

127
00:06:52.920 --> 00:06:55.770
And it's a free API in this case,
to a limit.

128
00:06:55.770 --> 00:06:59.190
You can make a certain number
of requests per day for free.

129
00:06:59.190 --> 00:07:04.940
And actually, as with a lot of these APIs,
where they have these pay options,

130
00:07:04.940 --> 00:07:09.470
they come before you do all this, you
have to register yourself and get a key.

131
00:07:09.470 --> 00:07:12.350
If you don't have the key,
then you can't do any of this.

132
00:07:12.350 --> 00:07:15.730
But [LAUGH] because you need the key so
you can trace who you are and

133
00:07:15.730 --> 00:07:18.850
they can limit you the way they want to,
which is very common with these APIs.

134
00:07:18.850 --> 00:07:20.338
Thank you.

135
00:07:20.338 --> 00:07:25.004
[MUSIC]