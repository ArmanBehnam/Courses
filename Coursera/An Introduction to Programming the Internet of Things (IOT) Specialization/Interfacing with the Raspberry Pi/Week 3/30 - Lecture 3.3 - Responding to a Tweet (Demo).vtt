WEBVTT

1
00:00:00.000 --> 00:00:06.558
[MUSIC]

2
00:00:12.362 --> 00:00:18.660
So, in this lecture, or this demo rather,
we are going to respond to a tweet.

3
00:00:18.660 --> 00:00:22.170
So we're going to have the Raspberry Pi
looking for tweets on my stream.

4
00:00:22.170 --> 00:00:25.200
If a tweet comes in that
matches certain criteria, and

5
00:00:25.200 --> 00:00:27.350
that criteria is going to
be if it contains a string.

6
00:00:27.350 --> 00:00:29.150
So we're going to do a filter operation.

7
00:00:29.150 --> 00:00:30.400
We filter the tweets.

8
00:00:30.400 --> 00:00:31.480
We look for that string.

9
00:00:31.480 --> 00:00:37.320
If a tweet comes through with that string,
then, my Raspberry Pi will respond.

10
00:00:37.320 --> 00:00:40.070
Now, I could have it
respond in any way but

11
00:00:40.070 --> 00:00:42.790
I'll have it just print
a message to the screen.

12
00:00:42.790 --> 00:00:46.370
But note, that we could have it do
a lotta different things if we wanted to.

13
00:00:46.370 --> 00:00:47.943
So that's what we're going to do.

14
00:00:47.943 --> 00:00:53.622
Let me first, again, connect to my
Raspberry Pi using Secure Show.

15
00:00:59.179 --> 00:01:01.385
There it is.

16
00:01:01.385 --> 00:01:03.104
Open.

17
00:01:03.104 --> 00:01:05.309
Let's do the login.

18
00:01:08.409 --> 00:01:14.150
Okay, and now let's just change the size
on the screen again so we can see it.

19
00:01:14.150 --> 00:01:16.960
Sorry, I have to do this every time.

20
00:01:16.960 --> 00:01:20.721
But I don't know how to make
the size change permanent.

21
00:01:20.721 --> 00:01:22.090
Maybe I'll figure it out one day.

22
00:01:22.090 --> 00:01:25.730
All right, okay, fine, there.

23
00:01:25.730 --> 00:01:27.790
Now let's shrink the screen
up a little bit, there we go.

24
00:01:28.870 --> 00:01:33.290
Okay, so now we have our Raspberry Pi
in this terminal window on the bottom.

25
00:01:35.018 --> 00:01:39.640
Now, let's see, we'll start off,
and again, I'm assuming that

26
00:01:39.640 --> 00:01:43.760
you already have a Twitter account, you
have already registered your Twitter app.

27
00:01:43.760 --> 00:01:46.370
Just like we said in class,
you've registered your Twitter app,

28
00:01:46.370 --> 00:01:48.880
gone through that process and
gotten the four necessary keys.

29
00:01:49.930 --> 00:01:52.770
So I assume you've gotten those already.

30
00:01:52.770 --> 00:01:56.403
And I assume that you've
already installed Twython and

31
00:01:56.403 --> 00:02:00.884
the Twython package, using PIP and
so first you've installed PIP,

32
00:02:00.884 --> 00:02:05.415
then you've used PIP to
install the Twitter package.

33
00:02:05.415 --> 00:02:08.895
So, the Twitter, the Twython package.

34
00:02:08.895 --> 00:02:11.465
So then you've got access
to the Twython SDK.

35
00:02:11.465 --> 00:02:13.465
Now, let's start coding.

36
00:02:14.735 --> 00:02:15.525
We'll go to Python.

37
00:02:15.525 --> 00:02:17.105
We're going to do this
at the command line.

38
00:02:18.465 --> 00:02:24.812
So we start Python, and let's start
off by importing, so from Twython.

39
00:02:27.349 --> 00:02:29.770
Oops, Twython.

40
00:02:29.770 --> 00:02:31.980
We're going to import
just a TwythonStreamer.

41
00:02:33.500 --> 00:02:34.403
So, let me explain that in a second.

42
00:02:34.403 --> 00:02:37.677
Import Twython.

43
00:02:39.093 --> 00:02:43.452
Now, TwythonStreamer,
that's a class that's in that package, and

44
00:02:43.452 --> 00:02:46.793
that's going to be basically
be connected to a stream and

45
00:02:46.793 --> 00:02:49.698
it'll allow us to filter the stream and
look for

46
00:02:49.698 --> 00:02:53.940
strength in the stream see if we can
detect tweets of a certain type.

47
00:02:53.940 --> 00:02:58.240
So we import this TwythonStreamer
class from the string.

48
00:02:58.240 --> 00:03:01.606
Next up, let us define my keys.

49
00:03:01.606 --> 00:03:02.386
And now, I did this before.

50
00:03:02.386 --> 00:03:04.590
I dunno if you saw the other video.

51
00:03:04.590 --> 00:03:07.730
But these keys,
I don't want you to see my keys, so

52
00:03:07.730 --> 00:03:10.132
normally I would just type in
the definition for the keys.

53
00:03:10.132 --> 00:03:15.510
For instance, I can write CK, that's one
of my keys, consumer key that equals and

54
00:03:15.510 --> 00:03:18.620
I can give it blah, blah,
blah, whatever, random value.

55
00:03:18.620 --> 00:03:20.000
I could do that, right?

56
00:03:20.000 --> 00:03:23.270
Now I don't want to reveal my key though,
so what I did was,

57
00:03:23.270 --> 00:03:26.325
for these four keys I've
actually already defined them.

58
00:03:26.325 --> 00:03:29.770
I listed definitions for
them in another file, in a Python file.

59
00:03:29.770 --> 00:03:32.300
So I'm just going to execute
that file right now so

60
00:03:32.300 --> 00:03:34.090
you can't actually see what my values are.

61
00:03:34.090 --> 00:03:36.281
So I'll just say execfile.

62
00:03:36.281 --> 00:03:39.912
This will just execute a Python file,

63
00:03:39.912 --> 00:03:45.021
a Python script and
initkeys is the name of my script.

64
00:03:45.021 --> 00:03:52.954
So, bam, now it has defined my
four keys c_k, c_s, a_t and a_s.

65
00:03:52.954 --> 00:03:53.814
Those are my four keys.

66
00:03:53.814 --> 00:03:56.050
So I've got them all defined now.

67
00:03:57.200 --> 00:03:59.480
So, now what do I need to do?

68
00:03:59.480 --> 00:04:04.120
What I need to do is define a new class,
a streamer class,

69
00:04:04.120 --> 00:04:06.240
which extends TwythonStreamer.

70
00:04:06.240 --> 00:04:11.230
So, the idea here is that we've imported
this TwythonStreamer class, but

71
00:04:11.230 --> 00:04:17.450
the TwythonStreamer class it has certain
methods in there that are defined and

72
00:04:17.450 --> 00:04:20.600
we want to redefine them to
do what we want them to do.

73
00:04:20.600 --> 00:04:24.387
So the whole idea is that we're going to
define a function called on_success, and

74
00:04:24.387 --> 00:04:26.760
this on_success function, it's a call bag.

75
00:04:26.760 --> 00:04:29.771
It will be invoked whenever
you successfully find a tweet

76
00:04:29.771 --> 00:04:32.290
that matches the criteria
we're looking for.

77
00:04:32.290 --> 00:04:35.640
And we want to define that ourselves,
we don't want to use whatever definition

78
00:04:35.640 --> 00:04:38.097
TwythonStreamer has,
we want to make our own definition.

79
00:04:38.097 --> 00:04:42.962
So we're going to have to make a new
class, we'll call it MyStreamer, but

80
00:04:42.962 --> 00:04:48.000
the name doesn't really matter and
it's going to extend TwythonStreamer.

81
00:04:49.640 --> 00:04:52.450
Now, when we say extend,

82
00:04:52.450 --> 00:04:56.740
that means it's going to inherit
everything from TwythonStreamer.

83
00:04:56.740 --> 00:05:00.231
Okay, so, it's going to have
everything a TwythonStreamer had,

84
00:05:00.231 --> 00:05:03.260
including this method called on_success.

85
00:05:03.260 --> 00:05:05.030
So, we're going to redefine that method.

86
00:05:05.030 --> 00:05:08.110
Def on_success.

87
00:05:10.420 --> 00:05:12.770
Now that's going to take self,
as all methods do.

88
00:05:12.770 --> 00:05:16.554
And then it's going to take data,
which is the data,

89
00:05:16.554 --> 00:05:19.725
which is the tweet that actually matched.

90
00:05:19.725 --> 00:05:21.606
So, we define on_success.

91
00:05:21.606 --> 00:05:25.825
Now, we're going to say basically what
we want to do here in on_success,

92
00:05:25.825 --> 00:05:28.493
is we want to say, look,
if data is not empty,

93
00:05:28.493 --> 00:05:32.990
if there's actually text in there,
then we want to print a message.

94
00:05:32.990 --> 00:05:34.830
Okay, just to say, look, we have a match.

95
00:05:35.940 --> 00:05:39.850
So let's say if text.

96
00:05:39.850 --> 00:05:46.440
Okay, so
data is actually like a dictionary.

97
00:05:46.440 --> 00:05:50.940
So it'll have a text field if there
actually is some text in data,

98
00:05:50.940 --> 00:05:52.290
then it'll have a text field.

99
00:05:52.290 --> 00:05:53.097
So if text in data.

100
00:05:53.097 --> 00:05:55.025
So data has text in it.

101
00:05:56.906 --> 00:06:04.877
Then let's say we print, got it.

102
00:06:04.877 --> 00:06:07.035
Say that.

103
00:06:07.035 --> 00:06:07.871
That looks fine.

104
00:06:07.871 --> 00:06:13.190
Okay, so that is all we need to define
in our class actually, right there.

105
00:06:13.190 --> 00:06:17.080
So we define this new class called my
streamer, it extends TwythonStreamer,

106
00:06:17.080 --> 00:06:20.650
it has an on_success method
which just prints, got it,

107
00:06:20.650 --> 00:06:23.780
whenever it receives a message that
matches whatever criteria we define.

108
00:06:23.780 --> 00:06:24.990
We haven't done that yet.

109
00:06:24.990 --> 00:06:28.110
Whenever it finds that message and
that message has some actual text in it,

110
00:06:28.110 --> 00:06:30.449
it'll just print, got it,
to say I have received it.

111
00:06:31.780 --> 00:06:33.270
Now let's see.

112
00:06:33.270 --> 00:06:35.130
Let's substantiate our new class.

113
00:06:35.130 --> 00:06:39.050
So we'll make a stream, MyStreamer.

114
00:06:39.050 --> 00:06:41.940
So we're calling MyStreamers
constructor now.

115
00:06:41.940 --> 00:06:45.410
And it takes again,
four arguments just like TwythonClass,

116
00:06:45.410 --> 00:06:47.290
four arguments which are the four keys.

117
00:06:47.290 --> 00:06:50.373
So we're going to pass the four
keys which you can't see, but

118
00:06:50.373 --> 00:06:52.480
I have defined them to these variables.

119
00:06:56.791 --> 00:07:00.730
A_s, that's it, okay, so
now we have a stream.

120
00:07:01.750 --> 00:07:06.080
Now we want to tell it that we want to
filter the stream for a particular string.

121
00:07:06.080 --> 00:07:08.420
Now we can pick whatever string we want,
so we're going to say stream.

122
00:07:09.610 --> 00:07:16.820
We're going to call the statuses
filter method, statuses, filter.

123
00:07:16.820 --> 00:07:19.820
And we're going to pass
it a track argument.

124
00:07:19.820 --> 00:07:21.920
Basically a string of
what I want it to track,

125
00:07:21.920 --> 00:07:24.720
what it's going to be looking for
in these tweets.

126
00:07:24.720 --> 00:07:26.080
So we have to make up a stream.

127
00:07:26.080 --> 00:07:30.130
Let's say iot.

128
00:07:30.130 --> 00:07:31.290
Nah, that's too easy.

129
00:07:32.410 --> 00:07:35.984
Let's say, harrisiot, that's good.

130
00:07:35.984 --> 00:07:40.094
harris_iot, fine.

131
00:07:40.094 --> 00:07:41.320
Nobody's going to use that.

132
00:07:41.320 --> 00:07:43.210
Okay, so, harris_iot.

133
00:07:43.210 --> 00:07:47.612
So if somebody sent,
if I sent a tweet that said harris_iot,

134
00:07:47.612 --> 00:07:52.691
in my stream, then it'll see that,
it'll detect that in my stream and

135
00:07:52.691 --> 00:07:55.845
then it'll print got
it on the screen here.

136
00:07:55.845 --> 00:07:57.795
Okay, so, let's go.

137
00:07:57.795 --> 00:07:59.049
Bam.

138
00:07:59.049 --> 00:08:02.700
Okay, so there's some messages, but
insecure platform, don't worry about that.

139
00:08:02.700 --> 00:08:04.492
But notice that it is now waiting, right?

140
00:08:04.492 --> 00:08:05.471
I don't have a prompt.

141
00:08:05.471 --> 00:08:06.940
I don't have a new Python prompt.

142
00:08:06.940 --> 00:08:10.010
It's now waiting, it's checking
the streams to see if anything comes

143
00:08:10.010 --> 00:08:12.820
through that matches harris_iot.

144
00:08:12.820 --> 00:08:15.600
So let us now open up Twitter.

145
00:08:15.600 --> 00:08:17.520
Now here's my Twitter and

146
00:08:17.520 --> 00:08:21.500
I just have a few stupid tweets here,
not important tweets, just test tweets.

147
00:08:21.500 --> 00:08:22.450
So let's make a new tweet.

148
00:08:22.450 --> 00:08:25.394
Up here, upper right says tweet,
so I'll tweet.

149
00:08:25.394 --> 00:08:28.358
And I will put in haris_iot.

150
00:08:28.358 --> 00:08:33.273
Now note when I tweet this the Raspberry
Pi in the bottom window should detect it

151
00:08:33.273 --> 00:08:35.250
and print got it as a result.

152
00:08:35.250 --> 00:08:36.770
Let us see if it works.

153
00:08:37.870 --> 00:08:39.160
Got it, yes, it worked.

154
00:08:39.160 --> 00:08:40.490
My tweet was posted.

155
00:08:40.490 --> 00:08:41.770
And you can see down here in the bottom,

156
00:08:41.770 --> 00:08:44.721
it says got it, successful,
mission accomplished.

157
00:08:46.250 --> 00:08:47.417
And that's it.

158
00:08:47.417 --> 00:08:49.529
So, you can see it's pretty easy to use.

159
00:08:49.529 --> 00:08:50.365
Thank you.

160
00:08:50.365 --> 00:08:56.117
[MUSIC]