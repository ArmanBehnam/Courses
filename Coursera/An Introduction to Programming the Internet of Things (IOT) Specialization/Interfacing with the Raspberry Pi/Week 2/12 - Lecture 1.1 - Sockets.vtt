WEBVTT

1
00:00:00.000 --> 00:00:08.156
[MUSIC]

2
00:00:08.156 --> 00:00:14.620
[SOUND] We're going to talk about
sockets and how you use them in code,

3
00:00:14.620 --> 00:00:19.827
how you write code to talk
on networks using sockets.

4
00:00:19.827 --> 00:00:22.229
So we're going to talk
about the socket interface.

5
00:00:23.700 --> 00:00:29.600
This is really important when you want to
write code that communicates on a network.

6
00:00:29.600 --> 00:00:32.020
So if you're not writing code
that communicates on a network,

7
00:00:32.020 --> 00:00:34.540
you can not worry about sockets.

8
00:00:34.540 --> 00:00:36.080
But once you start writing code, and

9
00:00:36.080 --> 00:00:40.440
that's what we're doing now, it has to
be able to use this socket interface.

10
00:00:40.440 --> 00:00:44.600
The socket interface is the most
common way to talk on the internet or

11
00:00:44.600 --> 00:00:48.848
to programatically communicate on
the internet through a piece of code.

12
00:00:48.848 --> 00:00:51.790
So we're going to learn
how to make sockets and

13
00:00:53.400 --> 00:00:54.910
how you use them in connections.

14
00:00:54.910 --> 00:00:58.400
So, sockets are a programming
interface to talking on the network.

15
00:00:58.400 --> 00:01:00.050
It can be used in many languages.

16
00:01:00.050 --> 00:01:02.750
C is probably the first place
that you used them, C, C++.

17
00:01:02.750 --> 00:01:05.140
We're going to use Python.

18
00:01:05.140 --> 00:01:06.799
You can create sockets in Python and

19
00:01:06.799 --> 00:01:11.000
that's what we're using because that's how
we're programming on the Raspberry Pi.

20
00:01:11.000 --> 00:01:13.260
It's based on a client/server
programming model.

21
00:01:13.260 --> 00:01:16.210
So, it assumes client/server interface.

22
00:01:16.210 --> 00:01:17.590
It can be used without client/server, but

23
00:01:17.590 --> 00:01:21.660
it assumes client/server, so
that's what we're assuming, in general.

24
00:01:21.660 --> 00:01:24.650
And that's mostly what we're
going to be dealing with.

25
00:01:24.650 --> 00:01:31.300
So, what we'll go through here is we'll
talk about how you might make a client.

26
00:01:31.300 --> 00:01:35.200
So, we're going to make sort
of a generic client in Python.

27
00:01:36.420 --> 00:01:40.610
And so this client is going to talk,
it's going to connect to some server and

28
00:01:40.610 --> 00:01:43.590
it's going to request something and
get a result back.

29
00:01:44.610 --> 00:01:45.970
That's all it's going to do.

30
00:01:45.970 --> 00:01:49.294
Now this is just a generic
server that we're making, or

31
00:01:49.294 --> 00:01:52.620
rather generic client that we're making.

32
00:01:52.620 --> 00:01:56.400
You can modify this to be a different
type of client, right, but

33
00:01:56.400 --> 00:01:59.010
we're just making a generic one,
send some arbitrary data.

34
00:02:00.150 --> 00:02:05.390
So, here's what the outline of
the structure of such a piece of code,

35
00:02:05.390 --> 00:02:07.680
a code for a client would look like.

36
00:02:07.680 --> 00:02:11.350
First, if you want to make this generic
network client, you gotta create a socket.

37
00:02:11.350 --> 00:02:12.420
Okay?
So we're

38
00:02:12.420 --> 00:02:15.050
going to have to have a little
code that creates a socket.

39
00:02:15.050 --> 00:02:17.990
And then once you created the socket
you gotta connect the socket to

40
00:02:17.990 --> 00:02:19.280
the server, right?

41
00:02:19.280 --> 00:02:21.990
So on the server side there's gotta be
a socket, and you gotta connect those.

42
00:02:23.420 --> 00:02:26.250
Now when you create the socket,
you're creating it locally on the client.

43
00:02:26.250 --> 00:02:28.700
You connect it to the server's socket.

44
00:02:28.700 --> 00:02:29.840
Then you send your data.

45
00:02:29.840 --> 00:02:30.840
Once you have the connection made,

46
00:02:30.840 --> 00:02:34.290
you send your data, which would
generally be a request to the server.

47
00:02:34.290 --> 00:02:36.120
So you could send your data.

48
00:02:36.120 --> 00:02:39.669
Then you wait for some response,
right, some response data.

49
00:02:39.669 --> 00:02:43.460
So the server presumably will do
something and send you a response.

50
00:02:43.460 --> 00:02:45.340
So you wait for that data.

51
00:02:45.340 --> 00:02:47.250
Then once you receive it,
you close the socket.

52
00:02:47.250 --> 00:02:50.000
You do something with the data if you want
to do it, and then you close the socket.

53
00:02:50.000 --> 00:02:53.600
So that is your really simple,
most simple client, right?

54
00:02:53.600 --> 00:02:56.740
You create the socket,
you connect the socket,

55
00:02:56.740 --> 00:03:00.050
you send a request, you receive
a response, and you close the socket.

56
00:03:00.050 --> 00:03:01.350
Now note that in a real client,

57
00:03:01.350 --> 00:03:03.870
like say it was a web client,
you wouldn't immediately close the socket.

58
00:03:03.870 --> 00:03:06.190
Maybe you want to send more requests and
get more responses.

59
00:03:06.190 --> 00:03:08.990
But this is generically what you might do.

60
00:03:08.990 --> 00:03:12.830
So we're going to go through this step
by step, what the code might look like.

61
00:03:12.830 --> 00:03:14.330
We'll go through the beginning
of it right now.

62
00:03:15.520 --> 00:03:17.462
So creating a socket,
how might you do this?

63
00:03:17.462 --> 00:03:19.590
So here's some Python
code that would do that.

64
00:03:19.590 --> 00:03:21.760
First you import the socket.

65
00:03:21.760 --> 00:03:24.590
So you need to import the socket package.

66
00:03:24.590 --> 00:03:27.490
The socket package has all these
socket library functions in it so

67
00:03:27.490 --> 00:03:28.320
you've gotta import that.

68
00:03:28.320 --> 00:03:30.510
So you start your code off with that.

69
00:03:30.510 --> 00:03:33.240
And then the next line
is creating the socket.

70
00:03:33.240 --> 00:03:35.810
Now notice that this next line for

71
00:03:35.810 --> 00:03:40.810
space reasons on the screen,
we couldn't put it all on one line.

72
00:03:40.810 --> 00:03:42.710
But this would be on one long line.

73
00:03:42.710 --> 00:03:43.450
Okay?

74
00:03:43.450 --> 00:03:45.780
And so, it wouldn't be broken
up as two lines like that.

75
00:03:45.780 --> 00:03:49.570
mysock = socket.socket, so
on and so on and so on.

76
00:03:49.570 --> 00:03:54.810
So it's calling a function called socket,
socket.socket(), okay.

77
00:03:54.810 --> 00:03:58.350
That function, that method really,
creates a socket.

78
00:03:59.460 --> 00:04:00.360
So mysock,

79
00:04:00.360 --> 00:04:04.880
after I do this call, mysock is equal
to the socket that I've just created.

80
00:04:04.880 --> 00:04:08.170
Now, notice that this socket method,
it takes, in this case,

81
00:04:08.170 --> 00:04:10.180
it's taking two arguments, okay.

82
00:04:10.180 --> 00:04:12.624
The first argument is socket.AF_INET.

83
00:04:13.820 --> 00:04:18.350
So AF_INET declares
the Address Family to be Internet.

84
00:04:18.350 --> 00:04:20.270
That is always what
we're going to be using,

85
00:04:20.270 --> 00:04:21.840
because we're talking on the internet.

86
00:04:21.840 --> 00:04:25.410
Now there are other address families for
other types of networks.

87
00:04:25.410 --> 00:04:29.569
But by far the most common's
going to be Internet.

88
00:04:29.569 --> 00:04:35.780
[COUGH] Say I wanted to do
infrared communication,

89
00:04:35.780 --> 00:04:38.340
there's an infrared address family and
so on.

90
00:04:38.340 --> 00:04:39.820
Much less common, right?

91
00:04:39.820 --> 00:04:41.420
Vast majority of communication,

92
00:04:41.420 --> 00:04:43.980
we're going to use AF_INET
because we're using the Internet.

93
00:04:45.710 --> 00:04:50.858
Also, the next argument SOCK_STREAM,
SOCK_STREAM indicates that we're

94
00:04:50.858 --> 00:04:56.868
using TCP, connection-based communication
as compared to UDP which is conectionless.

95
00:04:56.868 --> 00:04:59.314
We're using TCP and
you remember what TCP gives us.

96
00:04:59.314 --> 00:05:03.062
It's more overhead but
TCP gives us flow control,

97
00:05:03.062 --> 00:05:07.429
it gives us reliable communication,
that's important.

98
00:05:07.429 --> 00:05:10.700
So we know that if we send
a message it will be received.

99
00:05:10.700 --> 00:05:13.330
It won't get dropped mysteriously.

100
00:05:13.330 --> 00:05:14.081
Thank you.

101
00:05:14.081 --> 00:05:18.794
[MUSIC]