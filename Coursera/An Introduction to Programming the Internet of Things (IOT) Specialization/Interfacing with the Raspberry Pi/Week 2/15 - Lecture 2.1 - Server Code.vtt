WEBVTT

1
00:00:00.000 --> 00:00:02.355
[MUSIC]
>> In this lecture,

2
00:00:02.355 --> 00:00:06.287
I'll talk about the server side,

3
00:00:06.287 --> 00:00:11.440
we've finished talking about the clients,

4
00:00:11.440 --> 00:00:16.063
so we'll talk about how a server looks.

5
00:00:17.620 --> 00:00:22.344
Sockets on the server, so we've been
talking about, in the previous lectures,

6
00:00:22.344 --> 00:00:27.860
about writing code for a client, a generic
client on your raspberry pie, lets say.

7
00:00:27.860 --> 00:00:29.310
So now lets look at
the other side of that,

8
00:00:29.310 --> 00:00:32.510
lets look at the steps that
are required to make a generic server.

9
00:00:32.510 --> 00:00:35.270
And the server is also going to
have to create a socket, but

10
00:00:35.270 --> 00:00:37.210
it has a bit of a different set of steps,

11
00:00:37.210 --> 00:00:40.720
a different sequence of steps
than what you see in a client.

12
00:00:40.720 --> 00:00:42.140
So we'll look at that right now.

13
00:00:43.570 --> 00:00:47.900
So first a server, once you have a server
process running on your machine, it needs

14
00:00:47.900 --> 00:00:51.530
to sit there and wait for requests to come
in, right, that's the job of a server.

15
00:00:51.530 --> 00:00:53.710
It listens for requests,
waits for requests,

16
00:00:53.710 --> 00:00:57.310
when a request comes in, it receives
the request, processes the request,

17
00:00:57.310 --> 00:01:00.380
gets the results, and
then sends the results back.

18
00:01:00.380 --> 00:01:04.470
So a server's bit of a different
thing than a client.

19
00:01:04.470 --> 00:01:07.940
So the first thing a server is going to
have to do is create a socket, right,

20
00:01:07.940 --> 00:01:10.580
that it's listening to, a local socket.

21
00:01:10.580 --> 00:01:14.000
Then it's gotta bind the socket
to an IP address and port.

22
00:01:14.000 --> 00:01:16.779
So when you create the socket at first,
it's just floating there,

23
00:01:16.779 --> 00:01:18.190
not connected to anything.

24
00:01:18.190 --> 00:01:21.620
It needs to be associated
with a particular port and

25
00:01:21.620 --> 00:01:25.160
IP address of the remote thing
that it's connecting to.

26
00:01:26.230 --> 00:01:29.410
Which you may not know yet,
but we'll talk about that.

27
00:01:29.410 --> 00:01:33.210
Then once it's bound, the socket,
it's gotta listen to that socket.

28
00:01:33.210 --> 00:01:36.650
So listening means just sitting there and
waiting for a message to come in.

29
00:01:36.650 --> 00:01:40.379
Now then once the message comes in,
it's got to accept the connection right?

30
00:01:40.379 --> 00:01:45.138
Once the request comes in, once say
a client says, look I want to connect,

31
00:01:45.138 --> 00:01:47.178
once a client tries to connect,

32
00:01:47.178 --> 00:01:53.280
the server has to accept that connection
in order to get some communication going.

33
00:01:53.280 --> 00:01:54.360
So it accepts the connection.

34
00:01:55.400 --> 00:01:56.740
Then it receives a request.

35
00:01:56.740 --> 00:02:00.020
So once the connection is made,
the client sends some data and

36
00:02:00.020 --> 00:02:02.582
the server receives that data,
so it receive a request.

37
00:02:02.582 --> 00:02:06.172
It processes a request and
sends the response, so

38
00:02:06.172 --> 00:02:08.845
it sends data back along the same
connection to the client.

39
00:02:08.845 --> 00:02:13.350
And, yeah that's it, that's
the outline of what should happen, so

40
00:02:13.350 --> 00:02:17.580
lets go through some of the steps,
what the code would look like.

41
00:02:17.580 --> 00:02:21.630
I have omitted the first part where you
input socket, we assume we're doing that.

42
00:02:21.630 --> 00:02:22.250
So on the server,

43
00:02:22.250 --> 00:02:25.400
the first thing you are going to do is
you are going to create the socket.

44
00:02:25.400 --> 00:02:27.620
And then you're going to bind the socket.

45
00:02:27.620 --> 00:02:31.070
So, the first line of code,
mysock = socket.socket,

46
00:02:31.070 --> 00:02:32.970
it calls that function socket
which creates a socket.

47
00:02:32.970 --> 00:02:36.940
And actually, that first line of code is
the same as what goes on on the client

48
00:02:36.940 --> 00:02:38.510
to create the socket.

49
00:02:38.510 --> 00:02:40.240
But, the next line is different.

50
00:02:40.240 --> 00:02:44.119
You have to bind the socket
to an IP address and a port.

51
00:02:44.119 --> 00:02:47.560
Now the port number I'm
using here is 1234.

52
00:02:47.560 --> 00:02:48.352
I made that up.

53
00:02:48.352 --> 00:02:51.300
It's not a well known port.

54
00:02:51.300 --> 00:02:54.430
It's just some generic port because
this is just some generic service.

55
00:02:54.430 --> 00:02:57.550
But notice that if I were making
a web server or something like that,

56
00:02:57.550 --> 00:03:01.327
if I were making a web server or something
like that I could actually use Port 80,

57
00:03:01.327 --> 00:03:04.320
for instance, because I know that's for
web traffic and so on.

58
00:03:04.320 --> 00:03:08.440
In this case, I'm using an arbitrary port
1234, just because it's out of the way and

59
00:03:08.440 --> 00:03:10.440
it's not associated with anything.

60
00:03:10.440 --> 00:03:16.130
Now, the first argument to the bind
[COUGH] is just empty quotes, right.

61
00:03:16.130 --> 00:03:20.570
The first argument is the host that you
want to associate it with, the other host,

62
00:03:20.570 --> 00:03:21.950
the host that you're connecting to.

63
00:03:21.950 --> 00:03:24.770
But of course,
we don't know what the host is yet, right?

64
00:03:24.770 --> 00:03:27.270
The server's sitting there waiting for
a host to connect to.

65
00:03:27.270 --> 00:03:29.380
It doesn't know what host
it's going to connect to.

66
00:03:29.380 --> 00:03:33.310
So, you pass as an argument,
just as nothing, as quotes.

67
00:03:33.310 --> 00:03:36.100
And, what that allows it to do,
it's like a wild card.

68
00:03:36.100 --> 00:03:38.020
It allows it to receive from any host.

69
00:03:38.020 --> 00:03:39.960
So you just pass it nothing for the host.

70
00:03:39.960 --> 00:03:42.420
Put you give it the port
that you want to listen on.

71
00:03:42.420 --> 00:03:44.710
Give it some port number
that's out of the way,

72
00:03:44.710 --> 00:03:48.220
unless you actually are making like a
well-known service, like a web service or

73
00:03:48.220 --> 00:03:50.990
something like that, and
then you use the appropriate port.

74
00:03:50.990 --> 00:03:52.620
So you create the socket and
then you bind it.

75
00:03:56.089 --> 00:03:57.700
Yeah, arbitrary and not well-known.

76
00:03:57.700 --> 00:04:01.510
Okay now once it's bound, you're going to
want to listen to the socket and

77
00:04:01.510 --> 00:04:03.660
then accept any connections that come in.

78
00:04:03.660 --> 00:04:06.600
So listen starts listening for
a connect, right?

79
00:04:06.600 --> 00:04:11.620
And listening, listen means it's waiting
until some client calls connect, right,

80
00:04:11.620 --> 00:04:13.050
trying to connect to the socket.

81
00:04:13.050 --> 00:04:14.740
So you call listen.

82
00:04:14.740 --> 00:04:18.410
Notice that listen, mysock.listen, and
listen takes an argument, a number.

83
00:04:18.410 --> 00:04:20.940
That number is called a backlog.

84
00:04:20.940 --> 00:04:23.900
That's the number of requests
allowed to wait for service.

85
00:04:23.900 --> 00:04:27.710
So the way we're writing this code,
the server can only,

86
00:04:27.710 --> 00:04:29.990
we're doing single
threaded code right now.

87
00:04:29.990 --> 00:04:33.040
Which means that we're only going to
be able to handle one service request

88
00:04:33.040 --> 00:04:34.230
at a time, right.

89
00:04:34.230 --> 00:04:38.830
So the question is how many,
you know say you were serving a request.

90
00:04:38.830 --> 00:04:42.340
How many other clients can
be waiting in line for

91
00:04:42.340 --> 00:04:45.080
you to finish serving until
they get served, right.

92
00:04:45.080 --> 00:04:46.470
And that's what the BAG log is.

93
00:04:46.470 --> 00:04:47.030
And we're listing.

94
00:04:47.030 --> 00:04:48.590
We're putting five arbitrarily.

95
00:04:48.590 --> 00:04:50.610
We can put any number we want.

96
00:04:50.610 --> 00:04:52.450
It basically tells you
how long the waiting

97
00:04:52.450 --> 00:04:53.669
line is going to be for the clients.

98
00:04:55.300 --> 00:04:58.690
So then the next line we call accept.

99
00:04:58.690 --> 00:05:03.750
Accept, once you're listening to the port,
it tries to accept it.

100
00:05:03.750 --> 00:05:07.750
Accepting a connection request
is accepting the call to connect

101
00:05:07.750 --> 00:05:09.270
from the client, okay.

102
00:05:09.270 --> 00:05:10.760
So you want to accept it.

103
00:05:10.760 --> 00:05:15.510
So you call mysock.accept,
now this returns two things,

104
00:05:15.510 --> 00:05:18.050
so notice that it says conn comma address.

105
00:05:18.050 --> 00:05:21.240
You can do this in python,
a function can return two things and

106
00:05:21.240 --> 00:05:23.240
in this case we are returning two things.

107
00:05:23.240 --> 00:05:25.540
The first thing is going
to be the bound to conn,

108
00:05:25.540 --> 00:05:28.680
the second thing will be the address.

109
00:05:28.680 --> 00:05:31.770
The first thing that returns
is the connection, right?

110
00:05:31.770 --> 00:05:35.820
You need this connection to
receive data and to send data.

111
00:05:35.820 --> 00:05:39.280
So the server's going to need to do that,
so that's what the connection's for.

112
00:05:39.280 --> 00:05:42.400
The addr is the address
it is connected to.

113
00:05:42.400 --> 00:05:44.800
So that's the IP address and
the port number.

114
00:05:44.800 --> 00:05:48.510
Now the port number we know
because we bound to that port, but

115
00:05:48.510 --> 00:05:52.840
the IP address we wouldn't know until
you call accept, and then the IP,

116
00:05:52.840 --> 00:05:55.930
the address is going to
contain the IP address

117
00:05:55.930 --> 00:05:58.670
of the client that's connected to you,
and trying to talk to you.

118
00:05:59.880 --> 00:06:02.500
So now you have this connection and
this conn, this

119
00:06:02.500 --> 00:06:06.808
connection is what you're going to use to
receive data on and send a response back.

120
00:06:06.808 --> 00:06:11.207
Thank you.

121
00:06:11.207 --> 00:06:16.949
[MUSIC]