WEBVTT

1
00:00:00.103 --> 00:00:09.553
[MUSIC]

2
00:00:09.553 --> 00:00:12.577
So this lesson,
this lecture we'll talk about,

3
00:00:12.577 --> 00:00:15.963
a little more about operating systems and
what they do.

4
00:00:15.963 --> 00:00:20.084
We'll talk about tasks and
process support really, about how

5
00:00:20.084 --> 00:00:24.749
operating system support multiple
tasks executing at the same time and

6
00:00:24.749 --> 00:00:28.263
how that's useful in more
complicated IoT devices.

7
00:00:28.263 --> 00:00:30.673
So multiple tasks.

8
00:00:30.673 --> 00:00:35.671
So this is actually going back to the last
lecture where we were talking about

9
00:00:35.671 --> 00:00:38.963
this embedded system that
I had my students make.

10
00:00:38.963 --> 00:00:41.803
Actually, IoT device,
it was a web controlled car.

11
00:00:41.803 --> 00:00:45.939
And through the Internet, you could go
to a browser, open up a browser and

12
00:00:45.939 --> 00:00:47.553
remotely control this car.

13
00:00:47.553 --> 00:00:51.963
So you could view what its camera
was seeing on your web browser.

14
00:00:51.963 --> 00:00:54.804
Also you could hit some buttons forward,
back, left,

15
00:00:54.804 --> 00:00:56.803
right to control the motion of the car.

16
00:00:56.803 --> 00:01:03.543
And so the car itself has its own
processor and a web server running on it.

17
00:01:03.543 --> 00:01:06.307
A Wi-Fi web server running on it and
a camera and

18
00:01:06.307 --> 00:01:08.253
it could manage all these tasks.

19
00:01:08.253 --> 00:01:10.463
These tests could be managed remotely.

20
00:01:10.463 --> 00:01:14.438
But the idea is that on that car,
on its microcontroller,

21
00:01:14.438 --> 00:01:16.963
it had to do multiple things at once.

22
00:01:16.963 --> 00:01:20.529
There are multiple tasks that it had to
handle in order to do this that it had to

23
00:01:20.529 --> 00:01:21.713
handle at the same time.

24
00:01:21.713 --> 00:01:23.463
So let's look at some of these.

25
00:01:23.463 --> 00:01:25.953
One thing is sending video data.

26
00:01:25.953 --> 00:01:31.069
So this car, if you were connected to it,
it was constantly sending video data

27
00:01:31.069 --> 00:01:35.893
from its camera to your phone or
whatever your web browser was running on.

28
00:01:35.893 --> 00:01:37.343
So, it had to do that.

29
00:01:37.343 --> 00:01:40.646
Send video data all
the time in the background,

30
00:01:40.646 --> 00:01:43.213
then servicing the motion buttons.

31
00:01:43.213 --> 00:01:45.923
So in the interface,
you could go to your web browser.

32
00:01:45.923 --> 00:01:48.093
Hit the forward button,
the car would move forward.

33
00:01:48.093 --> 00:01:50.313
Hit the back button,
the car would move back, and so on.

34
00:01:50.313 --> 00:01:53.633
So the car, its microcontroller
has to service those buttons.

35
00:01:53.633 --> 00:01:56.305
So even while it's playing
the video at the same time,

36
00:01:56.305 --> 00:01:58.933
if somebody presses forward,
it's got to respond.

37
00:01:58.933 --> 00:02:00.843
Go forward, go backward and all that.

38
00:02:00.843 --> 00:02:02.603
So, it has to do that.

39
00:02:02.603 --> 00:02:04.133
Detecting obstacles.

40
00:02:04.133 --> 00:02:06.309
So this thing has an auto brake feature,
so

41
00:02:06.309 --> 00:02:08.673
it has to be constantly
detecting obstacles.

42
00:02:08.673 --> 00:02:11.063
So if there's an obstacle in front of it,
it will brake.

43
00:02:11.063 --> 00:02:13.603
Regardless of what the commands are,
that would get overwritten.

44
00:02:13.603 --> 00:02:18.917
So, it's gotta be constantly detecting
obstacles while it's showing its video and

45
00:02:18.917 --> 00:02:21.963
while it's responding
to the control buttons.

46
00:02:21.963 --> 00:02:23.133
Also, auto brake.

47
00:02:23.133 --> 00:02:26.963
So that's another thing has to happen
concurrently, you can be showing video.

48
00:02:26.963 --> 00:02:29.843
Somebody can be pressing buttons,
you can be responding to them.

49
00:02:29.843 --> 00:02:33.303
But if you detect an obstacle,
you gotta brake, automatically.

50
00:02:33.303 --> 00:02:36.173
Concurrently, with the video and
with everything else.

51
00:02:36.173 --> 00:02:38.843
So multiple tasks have to be
performed by this device.

52
00:02:38.843 --> 00:02:42.398
And in a situation like this, it is
helpful to have an operating system to

53
00:02:42.398 --> 00:02:44.923
handle the multiple tasks
to help you handle them.

54
00:02:44.923 --> 00:02:49.442
So I just talking about how they can
happen together, you get detect and

55
00:02:49.442 --> 00:02:51.713
auto brake cannot occur together.

56
00:02:51.713 --> 00:02:53.513
So if you detect, then you auto brake.

57
00:02:53.513 --> 00:02:56.933
They don't happen together, but
everything else can happen concurrently.

58
00:02:56.933 --> 00:02:58.187
So in a situation like this,

59
00:02:58.187 --> 00:03:00.763
you need to have multiple things
running at the same time.

60
00:03:00.763 --> 00:03:03.263
Multiple tasks being
performed at the same time.

61
00:03:03.263 --> 00:03:07.858
Now you could, as a programmer write
a relatively complicated program that does

62
00:03:07.858 --> 00:03:09.963
all these things at once and checks.

63
00:03:09.963 --> 00:03:13.563
While you're sending video data, it's also
checking to see if a button is pressed,

64
00:03:13.563 --> 00:03:15.513
it's also checking for
collisions and so on.

65
00:03:15.513 --> 00:03:20.002
But an operating system makes this easier,
because you can write each one of these

66
00:03:20.002 --> 00:03:24.183
tasks as a separate task and then let
the operating system inter-mix them.

67
00:03:24.183 --> 00:03:27.473
You can write one piece of code
that just sends video data.

68
00:03:27.473 --> 00:03:31.353
Another piece that serves as motion
buttons, another that takes obstacles.

69
00:03:31.353 --> 00:03:34.914
Another one that does auto brake and then
you can give them the operating system and

70
00:03:34.914 --> 00:03:37.973
the operating system will make sure
that they all run at the same time.

71
00:03:37.973 --> 00:03:41.723
You don't have to as a programmer,
you can write things separately.

72
00:03:41.723 --> 00:03:46.194
You can write the sending video data code
separately from the servicing motion

73
00:03:46.194 --> 00:03:49.648
button code and the operating
system can interweave them for

74
00:03:49.648 --> 00:03:52.913
you and that relieves a lot of burden for
the programmer.

75
00:03:52.913 --> 00:03:57.185
So the main job of an operating
system is to support a process or

76
00:03:57.185 --> 00:03:58.673
a task abstraction.

77
00:03:58.673 --> 00:04:00.955
I'm not gonna differentiate
them too well right now,

78
00:04:00.955 --> 00:04:02.603
but let's just talk about processes.

79
00:04:02.603 --> 00:04:07.003
A process is an instantiation of
a program, so a run of a program.

80
00:04:07.003 --> 00:04:10.447
So if you got a program,
PowerPoint, let's say,

81
00:04:10.447 --> 00:04:13.503
which is running on this
machine right here.

82
00:04:13.503 --> 00:04:16.003
When you're running PowerPoint,
it has a process running.

83
00:04:16.003 --> 00:04:19.642
And so say on my machine,
I open PowerPoint ten times,

84
00:04:19.642 --> 00:04:25.593
then I've got ten different processes all
in different instantiations of PowerPoint.

85
00:04:25.593 --> 00:04:28.820
So a process is like
a runtime instantiation,

86
00:04:28.820 --> 00:04:33.553
execution of a program and you can
have many of them at the same time.

87
00:04:33.553 --> 00:04:38.433
So the process has to have access to
the resources of the processor, the CPU.

88
00:04:38.433 --> 00:04:41.463
Meaning, the microcontroller itself,
the memory.

89
00:04:41.463 --> 00:04:44.343
A process needs to read from memory and
write to memory and so on.

90
00:04:44.343 --> 00:04:49.433
Other resources, the timers, the ADD
converters, the network access, all that.

91
00:04:49.433 --> 00:04:54.330
The processes all have to access that,
but they have to share that.

92
00:04:54.330 --> 00:04:58.230
So there might be only one ADD
converter in this microcontroller and

93
00:04:58.230 --> 00:05:01.500
there might be three processes that
need to use the ADD converter.

94
00:05:01.500 --> 00:05:05.952
So the operating system, part of its job
is to manage all these resources to make

95
00:05:05.952 --> 00:05:09.020
sure that everything gets used fairly,
one at a time.

96
00:05:09.020 --> 00:05:11.545
So if all three processes
wanna use this ADD converter,

97
00:05:11.545 --> 00:05:13.970
the operating system
essentially put them in a line.

98
00:05:13.970 --> 00:05:16.220
Says, okay, you were first,
so you go first.

99
00:05:16.220 --> 00:05:19.220
You're more high priority,
so you go second.

100
00:05:19.220 --> 00:05:21.600
The operating system's job is
to manage all these resources.

101
00:05:21.600 --> 00:05:26.100
The memory and the CPU and
I/O, ADD converters.

102
00:05:26.100 --> 00:05:30.258
All the resources in the hardware, the
operating system takes care of that and

103
00:05:30.258 --> 00:05:33.920
makes sure that the different processes
can use them in a fair order.

104
00:05:33.920 --> 00:05:34.480
Thank you.

105
00:05:34.480 --> 00:05:43.029
[MUSIC]