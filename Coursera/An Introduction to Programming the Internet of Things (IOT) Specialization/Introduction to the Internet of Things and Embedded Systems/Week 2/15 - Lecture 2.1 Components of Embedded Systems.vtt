WEBVTT

1
00:00:00.000 --> 00:00:09.860
[MUSIC]

2
00:00:09.860 --> 00:00:12.985
This lecture we'll talk about
components in embedded systems,

3
00:00:12.985 --> 00:00:14.300
the hardware components.

4
00:00:14.300 --> 00:00:17.439
Specifically we're gonna
talk about microcontrollers.

5
00:00:17.439 --> 00:00:18.599
We'll start talking
about microcontrollers.

6
00:00:18.599 --> 00:00:21.900
We'll go on in the next
lecture about that, too.

7
00:00:21.900 --> 00:00:25.080
The microcontroller is the center of
the action, so we're good to start there.

8
00:00:25.080 --> 00:00:29.460
That's where we'll be mostly focusing
this class really working with

9
00:00:29.460 --> 00:00:30.920
the microcontroller.

10
00:00:30.920 --> 00:00:34.939
So here's a picture of a board,
an Arduino.

11
00:00:34.939 --> 00:00:38.460
There's different versions
of Arduino boards.

12
00:00:38.460 --> 00:00:40.231
You have one or you may have one.

13
00:00:40.231 --> 00:00:42.190
This one, this particular board,

14
00:00:42.190 --> 00:00:46.430
you can see there's a big chip in there,
that black chip over there.

15
00:00:46.430 --> 00:00:48.890
And, like the bottom part of the board and

16
00:00:48.890 --> 00:00:50.756
that's actually
the microcontroller itself.

17
00:00:50.756 --> 00:00:54.593
And there are other devices on this board,
but the microcontroller is that main chip

18
00:00:54.593 --> 00:00:58.120
in there that's going to be executing
the programs that we're gonna write.

19
00:00:58.120 --> 00:01:00.071
So then note that the board,
the Arduino board,

20
00:01:00.071 --> 00:01:02.940
we'll go into great detail about
the arduino board in the next course.

21
00:01:02.940 --> 00:01:06.918
But the Arduino board has a lot of
other stuff on the board to support

22
00:01:06.918 --> 00:01:08.553
the microcontroller, but

23
00:01:08.553 --> 00:01:12.122
the microcontroller is that
particular chip right there.

24
00:01:12.122 --> 00:01:16.090
So a microcontroller is an integrated
circuit that executes a program.

25
00:01:16.090 --> 00:01:20.130
So this picture of a microcontroller
looks a little bit different than

26
00:01:20.130 --> 00:01:21.820
what we saw before.

27
00:01:21.820 --> 00:01:23.940
That's actually the bare silicon.

28
00:01:23.940 --> 00:01:27.320
So we're not gonna go into depth
about how these things are made.

29
00:01:27.320 --> 00:01:30.590
But these chips, they're made out
of silicon, the semiconductor.

30
00:01:30.590 --> 00:01:32.700
Mostly silicon, ours are silicon.

31
00:01:32.700 --> 00:01:35.800
And so there's a wafer, a small chip.

32
00:01:35.800 --> 00:01:39.090
That's actually what the tip
of a chip looks like.

33
00:01:39.090 --> 00:01:42.520
But that's not what you use,
it's not in a usable form yet.

34
00:01:42.520 --> 00:01:46.200
Before you can actually connect that to
anything, you have to actually wire it up.

35
00:01:46.200 --> 00:01:48.670
You have to package it,
what's called packaging.

36
00:01:48.670 --> 00:01:51.920
But that is a microcontroller,
and it will be packaged and

37
00:01:51.920 --> 00:01:53.930
then it's gonna be integrated
in the middle of the system.

38
00:01:53.930 --> 00:01:57.291
So, the microcontroller,
its job is to execute code and

39
00:01:57.291 --> 00:01:59.189
it's the center of the system.

40
00:01:59.189 --> 00:02:02.890
So, it reads inputs from other components
and it controls other components.

41
00:02:06.670 --> 00:02:12.770
Microcontroller versus microprocessor, so
that's, it's a terminology difference.

42
00:02:12.770 --> 00:02:16.485
Basically, the way I think about it,
I don't know what the formal definition,

43
00:02:16.485 --> 00:02:18.410
but I know how it's commonly thought of.

44
00:02:18.410 --> 00:02:22.030
Microcontroller is basically smaller and
weaker than the microprocessor.

45
00:02:22.030 --> 00:02:25.130
So when you say microprocessor,
you're thinking about what you'd find in

46
00:02:25.130 --> 00:02:29.090
a desktop, laptop,
Intel whatever, AMD whatever.

47
00:02:29.090 --> 00:02:33.070
A big general purpose processor,
general purpose digital signal processor.

48
00:02:33.070 --> 00:02:34.240
That's called a microprocessor.

49
00:02:34.240 --> 00:02:36.639
Basically, they're more heavy-duty.

50
00:02:36.639 --> 00:02:40.440
They can do, they're very fast,
have a lot of memory, and all this.

51
00:02:40.440 --> 00:02:43.880
A microcontroller is more slimmed down,
OK?

52
00:02:43.880 --> 00:02:49.110
More like what you would find in
an embedded system or in an IOT device.

53
00:02:49.110 --> 00:02:53.540
Because remember, these devices, they
have to be designed efficiently, right?

54
00:02:53.540 --> 00:02:54.900
We don't want overkill.

55
00:02:54.900 --> 00:02:56.580
We don't want to over design the system.

56
00:02:56.580 --> 00:03:01.068
We don't wanna buy the highest
end processor, quad core, 4 GHz,

57
00:03:01.068 --> 00:03:03.760
whatever the highest end is at the time.

58
00:03:03.760 --> 00:03:06.230
We don't wanna buy that if
we don't need it, right?

59
00:03:06.230 --> 00:03:10.150
For the task that we're performing,
maybe we're interacting with users, and

60
00:03:10.150 --> 00:03:12.160
these users are only so fast.

61
00:03:12.160 --> 00:03:13.790
So maybe you don't need a fast processor.

62
00:03:13.790 --> 00:03:16.379
So you want the cheapest
processor that will do the job.

63
00:03:16.379 --> 00:03:19.869
So you will go for a microcontroller,
which is slower and

64
00:03:19.869 --> 00:03:23.300
cheaper than whatever the high
end microprocessor is.

65
00:03:23.300 --> 00:03:28.420
So a microcontroller, generally,
think of it as a lower end microprocessor.

66
00:03:28.420 --> 00:03:29.830
Roughly, that's what it is.

67
00:03:29.830 --> 00:03:32.700
So it's slower, typical,

68
00:03:32.700 --> 00:03:37.140
by the way these speed numbers
are completely, they change over time.

69
00:03:37.140 --> 00:03:43.540
But a common ratio, so a microcontroller
might be 16 MHz, that's a slow one.

70
00:03:43.540 --> 00:03:47.320
You can go slower than that,
8 MHz, something like that, 4.

71
00:03:47.320 --> 00:03:49.880
All the way up to,
well I have 500 megahertz.

72
00:03:49.880 --> 00:03:53.613
500 megahertz is sort of a high end,
actually though if you look at say,

73
00:03:53.613 --> 00:03:57.200
Raspberry Pi, that's going 1 GHz I think,
so it's twice that.

74
00:03:57.200 --> 00:04:00.820
So this whole,
it's a shifting scale, this range.

75
00:04:00.820 --> 00:04:05.600
But generally microcontrollers are going
to slower than microprocessors and

76
00:04:05.600 --> 00:04:10.440
going to have less memory,
less of everything roughly.

77
00:04:10.440 --> 00:04:13.010
Yeah, lets make, fewer features, so
there are lots of other features and

78
00:04:13.010 --> 00:04:15.720
we'll talk more detail about
these in the next course.

79
00:04:15.720 --> 00:04:18.540
Specifically we'll talk about Arduinos and
Raspberry Pis and.

80
00:04:18.540 --> 00:04:21.480
The processors, the mircocontrollers,
that are on those devices.

81
00:04:21.480 --> 00:04:24.170
We'll talk in detail about
what features they have, but

82
00:04:24.170 --> 00:04:27.900
they are less than the features that you
find in your standard microprocessor for

83
00:04:27.900 --> 00:04:28.850
a desktop or laptop.

84
00:04:31.240 --> 00:04:32.570
So this picture,

85
00:04:32.570 --> 00:04:38.030
this shows a microprocessor after
the silicone has been packaged so

86
00:04:38.030 --> 00:04:41.920
that you see it is a black rectangle,
a black square in this case, right?

87
00:04:41.920 --> 00:04:44.690
That black is all packaging, and

88
00:04:44.690 --> 00:04:47.880
that packaging is basically
to keep the chip safe.

89
00:04:47.880 --> 00:04:49.570
Also, it cools it, so

90
00:04:49.570 --> 00:04:53.090
it helps propagate heat out
because these things get very hot.

91
00:04:53.090 --> 00:04:56.890
Also, you'll notice around the perimeter
of the chip, of the circuit.

92
00:04:56.890 --> 00:04:58.360
There are these pins, they're called pins.

93
00:04:58.360 --> 00:05:00.820
These little pieces of metal, essentially,

94
00:05:01.850 --> 00:05:06.200
that are used to wire it to the rest
of the components in the system.

95
00:05:06.200 --> 00:05:07.620
So if you look at that picture,

96
00:05:07.620 --> 00:05:10.420
it's a printed circuit board,
a little piece of one.

97
00:05:10.420 --> 00:05:14.260
Actually this is the back side of one,
so we can't see all the parts on it.

98
00:05:14.260 --> 00:05:16.960
But there are lots of other parts
that this microcontroller or

99
00:05:16.960 --> 00:05:21.420
microprocessor is wired to through
the printed circuit board.

100
00:05:21.420 --> 00:05:23.987
We're not gonna actually build printed
circuit boards in this class because

101
00:05:23.987 --> 00:05:25.379
that costs money we're not gonna spend.

102
00:05:25.379 --> 00:05:27.620
We're gonna do this type of thing,
this wiring, manually.

103
00:05:27.620 --> 00:05:30.574
But in a printed circuit board,
there are what are called traces,

104
00:05:30.574 --> 00:05:34.112
little pieces of metal that are drawn
onto the printed circuit board connecting

105
00:05:34.112 --> 00:05:35.240
different components.

106
00:05:35.240 --> 00:05:38.993
So the microcontroller is at the heart
of the system, it's connected to lots of

107
00:05:38.993 --> 00:05:42.420
different components that are in
the embedded system in the IoT device.

108
00:05:42.420 --> 00:05:45.640
And it takes inputs from them, and
it sends control data out to them.

109
00:05:49.200 --> 00:05:52.470
Now, microcontroller needs to be
programmed, it needs to run code.

110
00:05:52.470 --> 00:05:54.970
And that's what it does, it executes code.

111
00:05:54.970 --> 00:05:57.970
So you need to write
the program in some language.

112
00:05:57.970 --> 00:06:00.650
Now there are many languages
that you can write programs in.

113
00:06:00.650 --> 00:06:05.580
We will be using, when it comes to
Arduino we'll eventually be using C/C++.

114
00:06:05.580 --> 00:06:08.519
And then when it comes to
Raspberry Pi we'll be using Python.

115
00:06:08.519 --> 00:06:10.560
But you can use different languages.

116
00:06:10.560 --> 00:06:13.460
But at some point,
you have to write a program in a language.

117
00:06:13.460 --> 00:06:16.932
And then that program has to be
compiled or interpreted, and

118
00:06:16.932 --> 00:06:20.070
we'll talk about that in another lecture.

119
00:06:20.070 --> 00:06:21.640
And the result though,

120
00:06:21.640 --> 00:06:25.850
has to get transmitted on to
the memory of that microcontroller.

121
00:06:25.850 --> 00:06:28.170
So it has to be placed in
the memory of the microcontroller.

122
00:06:28.170 --> 00:06:31.090
So inside that microcontroller,
there is always some flash memory.

123
00:06:31.090 --> 00:06:33.638
Flash memory is just
a non-volatile memory,

124
00:06:33.638 --> 00:06:35.870
a memory that stays after you power off.

125
00:06:35.870 --> 00:06:39.286
So there's some memory and
that memory has to hold the program so

126
00:06:39.286 --> 00:06:43.220
that when it gets power, it starts
executing the program from the start.

127
00:06:44.790 --> 00:06:49.390
And we'll be doing that in the course
of this course and the next course and

128
00:06:49.390 --> 00:06:50.920
all the rest of the courses.

129
00:06:53.080 --> 00:06:55.910
So, the microcontroller
has to be programmed.

130
00:06:56.970 --> 00:07:01.980
So this term programming, in terms of a
microcontroller, means we write the code.

131
00:07:01.980 --> 00:07:08.130
So first you'll write your program on
some host platform, a laptop, desktop.

132
00:07:08.130 --> 00:07:09.920
Which is not the program
that you're gonna execute,

133
00:07:09.920 --> 00:07:13.040
not the chip that you're gonna execute
it on, not that microcontroller.

134
00:07:13.040 --> 00:07:16.640
You typically write the program
on a different host processor

135
00:07:16.640 --> 00:07:18.060
like your laptop, desktop.

136
00:07:18.060 --> 00:07:21.590
So you write the program there,
then you process the program, compile or

137
00:07:21.590 --> 00:07:24.730
interpret the program, or compile it and
interpretation will happen later.

138
00:07:24.730 --> 00:07:28.660
But you compile the program then that
final version of the compiled program has

139
00:07:28.660 --> 00:07:31.490
to get transferred to the microcontroller.

140
00:07:31.490 --> 00:07:34.550
Usually it's done through a piece of
hardware, an external piece of hardware.

141
00:07:34.550 --> 00:07:37.580
So, here we see in the middle,
there's a little board.

142
00:07:37.580 --> 00:07:40.462
That board is connected
by USB to the laptop, and

143
00:07:40.462 --> 00:07:43.626
the microcontroller chip
on the side of the diagram,

144
00:07:43.626 --> 00:07:48.220
that is plugged into the board, to this
slot that fits the microcontroller.

145
00:07:48.220 --> 00:07:52.362
You plug it into the board, then on
the laptop you would type, hit program,

146
00:07:52.362 --> 00:07:54.459
there's a button that hits program.

147
00:07:54.459 --> 00:07:58.980
You program it and it'll write the data
into the memory of that microcontroller.

148
00:07:58.980 --> 00:08:00.560
So that's one way to do it.

149
00:08:00.560 --> 00:08:04.889
Now that is not exactly how we're gonna
do it because we're using Arduino and

150
00:08:04.889 --> 00:08:05.760
Raspberry Pi.

151
00:08:05.760 --> 00:08:07.070
We'll show that later.

152
00:08:07.070 --> 00:08:09.470
Basically, the way an Arduino and
Raspberry Pi work,

153
00:08:09.470 --> 00:08:12.720
is that a lot of this programming
hardware that you see in there,

154
00:08:12.720 --> 00:08:16.140
that is built into the Arduino board and
to the Raspberry Pi board.

155
00:08:16.140 --> 00:08:19.870
So, we don't need a separate device
to program the microcontroller.

156
00:08:19.870 --> 00:08:22.580
That logic is basically
built right into the board.

157
00:08:22.580 --> 00:08:25.249
So we just take our Arduino or
Raspberry Pi and

158
00:08:25.249 --> 00:08:27.860
plug it into USB into the laptop/desktop.

159
00:08:27.860 --> 00:08:31.659
And we can program it directly.

160
00:08:31.659 --> 00:08:32.239
Thank you.

161
00:08:32.239 --> 00:08:38.340
[MUSIC]