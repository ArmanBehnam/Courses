WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.520 --> 00:00:16.785
This lecture, we'll talk about classes
a little bit more, just a little bit more.

3
00:00:16.785 --> 00:00:20.465
We just wanna give enough about classes
to express the minimum that we need to

4
00:00:20.465 --> 00:00:25.825
understand about classes in order to go
ahead and start using library functions,

5
00:00:25.825 --> 00:00:29.785
using Arduino libraries because
they refer to classes often.

6
00:00:29.785 --> 00:00:31.845
So, we'll just touch on
class a little bit more,

7
00:00:31.845 --> 00:00:33.598
just give the definition and
then we'll move on.

8
00:00:33.598 --> 00:00:36.607
Classes.

9
00:00:36.607 --> 00:00:40.319
So, classes basically bring data and

10
00:00:40.319 --> 00:00:44.385
functions together and give them a name.

11
00:00:44.385 --> 00:00:48.905
So, in this example right here
I define a class called X,

12
00:00:48.905 --> 00:00:51.390
you can see it says class X.

13
00:00:51.390 --> 00:00:53.759
Pardon my indentation,
it's a little so-so.

14
00:00:53.759 --> 00:00:54.730
Class X.

15
00:00:54.730 --> 00:00:56.200
And there's the curly brackets.

16
00:00:56.200 --> 00:00:58.060
Inside class X you see public.

17
00:00:58.060 --> 00:01:03.070
That just means that the data inside
there is public, anybody can see it.

18
00:01:03.070 --> 00:01:04.570
We don't need to focus on that.

19
00:01:04.570 --> 00:01:07.251
But inside there, inside class X,
I define two things.

20
00:01:07.251 --> 00:01:10.365
Int m, and then int mf.

21
00:01:10.365 --> 00:01:13.400
Now m is just a variable,
an integer, right?

22
00:01:13.400 --> 00:01:16.930
So now, what that's saying
is that inside this class X,

23
00:01:16.930 --> 00:01:19.770
every time I make a new
object of that class,

24
00:01:19.770 --> 00:01:24.400
it's going to have a variable called m all
to itself, and it's gonna be an integer.

25
00:01:25.430 --> 00:01:27.770
Now for the next line, it says int mf.

26
00:01:27.770 --> 00:01:30.290
But notice that the mf
has parentheses after it.

27
00:01:30.290 --> 00:01:32.670
You know,
int v inside parentheses after it.

28
00:01:32.670 --> 00:01:36.880
Since it has those parentheses, the
machine probably knows that is a function.

29
00:01:36.880 --> 00:01:41.040
So, m is a variable, but
mf is a function that I'm defining.

30
00:01:41.040 --> 00:01:45.270
So I say int mf, and it takes
an integer v, it returns an integer.

31
00:01:45.270 --> 00:01:49.820
And then in curly brackets after that,
you can see the three lines of code.

32
00:01:49.820 --> 00:01:54.560
Int old = m; m = v; return old; right?

33
00:01:54.560 --> 00:01:57.760
So, inside this class X,
I've defined two things.

34
00:01:57.760 --> 00:02:02.730
A variable m that's associated
with this class X and every object

35
00:02:02.730 --> 00:02:07.660
of the class X and then a function, mf,
which is associated with the class X.

36
00:02:07.660 --> 00:02:10.390
And so I've defined the class up there.

37
00:02:10.390 --> 00:02:15.090
Now then the last three lines up
there are actually using the class.

38
00:02:15.090 --> 00:02:18.150
So let's take that next line, X var:,

39
00:02:18.150 --> 00:02:23.300
what that does is it just declares
a new object of type of class X.

40
00:02:23.300 --> 00:02:26.930
Okay?
So, you know how I would say int var and

41
00:02:26.930 --> 00:02:28.540
then it would make var an integer.

42
00:02:28.540 --> 00:02:32.710
Well by saying X var,
I'm making var an object of class X.

43
00:02:32.710 --> 00:02:37.720
So, that means, when I make that,
I'm implicitly making a variable m.

44
00:02:37.720 --> 00:02:40.860
Cuz var is a new object of that class,
so it's gotta have its variable m.

45
00:02:40.860 --> 00:02:44.600
So there's going to be some m variable in
there that's dedicated to that object.

46
00:02:44.600 --> 00:02:46.930
Okay, even though I
don't explicitly say it.

47
00:02:46.930 --> 00:02:49.485
Now in the next line, I say var.m = 7.

48
00:02:49.485 --> 00:02:54.470
So what I'm doing there, is I'm taking
that m, that's associated with var,

49
00:02:54.470 --> 00:02:57.460
the new object that I just created,
and setting it equal to 7.

50
00:02:57.460 --> 00:03:02.000
So note that I don't just say m = 7.

51
00:03:02.000 --> 00:03:05.000
Because if I said that, the machine
wouldn't know which m I'm talking about.

52
00:03:05.000 --> 00:03:08.120
I say var.m = 7, okay, so then it knows,

53
00:03:08.120 --> 00:03:11.290
okay the m associated with this
var object, that's gonna equal 7.

54
00:03:11.290 --> 00:03:15.840
And in the next line,
I define a new variable, z,

55
00:03:15.840 --> 00:03:19.480
and I say z = var.mf(9), right?

56
00:03:19.480 --> 00:03:21.750
So, in that case I'm calling a function,

57
00:03:21.750 --> 00:03:24.580
mf is a function that's
associated with that class.

58
00:03:24.580 --> 00:03:28.930
So I say var.mf, tells me, oh I want
the function associated with this class

59
00:03:28.930 --> 00:03:31.040
that var is a part of, that mf function.

60
00:03:31.040 --> 00:03:33.960
It calls that function,
passes the argument 9 to it, and

61
00:03:33.960 --> 00:03:37.730
which returns an integer, and
then z is set equal to that integer.

62
00:03:37.730 --> 00:03:40.530
So, just showing an example
where I'm defining the variable,

63
00:03:40.530 --> 00:03:45.340
assigning it a value, and then I'm calling
a function inside the class as well.

64
00:03:45.340 --> 00:03:48.930
So, the declaration of
the variable creates an object.

65
00:03:48.930 --> 00:03:52.980
So when I say X var,
it creates an object of that class, and

66
00:03:52.980 --> 00:03:55.050
we're calling it var of that class X.

67
00:03:56.150 --> 00:03:58.620
Then, the dot operator
is very important here,

68
00:03:58.620 --> 00:04:01.530
the dot operator is used
to access the members.

69
00:04:01.530 --> 00:04:03.030
So, when you talk about a class and

70
00:04:03.030 --> 00:04:06.550
it's members, the members are the things
that are part of the class.

71
00:04:06.550 --> 00:04:10.190
So for instance in our class,
we can say it has two members.

72
00:04:10.190 --> 00:04:13.300
m, which is a variable in there and
mf, which is a function in there.

73
00:04:13.300 --> 00:04:15.260
So this class we could
say has two members.

74
00:04:15.260 --> 00:04:18.360
And the way you refer to the members
is with this dot operator.

75
00:04:18.360 --> 00:04:20.590
So, the data in the function you refer
to them with the dot operator and

76
00:04:20.590 --> 00:04:22.760
you see we do that var.m and

77
00:04:22.760 --> 00:04:26.840
what's to the left of the dot tells you
this is where you're gonna get the m from.

78
00:04:26.840 --> 00:04:29.226
You're gonna get it from var, var is m.

79
00:04:29.226 --> 00:04:31.239
And then var.mf.

80
00:04:31.239 --> 00:04:33.640
Okay, look for var,
the class that's part of.

81
00:04:33.640 --> 00:04:35.138
That's the mf that we're gonna use.

82
00:04:35.138 --> 00:04:38.660
So the dot operator is important for
referencing these things.

83
00:04:39.970 --> 00:04:41.510
Functions can be defined inside the class.

84
00:04:41.510 --> 00:04:42.530
So we're doing that here.

85
00:04:42.530 --> 00:04:46.508
We define the variables inside the class,
int m, but we can also define functions.

86
00:04:46.508 --> 00:04:48.750
Int mf or any number of
functions that we wanna define.

87
00:04:51.100 --> 00:04:54.560
Now, the reason why we're talking about
classes at all is because classes

88
00:04:54.560 --> 00:04:56.270
are often used in libraries.

89
00:04:56.270 --> 00:05:00.990
So when you get a library, an Arduino
library, typically they give you

90
00:05:00.990 --> 00:05:06.650
a set of classes, and each class contains
a bunch of functions that you wanna use.

91
00:05:06.650 --> 00:05:10.550
And so you have to refer to these
functions based by the class name often,

92
00:05:10.550 --> 00:05:11.770
or an object name.

93
00:05:11.770 --> 00:05:16.910
So what I'm showing down
here is like Ethernet.begin.

94
00:05:16.910 --> 00:05:20.200
Now we haven't gotten to this yet,
but there's an ethernet

95
00:05:20.200 --> 00:05:24.800
library that you can get from Arduino that
you can use with an ethernet shield, and

96
00:05:24.800 --> 00:05:26.800
this library, it has a begin function.

97
00:05:26.800 --> 00:05:29.110
When you want to initialize
the ethernet adapter,

98
00:05:29.110 --> 00:05:31.050
you have to call this begin function.

99
00:05:31.050 --> 00:05:32.600
Call begin right there.

100
00:05:32.600 --> 00:05:36.040
And you can't just call begin,
you have to say ethernet.begin,

101
00:05:36.040 --> 00:05:40.700
because it's from this ethernet
class that comes with the library.

102
00:05:40.700 --> 00:05:42.060
Next I have serial.begin.

103
00:05:42.060 --> 00:05:45.520
So by the way,
begin is the extremely common name for

104
00:05:45.520 --> 00:05:47.290
the first function in this libraries.

105
00:05:47.290 --> 00:05:51.200
Right, the first thing you do to set
up the library, you often call begin.

106
00:05:51.200 --> 00:05:53.650
So, there's another library
called the Serial library,

107
00:05:53.650 --> 00:05:58.180
if I wanna use a Serial interface, which
we will cover, and that also has a begin.

108
00:05:58.180 --> 00:05:59.360
So, I can't just say begin.

109
00:05:59.360 --> 00:06:00.870
I have to say Serial.begin,

110
00:06:00.870 --> 00:06:05.215
to say I want to begin from
the Serial Class, Serial library.

111
00:06:06.295 --> 00:06:08.565
Now notice that Ethernet library and

112
00:06:08.565 --> 00:06:11.665
Serial library both have begin
functions associated with them.

113
00:06:11.665 --> 00:06:14.615
And in order for the machine, the
compiler, to know which one I'm referring

114
00:06:14.615 --> 00:06:18.635
to, I have to prefix it with the name of
the library or the name of the class.

115
00:06:18.635 --> 00:06:21.477
So, Ethernet.begin, Serial.begin.

116
00:06:22.530 --> 00:06:24.160
We did the same thing with the print.

117
00:06:24.160 --> 00:06:26.697
You can have a Serial.print and
we'll cover that,

118
00:06:26.697 --> 00:06:29.012
where it prints something
on the serial cable.

119
00:06:29.012 --> 00:06:32.356
But then, client.print, client is
the name of an object that you can

120
00:06:32.356 --> 00:06:36.394
create inside the ethernet library and
that does something completely different.

121
00:06:36.394 --> 00:06:41.050
Client.print actually takes the word
Hello and sends it as a message.

122
00:06:41.050 --> 00:06:41.620
Okay?

123
00:06:41.620 --> 00:06:43.500
On the internet.

124
00:06:43.500 --> 00:06:46.360
So, those two prints do
completely different things.

125
00:06:46.360 --> 00:06:48.450
And you have to prefix a print
with the name of the object and

126
00:06:48.450 --> 00:06:51.490
the name of the class where
the function comes from.

127
00:06:51.490 --> 00:06:54.770
So, this is why we're actually
learning about classes at all, is so

128
00:06:54.770 --> 00:06:58.832
that you understand what you're doing when
you make these calls to library functions,

129
00:06:58.832 --> 00:07:00.620
Arduino libraries.

130
00:07:00.620 --> 00:07:03.030
So, we don't need to
know a lot about classes.

131
00:07:03.030 --> 00:07:05.450
We will not define classes in this course.

132
00:07:06.450 --> 00:07:09.200
We'll just use predefined classes
that come with the library.

133
00:07:09.200 --> 00:07:12.390
So we'll use the classes that are defined
in these libraries, like Ethernet or

134
00:07:12.390 --> 00:07:14.160
serial or whatever the libraries are.

135
00:07:14.160 --> 00:07:16.439
And we'll hit these as we
go through the lectures,

136
00:07:16.439 --> 00:07:19.939
we'll talk more about different libraries
and the classes that they define.

137
00:07:19.939 --> 00:07:20.937
Thank you.

138
00:07:20.937 --> 00:07:29.449
[MUSIC]