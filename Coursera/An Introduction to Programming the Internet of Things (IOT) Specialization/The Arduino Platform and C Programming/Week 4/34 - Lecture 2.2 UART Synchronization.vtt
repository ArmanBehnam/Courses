WEBVTT

1
00:00:00.000 --> 00:00:07.420
[MUSIC]

2
00:00:11.658 --> 00:00:14.066
We're continuing to talk
about UART protocol and

3
00:00:14.066 --> 00:00:17.290
we're gonna talk right here about
how synchronization happens.

4
00:00:17.290 --> 00:00:21.000
So the transmitter and the receiver,
they have to be synchronized.

5
00:00:21.000 --> 00:00:24.350
That is the receiver has to know when
to expect data from the transmitter.

6
00:00:25.360 --> 00:00:29.530
And it has to be fairly accurate
about the timing that it expects.

7
00:00:29.530 --> 00:00:33.040
And UART is an asynchronous
protocol meaning it has no clock.

8
00:00:33.040 --> 00:00:34.590
Normally, if you have
a synchronous protocol,

9
00:00:34.590 --> 00:00:36.130
the clock is how it's synchronized.

10
00:00:36.130 --> 00:00:38.680
When it sees the rising edge,
it knows data will be sent.

11
00:00:38.680 --> 00:00:40.240
But this doesn't have a clock.

12
00:00:40.240 --> 00:00:42.870
So it has to figure out when data
is gonna be sent another way.

13
00:00:45.280 --> 00:00:48.780
So UART synchronization.

14
00:00:48.780 --> 00:00:52.345
So what it means is that
the receiver has to know when it's

15
00:00:52.345 --> 00:00:56.130
looking at that value on that wire,
that serial wire.

16
00:00:56.130 --> 00:00:58.170
It has to know which bit it's reading.

17
00:00:58.170 --> 00:01:01.290
If it's suppose to read and
what bit it's reading.

18
00:01:01.290 --> 00:01:02.600
It has to count the bits.

19
00:01:02.600 --> 00:01:05.660
So for instance say,
it knows that you're sending 8 bits.

20
00:01:05.660 --> 00:01:06.630
It has to know okay now,

21
00:01:06.630 --> 00:01:10.840
is when I should sample bit number one and
then now is when bit number two happen.

22
00:01:10.840 --> 00:01:13.010
Now is when bit number three
should happen and so on.

23
00:01:13.010 --> 00:01:15.950
So it has to know when to
expect each bit to arrive, so

24
00:01:15.950 --> 00:01:20.990
it know when to sample the signal
on that wire to get a 1 or a 0.

25
00:01:20.990 --> 00:01:23.570
If it gets out of sync like that,
that's synchronized.

26
00:01:23.570 --> 00:01:27.530
If the receiver knows when to expect
each bit sent from the transmitter.

27
00:01:27.530 --> 00:01:30.140
If it's not synchronized properly then

28
00:01:30.140 --> 00:01:32.670
the receiver will not expect
the bits at the right time.

29
00:01:32.670 --> 00:01:33.819
It'll receive the wrong data.

30
00:01:34.880 --> 00:01:36.210
So here's an example.

31
00:01:36.210 --> 00:01:38.380
Right here we're show
a little timing diagram.

32
00:01:38.380 --> 00:01:41.060
And we're really showing
three bits being sent.

33
00:01:41.060 --> 00:01:43.799
There's a 1, there's a 0 and
there's a stop bit.

34
00:01:43.799 --> 00:01:45.119
That's what should be sent.

35
00:01:45.119 --> 00:01:47.210
That's what the transmitter
is actually sending.

36
00:01:47.210 --> 00:01:51.650
Now a stop bit is high, the stop bit is at
the end where the signal is actually high.

37
00:01:51.650 --> 00:01:54.660
So it should be sending a 1
then a 0 then a stop bit.

38
00:01:54.660 --> 00:01:56.650
These are just the last
bits of communication.

39
00:01:56.650 --> 00:01:58.540
So I'm just showing the bits 7 and

40
00:01:58.540 --> 00:02:04.160
8 of the last two bits of
say an 8 bit set of data.

41
00:02:04.160 --> 00:02:08.500
And then after the last two bits,
you're gonna expect to stop bits.

42
00:02:08.500 --> 00:02:13.400
So what should be, the expected bits as
they are correctly observed would be a bit

43
00:02:13.400 --> 00:02:18.350
7 would be 1, bit 8 would be a 0 and
then the stop bit is the next bit and

44
00:02:18.350 --> 00:02:21.690
the signal is high and
it would say oh okay, this is a stop.

45
00:02:21.690 --> 00:02:25.025
And if that happened, if the receiver
correctly knew when to observe

46
00:02:25.025 --> 00:02:27.564
those signals,
it would receive the correct bits.

47
00:02:27.564 --> 00:02:29.860
It would receive a 1 for
bit 7, a 0 for the bit 8.

48
00:02:29.860 --> 00:02:33.220
And then it will receive high at the stop
bit and that means that it's working.

49
00:02:33.220 --> 00:02:34.480
That means that is correct.

50
00:02:34.480 --> 00:02:35.690
That is a correct assumption.

51
00:02:35.690 --> 00:02:37.190
The stop bit has to be high.

52
00:02:37.190 --> 00:02:40.410
If the stop bit is low then there's
a problem with the communication.

53
00:02:40.410 --> 00:02:45.350
So if the receiver knows exactly
when to sample the signals,

54
00:02:45.350 --> 00:02:47.360
it will receive the right bits.

55
00:02:47.360 --> 00:02:51.070
But let's say the receiver is off,
it is not synchronized properly.

56
00:02:51.070 --> 00:02:54.640
It started sampling earlier, too early.

57
00:02:54.640 --> 00:02:59.640
So if it started sampling too early, it
might sample the values at the wrong time.

58
00:02:59.640 --> 00:03:02.400
So when that one comes through
instead of thinking oh,

59
00:03:02.400 --> 00:03:05.810
this is bit 7,
it might think it's already on bit 8.

60
00:03:05.810 --> 00:03:09.421
And if that were the case then when that
0 comes through, instead of thinking it's

61
00:03:09.421 --> 00:03:12.947
bit 8, it would think that that was the
stop bit since it's the one after bit 8.

62
00:03:12.947 --> 00:03:15.553
And then it would read a 0 for
the stop bit and

63
00:03:15.553 --> 00:03:18.600
that cause a failure because
a stop bit has to be 1.

64
00:03:18.600 --> 00:03:23.100
So if it was not synchronized
right then it could read a 0 for

65
00:03:23.100 --> 00:03:26.440
the stop bit, that would cause a failure
and will loose the whole byte and

66
00:03:26.440 --> 00:03:27.540
that byte would have to be resent.

67
00:03:28.780 --> 00:03:32.302
So what I'm saying here is that
the receiver has to be synchronized with

68
00:03:32.302 --> 00:03:33.247
the transmitter.

69
00:03:33.247 --> 00:03:36.440
It has to know when the transmitter
is gonna send a byte, a bit.

70
00:03:36.440 --> 00:03:38.280
It has to know which bit is being sent.

71
00:03:38.280 --> 00:03:41.690
So it needs to synchronize on
the beginning of the communication.

72
00:03:41.690 --> 00:03:44.419
So that's what the start bit is for.

73
00:03:44.419 --> 00:03:47.560
So imprecise start time.

74
00:03:47.560 --> 00:03:51.090
If it gets the start time wrong
then it can send the wrong,

75
00:03:51.090 --> 00:03:53.480
it'll receive the wrong bits and
maybe fail in its communication.

76
00:03:54.630 --> 00:03:57.600
So the start bit is how
synchronization happens.

77
00:03:57.600 --> 00:04:02.021
So the start bit remember, at the
beginning before you've actually started

78
00:04:02.021 --> 00:04:04.207
sending anything, the wire is high.

79
00:04:04.207 --> 00:04:07.420
The single wire is gonna be high.

80
00:04:07.420 --> 00:04:10.191
The receiver knows its
transmission is gonna start.

81
00:04:10.191 --> 00:04:13.740
The start bit is happening
when it goes from high to low.

82
00:04:13.740 --> 00:04:18.140
So when there's a falling edge on
that signal then it says okay,

83
00:04:18.140 --> 00:04:19.970
this is the start bit.

84
00:04:19.970 --> 00:04:23.180
Now is when I have to start
synchronizing myself.

85
00:04:24.370 --> 00:04:25.900
Now, we've got two examples.

86
00:04:25.900 --> 00:04:29.220
Two pictures up here,
it's like timing diagrams.

87
00:04:29.220 --> 00:04:32.290
And what they're showing is
two different situations.

88
00:04:32.290 --> 00:04:35.062
Now remember that this UART,
it was made a long time ago.

89
00:04:35.062 --> 00:04:37.900
It's made to be robust
in the face of noise.

90
00:04:37.900 --> 00:04:41.830
So noise, you get all kinds of
electromagnetic noise on these signals.

91
00:04:41.830 --> 00:04:45.593
So this signal maybe it's supposed to be
high because you're not communicating but

92
00:04:45.593 --> 00:04:46.971
there's some kind of glitch.

93
00:04:46.971 --> 00:04:47.773
Some kind of noise,

94
00:04:47.773 --> 00:04:51.130
some kind of electromagnetic noise which
forces the signal to go low, mistakenly.

95
00:04:52.420 --> 00:04:55.900
Now when that happens, if the receiver
is too quick, it might say oh,

96
00:04:55.900 --> 00:05:00.320
the signal went low, I guess communication
is starting but maybe it's just a glitch,

97
00:05:00.320 --> 00:05:02.830
a temporary bounce down.

98
00:05:02.830 --> 00:05:05.670
And it shouldn't consider
that to be a real signal.

99
00:05:06.770 --> 00:05:09.420
It should ignore a short glitch.

100
00:05:09.420 --> 00:05:13.987
So what happens is, it's gonna measure
the time that the signal is low.

101
00:05:13.987 --> 00:05:16.010
So on the left, it's just a glitch.

102
00:05:16.010 --> 00:05:18.570
The signal goes low but
for a very short time.

103
00:05:18.570 --> 00:05:22.130
If it's too short then the receiver
should say oh, that's not real,

104
00:05:22.130 --> 00:05:23.810
that's not really a start.

105
00:05:23.810 --> 00:05:27.410
But on the other hand on the right,
if this signal goes low and stays low for

106
00:05:27.410 --> 00:05:30.620
a significant amount of time
then the receiver should say oh,

107
00:05:30.620 --> 00:05:33.750
this is a real start I need
to synchronize myself.

108
00:05:33.750 --> 00:05:37.940
So the receiver has to be able to
distinguish between a glitch for

109
00:05:37.940 --> 00:05:41.370
a start which is not a real
start signal and a real start.

110
00:05:41.370 --> 00:05:44.030
So it hs to count how long it stays low.

111
00:05:44.030 --> 00:05:47.370
Now see those little up arrows
on the timing diagrams?

112
00:05:47.370 --> 00:05:48.890
Those are the sampling points.

113
00:05:48.890 --> 00:05:53.220
Those are the points in time where
the receiver is checking the signal value.

114
00:05:53.220 --> 00:05:57.740
And you'll notice with the glitch, it goes
low for only three sample sample points.

115
00:05:57.740 --> 00:06:01.480
So the receiver would say oh, it's five or
rather low for three sample points.

116
00:06:01.480 --> 00:06:02.870
That's not enough.

117
00:06:02.870 --> 00:06:05.580
Where if you look at the one
where the startup is detected,

118
00:06:05.580 --> 00:06:08.899
the one on the right, it's low for
I don't know eight sample points and

119
00:06:08.899 --> 00:06:10.797
it would say okay, that's efficient.

120
00:06:10.797 --> 00:06:12.620
So that's what's gonna
happen on the receiver end.

121
00:06:12.620 --> 00:06:16.820
It's gonna sample over and over,
faster than the baud rate.

122
00:06:16.820 --> 00:06:22.285
Typically 16 times faster at least,
and it's gonna count how many times

123
00:06:22.285 --> 00:06:27.584
to find the start bit, it's gonna
count how many samples it's low for.

124
00:06:27.584 --> 00:06:31.310
If it's low for enough samples then
it says yes, that is a real start.

125
00:06:31.310 --> 00:06:34.470
So detection of the start bit is
used to synchronize the receiver and

126
00:06:34.470 --> 00:06:38.180
the transmitter and it's synchronized
based on the falling edge

127
00:06:38.180 --> 00:06:41.140
of the signal and it recognizes
the start bit based on the falling edge.

128
00:06:42.900 --> 00:06:46.500
The following 0 must be of
sufficiently long duration

129
00:06:46.500 --> 00:06:48.650
to screen out any kind of noise.

130
00:06:48.650 --> 00:06:53.809
The receiver has to sample faster than
the baud rate, typically 16 times faster.

131
00:06:53.809 --> 00:06:54.947
That's common.

132
00:06:54.947 --> 00:06:59.830
The start bit Is indicated by a 0 for
at least half a period.

133
00:06:59.830 --> 00:07:03.250
So the length of the period depends
on the length of your baud rate.

134
00:07:03.250 --> 00:07:04.877
But let's say,
you're using a baud rate of 9600 baud.

135
00:07:04.877 --> 00:07:09.460
If you remember, the period length
of that is 104 microseconds.

136
00:07:10.640 --> 00:07:15.030
So the hold period is 104 microseconds,
half a period would be 52,

137
00:07:15.030 --> 00:07:15.850
52 microseconds.

138
00:07:17.560 --> 00:07:21.620
So the receiver,
if it sees that signal go down load for

139
00:07:21.620 --> 00:07:25.985
52 microseconds then it says okay,
this is a real start signal.

140
00:07:25.985 --> 00:07:27.963
We're really starting communication,

141
00:07:27.963 --> 00:07:30.849
I need to synchronize myself
now against that falling edge.

142
00:07:30.849 --> 00:07:34.732
Where if it's less than 52 microseconds
then it says oh, that's just a glitch,

143
00:07:34.732 --> 00:07:35.623
I can ignore that.

144
00:07:35.623 --> 00:07:36.532
Thank you.

145
00:07:36.532 --> 00:07:40.519
[MUSIC]