WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.754 --> 00:00:14.825
In this lecture we'll start talking about
some of the debug environments that exist.

3
00:00:14.825 --> 00:00:17.469
Really a couple of debug
environments that are commonly used.

4
00:00:18.700 --> 00:00:21.292
Arduino won't give us access
to these environments.

5
00:00:21.292 --> 00:00:25.060
But it's sort of important for
making IOT devices in general that

6
00:00:25.060 --> 00:00:28.019
you understand some of
these debug environments.

7
00:00:28.019 --> 00:00:31.043
Because if you're gonna make some bigger
ones, you're gonna use some of these.

8
00:00:33.319 --> 00:00:35.840
So remote debugger,
this is a common type of environment.

9
00:00:36.900 --> 00:00:39.280
You could see there are basically
two components is a host.

10
00:00:39.280 --> 00:00:42.350
Host computer up there, there's a target.

11
00:00:42.350 --> 00:00:45.010
The target is the target
platform that we're dealing with.

12
00:00:45.010 --> 00:00:46.790
So, in our case that
would be the Arduino or

13
00:00:46.790 --> 00:00:50.030
whatever whatever board
we want to work with.

14
00:00:50.030 --> 00:00:53.970
So, the host computer is where
you as a user, as a programmer.

15
00:00:53.970 --> 00:00:55.700
Actually interface with
the debugging environment.

16
00:00:55.700 --> 00:00:58.940
So, you are using the typing
debug commands into the host.

17
00:00:58.940 --> 00:01:01.580
Those are getting transmitted
to the target over some kind of

18
00:01:01.580 --> 00:01:02.310
communication link.

19
00:01:03.440 --> 00:01:09.800
So the frontend is running on the host
that you, the programmer, are accessing.

20
00:01:09.800 --> 00:01:13.460
Now, there's a debug monitor,
some code, hidden on the target.

21
00:01:13.460 --> 00:01:15.790
I say hidden,
hidden like a bootloader, okay?

22
00:01:15.790 --> 00:01:20.080
It's on the target, so
there it has to be a debug monitor code

23
00:01:20.080 --> 00:01:22.860
that's running on the platform.

24
00:01:22.860 --> 00:01:24.200
On the Arduino, lets say.

25
00:01:24.200 --> 00:01:27.750
So it's typically triggered
when some debug event occurs.

26
00:01:27.750 --> 00:01:30.810
So debug event,
there are a lot of possible debug events.

27
00:01:30.810 --> 00:01:32.870
One debug event is a break point,
let's say.

28
00:01:32.870 --> 00:01:35.955
You set a break point, say at the host,
you said okay break on line 23,

29
00:01:35.955 --> 00:01:36.835
you select that.

30
00:01:36.835 --> 00:01:41.585
And then you run the code, and
when line 23 happens, the target stops.

31
00:01:41.585 --> 00:01:45.627
It recognizes the debug event and
it stops, and then it stops running.

32
00:01:45.627 --> 00:01:49.185
And then it goes back to the host and
lets the host have control again.

33
00:01:49.185 --> 00:01:50.925
So that's a typical debug event.

34
00:01:50.925 --> 00:01:53.715
Often the host program,

35
00:01:53.715 --> 00:01:57.110
the front end will have some kind of
a way you can force a debug event.

36
00:01:57.110 --> 00:02:00.780
You hit Ctrl+C, let's say,
or click on a button,

37
00:02:00.780 --> 00:02:04.020
the Stop button, in a GUI built on a host.

38
00:02:04.020 --> 00:02:07.940
And then that sends a command to the
target to stop execution at that point.

39
00:02:09.480 --> 00:02:10.840
So you get a Debug Monitor.

40
00:02:10.840 --> 00:02:13.770
And the Debug Monitor is the code
running on the target that's talking

41
00:02:13.770 --> 00:02:15.160
to the host, okay.

42
00:02:15.160 --> 00:02:18.250
So there's a communication going on
between the target and the host.

43
00:02:18.250 --> 00:02:21.510
And that communication has to be managed
by some code running on the target.

44
00:02:21.510 --> 00:02:24.600
So that Code running on
the target is the debug monitor.

45
00:02:24.600 --> 00:02:27.820
And it will stop execution
of the code on the target.

46
00:02:27.820 --> 00:02:31.170
It will monitor the communication
link to see commands from the host.

47
00:02:31.170 --> 00:02:33.640
It'll also provides debug
information to the host.

48
00:02:33.640 --> 00:02:35.940
So for instance, if the host you type,

49
00:02:35.940 --> 00:02:39.730
at the host you type print
the contents of variable X.

50
00:02:39.730 --> 00:02:42.670
That command will be sent over
the communication interface and

51
00:02:42.670 --> 00:02:44.970
then the debug monitor will receive it.

52
00:02:44.970 --> 00:02:48.256
Will retrieve the value of x and
send it back over the communication link.

53
00:02:48.256 --> 00:02:52.770
So the host front-end is actually
talking to this debug monitor.

54
00:02:52.770 --> 00:02:56.100
Which is running on your Arduino, but

55
00:02:56.100 --> 00:03:01.650
along with whatever the actual code is,
the functional code, the application code.

56
00:03:01.650 --> 00:03:03.429
There's a debug monitor
running in the background.

57
00:03:05.420 --> 00:03:08.130
All right, hitting a breakpoint,
receiving a request from the host,

58
00:03:08.130 --> 00:03:10.460
these are the type of things
that are debug events.

59
00:03:10.460 --> 00:03:14.682
That typically cause the execution
of the target to stop and

60
00:03:14.682 --> 00:03:17.137
allow interaction with the host.

61
00:03:19.738 --> 00:03:21.890
All right, and the monitor
maintains a communication link.

62
00:03:21.890 --> 00:03:24.060
The monitor and
the host together maintain that link.

63
00:03:26.330 --> 00:03:29.510
So, advantages of this type of set up.

64
00:03:30.800 --> 00:03:32.355
So, you get good run control.

65
00:03:32.355 --> 00:03:33.579
[SOUND] You can stop,

66
00:03:33.579 --> 00:03:37.186
you can set breakpoints to stop
execution when you want to.

67
00:03:37.186 --> 00:03:40.930
You can actually force execution to
stop from the host, you hit a button and

68
00:03:40.930 --> 00:03:43.140
it'll send the command to stop execution.

69
00:03:43.140 --> 00:03:44.180
So, you get good run control.

70
00:03:45.900 --> 00:03:48.310
The monitor can alter memory and
registers.

71
00:03:48.310 --> 00:03:52.170
All right, so the debug monitor is
code that's running on the Arduino.

72
00:03:52.170 --> 00:03:55.360
Since it's running on the Arduino,
it has direct access to the registers and

73
00:03:55.360 --> 00:03:56.750
the memory on the Arduino.

74
00:03:56.750 --> 00:04:01.650
So now with the debug monitor,
you can actually control the registers.

75
00:04:01.650 --> 00:04:06.240
You have control ability of the registers
and the memory on the Arduino.

76
00:04:06.240 --> 00:04:08.650
And also you can read it,
you have observability of those too.

77
00:04:10.720 --> 00:04:12.870
Perfect functional accuracy,
so by that I mean.

78
00:04:12.870 --> 00:04:14.570
That the code when it executes,

79
00:04:14.570 --> 00:04:17.140
will run exactly the way it
would on a real target platform.

80
00:04:17.140 --> 00:04:19.280
Because it is running on
a real target platform.

81
00:04:19.280 --> 00:04:20.720
So you get perfect functional accuracy,

82
00:04:20.720 --> 00:04:23.590
unlike say you had a simulator or
something like that.

83
00:04:23.590 --> 00:04:25.550
You don't have to worry
about functional accuracy.

84
00:04:27.520 --> 00:04:28.330
Disadvantages.

85
00:04:29.350 --> 00:04:33.010
So these debug interrupts,
these debug events that

86
00:04:33.010 --> 00:04:37.440
allow interaction with the host,
those things alter the timing.

87
00:04:37.440 --> 00:04:39.000
They stop, mess with the timing,

88
00:04:39.000 --> 00:04:41.930
they stop the execution of the target,
altering the timing.

89
00:04:41.930 --> 00:04:46.150
And so you can't get real time
monitoring using a system like this.

90
00:04:46.150 --> 00:04:50.280
So, depending on how important timing
is to you, this may or may not work.

91
00:04:50.280 --> 00:04:52.170
This may or may not be sufficient.

92
00:04:52.170 --> 00:04:54.340
Now even for timing critical systems,

93
00:04:54.340 --> 00:04:59.100
using a remote debug setup
is a good idea at first.

94
00:04:59.100 --> 00:05:01.690
But eventually you need
to test the timing too so

95
00:05:01.690 --> 00:05:03.600
this type of setup wouldn't be as useful.

96
00:05:05.590 --> 00:05:08.680
And you need a spare communication
channel, so the host and

97
00:05:08.680 --> 00:05:11.260
the target are speaking over
some communication channel.

98
00:05:11.260 --> 00:05:13.390
So you need an extra
communication channel,

99
00:05:13.390 --> 00:05:15.190
one that's not being used functionally.

100
00:05:15.190 --> 00:05:18.152
So if the application is
already using the ethernet.

101
00:05:18.152 --> 00:05:21.650
The programs using it for
whatever the application is.

102
00:05:21.650 --> 00:05:24.940
Then you can't use or,
not that you can't, but

103
00:05:24.940 --> 00:05:28.220
you have a difficult time using
the ethernet also for debugging.

104
00:05:28.220 --> 00:05:31.760
Now, it turns that you can share
the ethernet for both, but if you do that,

105
00:05:31.760 --> 00:05:36.810
then whenever the debugging information
is going over the ethernet pack,

106
00:05:36.810 --> 00:05:38.710
over the ethernet connection.

107
00:05:38.710 --> 00:05:42.180
Then, functional data can't be going
over the ethernet connection, right?

108
00:05:42.180 --> 00:05:43.510
So, there's a tradeoff.

109
00:05:43.510 --> 00:05:46.230
And it can slow the machine down and
so on.

110
00:05:46.230 --> 00:05:50.135
So, you need some spare internet, some
spare connection, which we fortunately

111
00:05:50.135 --> 00:05:53.589
have within Arduino UR serial connection
is what we are gonna to use, and

112
00:05:53.589 --> 00:05:55.078
we'll talk about that later.

113
00:05:57.958 --> 00:06:02.792
Oh, another thing is that you would like
to have the program in RAM in order to add

114
00:06:02.792 --> 00:06:03.960
the breakpoints.

115
00:06:03.960 --> 00:06:07.580
So, this has to do with how
software breakpoints are added.

116
00:06:07.580 --> 00:06:10.630
You know in Arduino,
the program is generally in flash.

117
00:06:10.630 --> 00:06:13.790
It's resident in flash and
executed out of the flash memory.

118
00:06:13.790 --> 00:06:18.710
But, you would like to have it in RAM,
because flash is slow to reprogram and

119
00:06:18.710 --> 00:06:20.860
RAM is fast.

120
00:06:20.860 --> 00:06:23.640
You can reprogram flash,
but it takes a long time.

121
00:06:23.640 --> 00:06:26.210
You have to, relatively long time.

122
00:06:26.210 --> 00:06:30.710
When I say long time, I mean it's
milliseconds, okay a long time.

123
00:06:30.710 --> 00:06:32.970
Lots of milliseconds, that's slow.

124
00:06:32.970 --> 00:06:36.800
So you would like it to be in ram
because whenever you set a break point.

125
00:06:36.800 --> 00:06:38.130
I don't want to go into
the details of this, but

126
00:06:38.130 --> 00:06:40.690
when you set a breakpoint you have
to alter the code temporarily.

127
00:06:40.690 --> 00:06:44.140
You go to the place, the liner, the code
where the breakpoints gonna be, and

128
00:06:44.140 --> 00:06:45.458
you change that instruction.

129
00:06:45.458 --> 00:06:49.770
To something else temporarily in order to
set it to stop the code at that point.

130
00:06:49.770 --> 00:06:52.560
So, you need to be able to change the code

131
00:06:52.560 --> 00:06:54.780
relatively quickly in order
to set these breakpoints.

132
00:06:54.780 --> 00:06:56.000
And flash makes that harder.

133
00:06:59.120 --> 00:07:01.460
Okay, so another way to go.

134
00:07:01.460 --> 00:07:05.590
Which is more common in modern processors,
is become common,

135
00:07:05.590 --> 00:07:07.760
is the use of an embedded debug interface.

136
00:07:07.760 --> 00:07:11.970
So what this is, you see this
in modern processors nowadays.

137
00:07:11.970 --> 00:07:13.790
You have embedded debug logic.

138
00:07:13.790 --> 00:07:16.259
Debug logic that's actually
built in to the processor.

139
00:07:17.300 --> 00:07:18.860
So inside the processor or

140
00:07:18.860 --> 00:07:22.520
the microcontroller, in addition to all
the logic that actually executes the code.

141
00:07:22.520 --> 00:07:27.500
They put debug logic hardware that
actually does debug activities.

142
00:07:27.500 --> 00:07:32.500
They build it right in, so you don't have
to have a debug monitor anymore, right.

143
00:07:32.500 --> 00:07:36.980
The debug monitor was a program that
runs on your arduino, let's say.

144
00:07:36.980 --> 00:07:38.580
This is saying look, forget the program.

145
00:07:38.580 --> 00:07:41.860
We're gonna put hardware in there
that does those functions directly.

146
00:07:41.860 --> 00:07:45.920
Which makes it faster,
also makes it possible to do in parallel.

147
00:07:45.920 --> 00:07:49.540
It's efficient, it costs a little bit,
because it costs area on the chip, right?

148
00:07:49.540 --> 00:07:52.440
The chip has to get bigger to
accommodate the extra logic that you're

149
00:07:52.440 --> 00:07:53.530
embedding in there.

150
00:07:53.530 --> 00:07:56.080
But it's a useful feature, and
it's getting more and more common.

151
00:07:56.080 --> 00:08:00.719
Because space is relatively
cheap on a chip.

152
00:08:00.719 --> 00:08:03.930
So typically it's
an option like the block.

153
00:08:03.930 --> 00:08:06.870
In the initial property block
off a piece of hardware you

154
00:08:06.870 --> 00:08:07.910
can add to the chip design.

155
00:08:09.920 --> 00:08:12.750
There are several embedded
trace macrocell from ARMs.

156
00:08:12.750 --> 00:08:17.190
The ARM processors, they have embedded
trace macrocells, which are the name for

157
00:08:17.190 --> 00:08:19.950
their debug logic or, for
some part of their debug logic,

158
00:08:19.950 --> 00:08:21.590
they have several trace macrocells.

159
00:08:21.590 --> 00:08:24.290
But embedded trace
macrocells the main one.

160
00:08:24.290 --> 00:08:27.550
Freescale uses background debug mode,
which is a similar idea.

161
00:08:29.840 --> 00:08:32.860
Debug logic is permanently
built into the processor.

162
00:08:32.860 --> 00:08:35.072
So, what that means is that logic,

163
00:08:35.072 --> 00:08:38.200
since it's debug logic generally is
used when you're developing the system.

164
00:08:38.200 --> 00:08:40.753
But once you manufacture the system and
you sell it.

165
00:08:40.753 --> 00:08:44.550
That logic seems wasted,
it's not using but not being used, right,

166
00:08:44.550 --> 00:08:47.840
because you're not generally
debugging it out in the field.

167
00:08:47.840 --> 00:08:50.390
Now you could, but
that is much less common.

168
00:08:50.390 --> 00:08:54.370
So that logic, this is why somehow
it seems like a waste sometimes,

169
00:08:54.370 --> 00:08:56.580
because you say,
well I'm using that logic.

170
00:08:56.580 --> 00:09:00.110
I'm paying more to build this chip
with this extra debug logic, but

171
00:09:00.110 --> 00:09:02.090
in the field it's never used.

172
00:09:02.090 --> 00:09:05.220
That's true, it's not a waste though
because debug cost's a lot of money.

173
00:09:05.220 --> 00:09:08.664
And anything that can speed that and
make that cheaper is not a waste.

174
00:09:11.917 --> 00:09:14.920
A few dedicated pins have to be added.

175
00:09:14.920 --> 00:09:19.730
So this debug information that is
extracted by this embedded debug logic.

176
00:09:19.730 --> 00:09:21.750
It has to be sent to, say,

177
00:09:21.750 --> 00:09:26.590
a host machine, right, that the user
is interfacing with, is using.

178
00:09:26.590 --> 00:09:30.830
So in order to do that,
you need some pins to send that data.

179
00:09:30.830 --> 00:09:33.970
And that's important,
the pins are precious, right.

180
00:09:33.970 --> 00:09:36.480
There aren't that many pins on a chip.

181
00:09:36.480 --> 00:09:39.700
Even a very densely packed
chip has a lot of pins.

182
00:09:39.700 --> 00:09:43.980
Compared to the amount of logic inside
the chip, there are very few pins.

183
00:09:43.980 --> 00:09:45.220
So, pins are precious.

184
00:09:45.220 --> 00:09:48.950
So, you don't wanna use too many
pins just for debugging purposes.

185
00:09:48.950 --> 00:09:52.490
But these debug interfaces
require a certain number of pins.

186
00:09:52.490 --> 00:09:57.255
Usually they transfer data serially,
so they need very few pins, but

187
00:09:57.255 --> 00:10:00.184
they do need a few pins
dedicated to debug.

188
00:10:00.184 --> 00:10:01.667
So here are some of the debug and

189
00:10:01.667 --> 00:10:05.450
trace features you would expect
to find in embedded debug logic.

190
00:10:05.450 --> 00:10:09.020
Break points, the ability to set
break points inside your code.

191
00:10:09.020 --> 00:10:13.430
Watch points, where what happens is
it It's sort of like a break point.

192
00:10:13.430 --> 00:10:16.830
It's at a certain point in code,
let's say or a memory location.

193
00:10:16.830 --> 00:10:19.850
If some event happens
then it stops the code.

194
00:10:19.850 --> 00:10:23.250
So maybe if you write to a particular
memory location then it stops.

195
00:10:23.250 --> 00:10:25.070
It's every time you write, it'll check and

196
00:10:25.070 --> 00:10:27.415
if you write to this location
then it stops the code.

197
00:10:27.415 --> 00:10:29.900
On the fly memory access.

198
00:10:29.900 --> 00:10:33.670
So you're gonna access
the memory locations at runtime

199
00:10:33.670 --> 00:10:35.400
without stopping the code.

200
00:10:35.400 --> 00:10:37.650
That you can observe the memory locations.

201
00:10:37.650 --> 00:10:38.690
You can read them and observe them.

202
00:10:40.140 --> 00:10:44.390
You can change process and value so change
register values and things like this.

203
00:10:44.390 --> 00:10:49.190
Single step through the codes is one step
at a time, one instruction at a time.

204
00:10:49.190 --> 00:10:53.560
Which allows you to basically find grain
one control so execute one instruction,

205
00:10:53.560 --> 00:10:56.090
check the value, execute the next
instruction, check the value.

206
00:10:56.090 --> 00:10:58.780
And you can zero in on exactly
when the value is going wrong.

207
00:11:01.280 --> 00:11:04.670
You can export exceptions to debugger, so
when you hit a watchpoint it can go to

208
00:11:04.670 --> 00:11:08.150
debugger logic and start running
debug logic if you want it to.

209
00:11:08.150 --> 00:11:11.460
You can export software generated data.

210
00:11:11.460 --> 00:11:13.910
So, what that means is
actually we're gonna be doing,

211
00:11:13.910 --> 00:11:17.080
this will actually be doing
something just like this.

212
00:11:17.080 --> 00:11:20.480
You can basically allow that

213
00:11:20.480 --> 00:11:23.190
the person who writes the code
running on your target.

214
00:11:23.190 --> 00:11:24.510
They can put print statements,

215
00:11:24.510 --> 00:11:30.170
effectively print statements, which send
data from the processor to the host.

216
00:11:30.170 --> 00:11:33.130
So you can basically add
error messages manually.

217
00:11:33.130 --> 00:11:37.550
You can say, oh, this error has happened
now, and it'll be sent on the wires,

218
00:11:37.550 --> 00:11:39.680
whatever the communication interface is.

219
00:11:39.680 --> 00:11:43.830
It'll be sent to the host, and
the person debugging can see the messages.

220
00:11:43.830 --> 00:11:44.530
And that can be helpful.

221
00:11:46.370 --> 00:11:49.660
Timestamp information for each event so
you can trace the events.

222
00:11:49.660 --> 00:11:53.380
So when events happen like certain
interesting things happen a memory access

223
00:11:53.380 --> 00:11:55.370
happens or something like that.

224
00:11:55.370 --> 00:11:57.250
You can send a timestamp and

225
00:11:57.250 --> 00:12:00.250
say look this memory access happened at
this time this happened at that time.

226
00:12:00.250 --> 00:12:03.490
Sometimes in timing critical
situations timing critical systems.

227
00:12:03.490 --> 00:12:07.720
You wanna know exactly when things happen
and the time separation between events.

228
00:12:07.720 --> 00:12:12.010
So the hardware that you add for
debug can add that timestamp and

229
00:12:12.010 --> 00:12:12.890
send it to the host.

230
00:12:14.680 --> 00:12:17.670
An instruction trace,
you get a special purpose hardware

231
00:12:17.670 --> 00:12:20.700
that tells you which instructions
were executed in what sequence.

232
00:12:20.700 --> 00:12:21.980
So this is very useful sometimes.

233
00:12:21.980 --> 00:12:24.580
If you know something crashed.

234
00:12:24.580 --> 00:12:27.560
You want to see what happened
that led up to that crash.

235
00:12:27.560 --> 00:12:30.230
You'd like to see a trace, the list
of instructions that were executed.

236
00:12:30.230 --> 00:12:33.647
So you can follow it back and
sort of guess at which instruction or

237
00:12:33.647 --> 00:12:36.698
which set of instructions
might have caused that crash.

238
00:12:36.698 --> 00:12:37.263
Thank you.

239
00:12:37.263 --> 00:12:46.099
[MUSIC]