WEBVTT

1
00:00:00.134 --> 00:00:10.134
[MUSIC]

2
00:00:11.395 --> 00:00:14.769
In this lecture, we'll talk
a little bit more about variables.

3
00:00:14.769 --> 00:00:18.004
Variables are key,
variables just like in algebra.

4
00:00:18.004 --> 00:00:21.940
You need variables to write code and
we'll talk about variables and

5
00:00:21.940 --> 00:00:24.437
how they can be defined and
what they mean.

6
00:00:24.437 --> 00:00:29.632
So variables, they're basically names
that represent values in a program.

7
00:00:29.632 --> 00:00:34.096
Similar to algebraic variables, so
just like in algebra, x equals 5,

8
00:00:34.096 --> 00:00:35.278
x equals y plus 2.

9
00:00:35.278 --> 00:00:36.862
You have these variables, x, y.

10
00:00:36.862 --> 00:00:40.513
They're names that are substitutes for
certain values.

11
00:00:40.513 --> 00:00:44.829
All variables have a type,
which must be declared.

12
00:00:44.829 --> 00:00:48.804
So type is an important concept in C and
in most languages.

13
00:00:48.804 --> 00:00:51.599
The type of a variable tells you,
basically,

14
00:00:51.599 --> 00:00:55.337
it intuitively tells you what
kind of data it is going to hold.

15
00:00:55.337 --> 00:00:57.799
So for instance here, I say, int x.

16
00:00:57.799 --> 00:01:01.278
I'm saying, x is gonna be an integer,
int is short for integer.

17
00:01:01.278 --> 00:01:05.158
Or I say, float y, I'm saying,
y is gonna be a floating point number.

18
00:01:05.158 --> 00:01:08.368
So, I'm telling you what type of
information is going to be held in that

19
00:01:08.368 --> 00:01:08.909
variable?

20
00:01:08.909 --> 00:01:13.513
Now the type is important, because it
determines how arithmetic is performed and

21
00:01:13.513 --> 00:01:17.529
it determines how much memory is going
to be used to store the variable.

22
00:01:17.529 --> 00:01:21.271
Because remember, all of these variables
have to be stored in memory somewhere.

23
00:01:21.271 --> 00:01:23.806
And so
the question is with a variable like x,

24
00:01:23.806 --> 00:01:27.227
how many bytes of space do we
need to store that information?

25
00:01:27.227 --> 00:01:29.277
And with y, how many bytes of information?

26
00:01:29.277 --> 00:01:31.560
Cuz the machine when it's running,
it has to store it,

27
00:01:31.560 --> 00:01:33.171
it has to know how big it's going to be.

28
00:01:33.171 --> 00:01:35.023
So that's what the declarations are for.

29
00:01:35.023 --> 00:01:38.124
If you say, int x, oh,
x is gonna be the size of an integer,

30
00:01:38.124 --> 00:01:39.934
whatever that is on your machine.

31
00:01:39.934 --> 00:01:42.889
A standard 32 bit machine
the integer is gonna be 4 bytes.

32
00:01:42.889 --> 00:01:47.654
Depends on the processor, but
4 bytes is standard for a 32-bit machine.

33
00:01:47.654 --> 00:01:51.269
Floating point might be eight bites
something like that or I can't remember.

34
00:01:51.269 --> 00:01:53.511
Maybe eight, maybe four, maybe eight, but

35
00:01:53.511 --> 00:01:56.581
there are fixed sizes depending
on the machine for each type.

36
00:01:56.581 --> 00:02:02.074
So one thing that type lets you know
is how much memory is gonna be needed?

37
00:02:02.074 --> 00:02:06.306
But also the type tells you,
how arithmetic will be performed?

38
00:02:06.306 --> 00:02:09.884
So arithmetic is performed differently
depending on the type of data.

39
00:02:09.884 --> 00:02:11.064
So, integer.

40
00:02:11.064 --> 00:02:14.835
If you have an integer type and you want
to do addition, everybody knows how to do

41
00:02:14.835 --> 00:02:18.804
integer addition, but floating point
addition is a much more complicated thing.

42
00:02:18.804 --> 00:02:22.462
So if you wanna do floating point
addition, actually what happens inside

43
00:02:22.462 --> 00:02:26.651
the hardware, inside the microprocessor
is there's often a floating point unit,

44
00:02:26.651 --> 00:02:30.488
a dedicated piece of hardware, just
there to do floating point operations.

45
00:02:30.488 --> 00:02:34.353
And it is separate than the integer
operators, so you'll have an integer ALU,

46
00:02:34.353 --> 00:02:37.356
arithmetic logic unit,
which performs integer addition and

47
00:02:37.356 --> 00:02:41.361
then you'll have some floating point unit
that does floating point operations.

48
00:02:41.361 --> 00:02:44.442
And so depending on the type,
you're going to have to send that data to

49
00:02:44.442 --> 00:02:47.858
a different piece of hardware to do
the operations that need to be performed.

50
00:02:47.858 --> 00:02:51.515
Although floating point division is a
whole other thing, you gotta a speculative

51
00:02:51.515 --> 00:02:54.911
dividing point, which is definitely
different than a same energy divide.

52
00:02:54.911 --> 00:02:57.020
So that's why typing is needed.

53
00:02:57.020 --> 00:03:00.457
You need to know what type and all
the variables are gonna be and so in C,

54
00:03:00.457 --> 00:03:01.929
you have to declare the type.

55
00:03:01.929 --> 00:03:04.233
So before you use a variable,
you have to declare it.

56
00:03:04.233 --> 00:03:06.821
So before you can use x in your program,

57
00:03:06.821 --> 00:03:11.224
you have to say int x; somewhere or
float y; something like that.

58
00:03:11.224 --> 00:03:14.875
So that's what variables are,
you've gotta declare them in C.

59
00:03:14.875 --> 00:03:17.746
Now so there are several built in types,

60
00:03:17.746 --> 00:03:20.880
here are the main ones
we're gonna look at.

61
00:03:20.880 --> 00:03:23.398
Char, int, float and double.

62
00:03:23.398 --> 00:03:26.512
Really, we're gonna focus
on probably char and int.

63
00:03:26.512 --> 00:03:30.815
When it comes to embedded systems, we
try to avoid floats and doubles, because

64
00:03:30.815 --> 00:03:35.264
floating point arithmetic and double worth
or double is double precision point.

65
00:03:35.264 --> 00:03:39.079
It's slower and bigger, so
we try to avoid them in general.

66
00:03:39.079 --> 00:03:41.271
Sometimes you need it,
but try to avoid them.

67
00:03:41.271 --> 00:03:46.500
So an int is typically whatever the word
size is, but it could be down to 16.

68
00:03:46.500 --> 00:03:52.205
So for instance with an Arduino,
I believe an int is 16 bits, but a char.

69
00:03:52.205 --> 00:03:55.739
No matter what platform you're using,
a char is only 1 byte.

70
00:03:55.739 --> 00:03:57.650
That's just a standard size.

71
00:03:57.650 --> 00:03:59.436
So actually, it's very useful.

72
00:03:59.436 --> 00:04:00.330
It's nice.

73
00:04:00.330 --> 00:04:04.449
When I'm coding, you use a char and
you always know what you're gonna get.

74
00:04:04.449 --> 00:04:07.789
So, I often use a char by default.

75
00:04:07.789 --> 00:04:12.663
But floating point and double,
they can be 64 bits, 128.

76
00:04:12.663 --> 00:04:15.834
They can be much longer.

77
00:04:15.834 --> 00:04:19.752
Now variables all have names, they have
to have names associated with them.

78
00:04:19.752 --> 00:04:23.229
It's just a sequence of visible
characters, there are some limits.

79
00:04:23.229 --> 00:04:26.571
For instance, it has to start
with a non-numerical character.

80
00:04:26.571 --> 00:04:31.354
So you can have int testvar1,
that's legal, cuz it starts with a t.

81
00:04:31.354 --> 00:04:34.502
But you can't have int of 1testvar,
because it starts with a 1.

82
00:04:34.502 --> 00:04:35.809
So that's not legal.

83
00:04:35.809 --> 00:04:38.803
You can't have any variable
names that are C keywords.

84
00:04:38.803 --> 00:04:41.353
If, else, while, that sort of thing.

85
00:04:41.353 --> 00:04:43.439
So there are so limits on variable names,

86
00:04:43.439 --> 00:04:46.610
but you have wide discretion in
what your names are going to be.

87
00:04:46.610 --> 00:04:47.423
Thank you.

88
00:04:47.423 --> 00:04:52.846
[MUSIC]