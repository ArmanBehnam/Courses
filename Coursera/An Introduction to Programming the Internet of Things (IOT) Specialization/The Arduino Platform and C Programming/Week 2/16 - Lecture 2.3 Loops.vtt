WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.545 --> 00:00:17.820
So, in this lecture, we'll talk about
looping and loop control constructs.

3
00:00:17.820 --> 00:00:21.030
So, looping is, basically, doing something
over and over again in your code.

4
00:00:21.030 --> 00:00:22.830
Happens all the time.

5
00:00:22.830 --> 00:00:25.950
There are many times you wanna go
through an array and evaluate it.

6
00:00:25.950 --> 00:00:28.180
You just do whatever
the process is over and over.

7
00:00:28.180 --> 00:00:32.730
Actually, in Arduino that's implicit in an
Arduino, as in whenever you're executing

8
00:00:32.730 --> 00:00:35.860
you do it over and over and
over as long as the Arduino is powered on.

9
00:00:35.860 --> 00:00:38.860
So, loops are an important construct, and

10
00:00:38.860 --> 00:00:42.370
we'll talk about the different
ways to do loops in C.

11
00:00:44.530 --> 00:00:48.200
So we've got two basic kinds of loops,
while loops and for loops.

12
00:00:49.910 --> 00:00:51.050
We show three examples up here.

13
00:00:51.050 --> 00:00:53.920
There's a for loop at the top,
for loop up there.

14
00:00:53.920 --> 00:00:55.330
Then there's two while loops.

15
00:00:55.330 --> 00:00:59.170
There's a while loop on the left, a
regular while loop, and then on the right,

16
00:00:59.170 --> 00:01:00.190
there's a do while loop.

17
00:01:00.190 --> 00:01:02.850
It's got a do at the top and
a while at the bottom.

18
00:01:02.850 --> 00:01:09.250
So generally with any kind of loop,
regardless of what kind of loop there is,

19
00:01:09.250 --> 00:01:13.270
there's always gonna be some
kind of an initialization step.

20
00:01:13.270 --> 00:01:13.970
Okay?

21
00:01:13.970 --> 00:01:17.625
And some kind of increment step and
some kind of a conditional check.

22
00:01:17.625 --> 00:01:20.275
So, every loop has to
have some end condition.

23
00:01:20.275 --> 00:01:25.795
Some kind of condition that notes,
that tells you that the loop is done.

24
00:01:25.795 --> 00:01:26.315
Right?
So

25
00:01:26.315 --> 00:01:29.085
you never,
you usually don't wanna loop forever.

26
00:01:29.085 --> 00:01:32.145
Actually in Arduino's you do, but
we'll get to that next course.

27
00:01:32.145 --> 00:01:33.785
But often you don't wanna loop forever.

28
00:01:33.785 --> 00:01:37.175
Maybe you only wanted to do
this thing 100 times, right?

29
00:01:37.175 --> 00:01:40.780
So, you need to be able to check,
have I done this 100 times?

30
00:01:40.780 --> 00:01:43.970
All right, so there's always gonna
be some sort of a conditional check

31
00:01:43.970 --> 00:01:45.290
associated with a loop.

32
00:01:45.290 --> 00:01:48.750
Where you check has this
been done a hundred times.

33
00:01:48.750 --> 00:01:52.600
Now the most common way to
check a thing like that is,

34
00:01:52.600 --> 00:01:55.230
say you got a variable,
you have some variable

35
00:01:55.230 --> 00:01:57.850
which just tells you how many times
you've been through the loop.

36
00:01:57.850 --> 00:02:00.780
So, like I is a typical name for
that variable, I for index.

37
00:02:00.780 --> 00:02:02.580
So say you wanna go through
a loop a hundred times.

38
00:02:02.580 --> 00:02:05.710
At the beginning of the loop
you'll set that I equal to zero.

39
00:02:05.710 --> 00:02:10.820
Then every time you go through the loop
I say I plus plus, incrementing I.

40
00:02:10.820 --> 00:02:14.310
Then every pass of the loop before you
start the loop again you want to check,

41
00:02:14.310 --> 00:02:16.440
is I still less than a hundred.

42
00:02:16.440 --> 00:02:18.820
If I is less that a hundred,
then you do the loop again.

43
00:02:18.820 --> 00:02:21.950
But eventually I isn't less than a hundred
and you're through with the loop.

44
00:02:21.950 --> 00:02:22.575
Okay?
And

45
00:02:22.575 --> 00:02:25.927
that's what's gonna happen if it's a for
loop or a while loop, either one,

46
00:02:25.927 --> 00:02:27.795
basically that's gonna happen, right?

47
00:02:27.795 --> 00:02:33.253
There's some kind of a check for the end,
for the termination condition, okay?

48
00:02:33.253 --> 00:02:36.820
Now and often that's just using an index
variable and adding one to it every time

49
00:02:36.820 --> 00:02:40.230
but you can have much more sophisticated
conditional checks at the end, for

50
00:02:40.230 --> 00:02:41.630
termination, if you want to.

51
00:02:42.730 --> 00:02:47.570
So, now the conditional check at a for
loop and

52
00:02:47.570 --> 00:02:51.200
at a regular while group the conditional
check is checked at the beginning, right,

53
00:02:51.200 --> 00:02:52.560
to see if you're done with it.

54
00:02:52.560 --> 00:02:57.470
Where, so if you look in a for
loop expression two, expr2,

55
00:02:57.470 --> 00:03:00.620
that is actually the conditional check,
right?

56
00:03:00.620 --> 00:03:02.720
And I'll give you an example of that,
but that's a conditional check and

57
00:03:02.720 --> 00:03:04.550
you do it at the top of the loop.

58
00:03:04.550 --> 00:03:07.780
The while loop, the first while loop
on the right, expression two, again,

59
00:03:07.780 --> 00:03:09.040
is a conditional check.

60
00:03:09.040 --> 00:03:10.800
If that condition is true,
then you execute the loop.

61
00:03:10.800 --> 00:03:14.046
If it's false,
you skip the loop and you're done.

62
00:03:14.046 --> 00:03:17.857
Now in the one on the right, expression
two again is a conditional check, but

63
00:03:17.857 --> 00:03:20.600
notice that it's at
the bottom of the loop.

64
00:03:20.600 --> 00:03:24.450
So what that means, the difference with
that while loop on the right is that

65
00:03:24.450 --> 00:03:27.600
It executes it always goes
through the loop at least once.

66
00:03:27.600 --> 00:03:31.070
Because it doesn't do a check until
the end of the first pass of the loop.

67
00:03:31.070 --> 00:03:34.421
So just between those two while loops, is
just where you do the conditional check.

68
00:03:34.421 --> 00:03:36.841
Do you do it at the end
of an iterational loop or

69
00:03:36.841 --> 00:03:39.087
at the beginning of an iterational loop?

70
00:03:39.087 --> 00:03:42.017
And the difference happens with
the one where you check at the end,

71
00:03:42.017 --> 00:03:45.120
means you always have to go
through the loop at least once.

72
00:03:45.120 --> 00:03:46.930
Where with the one that you
check at the beginning,

73
00:03:46.930 --> 00:03:49.930
you might not go through it the first
time if the condition isn't true.

74
00:03:51.070 --> 00:03:53.171
So let's take this while loop.

75
00:03:53.171 --> 00:03:57.296
There's a main statement, a main function.

76
00:03:57.296 --> 00:03:59.314
First, before we even
get into the while loop,

77
00:03:59.314 --> 00:04:02.080
you first define a variable called i and
set it equal to zero.

78
00:04:02.080 --> 00:04:04.250
So I is gonna be our index variable and

79
00:04:04.250 --> 00:04:06.730
that's gonna tell us how many
times we've been through the loop.

80
00:04:06.730 --> 00:04:09.000
This is a very common thing
to do in these loops.

81
00:04:09.000 --> 00:04:10.540
Now, you notice the while.

82
00:04:10.540 --> 00:04:14.320
In parentheses,
it says while i less than 3.

83
00:04:14.320 --> 00:04:18.546
So, what this is gonna do is
execute this while loop 3 times.

84
00:04:18.546 --> 00:04:20.295
So i starts off at 0.

85
00:04:20.295 --> 00:04:23.470
And then, inside the loop, you'll see,
it does a print statement, a print f.

86
00:04:23.470 --> 00:04:25.140
It prints the variable i.

87
00:04:25.140 --> 00:04:27.490
And then it says, i equals i plus 1.

88
00:04:27.490 --> 00:04:29.690
So every pass of this
loop i is incremented.

89
00:04:29.690 --> 00:04:32.150
So the first time through
the loop i is equal to zero.

90
00:04:32.150 --> 00:04:34.160
The next time through the loop
is i is equal to one.

91
00:04:34.160 --> 00:04:36.150
Next time through is equal to two.

92
00:04:36.150 --> 00:04:37.430
And then it becomes three.

93
00:04:37.430 --> 00:04:40.560
So then you get back to the top and
it says while i less than three but

94
00:04:40.560 --> 00:04:46.050
if i is equal to 3 then that's not true so
it finishes the loop at that point.

95
00:04:46.050 --> 00:04:48.640
So this loop will actually
execute three times.

96
00:04:48.640 --> 00:04:51.920
When i is equal to zero,
i is equal to one, and i is equal to two.

97
00:04:51.920 --> 00:04:56.740
Once i is equal to 3, it exits the while
loop and it doesn't execute a final time.

98
00:04:57.820 --> 00:05:02.390
So, this while loop, after the word while,

99
00:05:02.390 --> 00:05:04.790
in parenthesis you have
the termination condition.

100
00:05:04.790 --> 00:05:07.850
Right?
The condition that is checked at

101
00:05:07.850 --> 00:05:09.710
the beginning of every
pass through the loop.

102
00:05:10.890 --> 00:05:12.180
Now, a for

103
00:05:12.180 --> 00:05:17.510
statement actually it's a little more
structured than a while statement, right?

104
00:05:17.510 --> 00:05:18.780
Now, you notice how the while loop,

105
00:05:18.780 --> 00:05:21.560
it had the termination
condition in the parenthesis.

106
00:05:21.560 --> 00:05:24.830
So, the for loop,
if you look at its parenthesis,

107
00:05:24.830 --> 00:05:28.140
the parenthesis after the for, so for
and then it's open paren, close paren.

108
00:05:28.140 --> 00:05:31.370
There are actually three statements
in there separated by semicolons.

109
00:05:32.390 --> 00:05:35.010
Now the middle statement is
the termination condition just like

110
00:05:35.010 --> 00:05:35.720
with the Y loop.

111
00:05:35.720 --> 00:05:36.330
I less than three.

112
00:05:37.480 --> 00:05:40.430
The first statement is
the initialization condition.

113
00:05:40.430 --> 00:05:43.800
So that tells you what you want to
do just right at the beginning,

114
00:05:43.800 --> 00:05:45.800
the first time you start this loop.

115
00:05:45.800 --> 00:05:47.840
I equals zero, assigning I equal to zero.

116
00:05:47.840 --> 00:05:49.520
Now notice with the Y loop.

117
00:05:49.520 --> 00:05:51.440
That wasn't built into the while loop.

118
00:05:51.440 --> 00:05:54.470
So we had a statement before the while
loop that said i equal to zero.

119
00:05:54.470 --> 00:05:57.450
But with the for
loop that's built right into the for loop.

120
00:05:57.450 --> 00:06:01.390
The first statement inside
the parentheses is the initialization.

121
00:06:01.390 --> 00:06:03.130
Then you've got the termination,
the second statement.

122
00:06:03.130 --> 00:06:05.720
And the third statement is the step,
the increment.

123
00:06:06.820 --> 00:06:08.010
So i plus plus.

124
00:06:08.010 --> 00:06:12.080
So what that does is that third statement
is executed at the end of every loop.

125
00:06:12.080 --> 00:06:14.820
So every time you execute the loop
it automatically does i plus plus

126
00:06:14.820 --> 00:06:15.830
incrementing it.

127
00:06:15.830 --> 00:06:18.080
Now notice in the while loop
it also incremented but

128
00:06:18.080 --> 00:06:19.600
we had to make it explicit.

129
00:06:19.600 --> 00:06:20.320
We as a programmer,

130
00:06:20.320 --> 00:06:23.780
we had to write i equals i plus one
as a statement inside the loop.

131
00:06:23.780 --> 00:06:25.680
With the for
loop you don't have to do that.

132
00:06:25.680 --> 00:06:27.710
It's just built into
the structure of the for

133
00:06:27.710 --> 00:06:31.170
loop, that i++, that last step at the end.

134
00:06:31.170 --> 00:06:34.310
So this loop right here does
the same thing that the while loop

135
00:06:34.310 --> 00:06:35.980
did on the last slide.

136
00:06:35.980 --> 00:06:38.530
It just does it with a for loop instead.

137
00:06:38.530 --> 00:06:40.030
And notice that the initialization,

138
00:06:40.030 --> 00:06:42.970
the termination of the step,
they're all built into the for loop.

139
00:06:42.970 --> 00:06:46.460
Unlike with the while loop, where the
termination was built into the while loop

140
00:06:46.460 --> 00:06:49.460
but the initialization step had to
be put in manually by the program.

141
00:06:52.590 --> 00:06:54.400
One other thing about break and continue.

142
00:06:54.400 --> 00:06:59.040
So actually we looked at break already, in
the context of the switch statement, but

143
00:06:59.040 --> 00:07:01.110
break is also used in loops.

144
00:07:01.110 --> 00:07:04.150
It does a similar thing inside a loop and
also there's a continue statement.

145
00:07:04.150 --> 00:07:05.820
So let's look at break first.

146
00:07:05.820 --> 00:07:09.840
What a break does is it
just exits the loop.

147
00:07:09.840 --> 00:07:12.150
So if you ever execute a break,
it jumps out of the loop.

148
00:07:12.150 --> 00:07:18.260
So if we look at our while loop
at the top, the first one.

149
00:07:18.260 --> 00:07:20.600
While (x > 5) {y++} and
if (y < 3) then it breaks.

150
00:07:20.600 --> 00:07:23.390
So even though you might
not be done with the loop.

151
00:07:23.390 --> 00:07:28.920
Maybe x is still this is sort of a messed
up loop but ignoring the content

152
00:07:28.920 --> 00:07:32.930
of the loop let's say this loop we
wanna go through this loop 100 times.

153
00:07:32.930 --> 00:07:35.800
X is gonna be greater than
five a hundred times, right?

154
00:07:35.800 --> 00:07:37.030
But it doesn't matter.

155
00:07:37.030 --> 00:07:39.950
Cuz if you hit that break statement,
if y is less than 3 and

156
00:07:39.950 --> 00:07:43.630
you hit that break, then you jump
out of the while loop regardless.

157
00:07:43.630 --> 00:07:46.560
And it kicks you out and
so you don't execute,

158
00:07:46.560 --> 00:07:50.920
it sort of pre-amps the termination
check it says like a early termination,

159
00:07:50.920 --> 00:07:53.860
it's what a break is, in terms of a loop.

160
00:07:53.860 --> 00:07:58.240
Now continue is a little bit different,
continue when you hit the continue

161
00:07:58.240 --> 00:08:01.790
it doesn't jump out of the entire loop
it jumps out of that one iteration and

162
00:08:01.790 --> 00:08:03.690
moves to the next iteration.

163
00:08:03.690 --> 00:08:08.240
So, in the example we have below,
we replace the break with a continue.

164
00:08:08.240 --> 00:08:11.630
So what happens is if that continue is
executed, it doesn't jump out of the loop,

165
00:08:11.630 --> 00:08:13.570
it goes to the top of the loop.

166
00:08:13.570 --> 00:08:17.200
So what that effectively does,
in this case is,everything in the loop

167
00:08:17.200 --> 00:08:20.340
after that continue is not
executed on that path.

168
00:08:20.340 --> 00:08:24.260
So in this loop, you see there is
an x++ after the continue, right?

169
00:08:24.260 --> 00:08:28.190
On the path where you execute continue,
that x++ is skipped right?

170
00:08:28.190 --> 00:08:30.500
And the loop goes back to the beginning,
right?

171
00:08:30.500 --> 00:08:35.531
So it stays inside the look it just goes
to the next iteration of the loop and

172
00:08:35.531 --> 00:08:38.629
skips whatever the remainder
of the loop is.

173
00:08:38.629 --> 00:08:42.171
Thank you.

174
00:08:42.171 --> 00:08:47.949
[MUSIC]