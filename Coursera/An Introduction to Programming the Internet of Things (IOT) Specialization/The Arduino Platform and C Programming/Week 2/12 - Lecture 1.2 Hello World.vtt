WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.828 --> 00:00:14.360
Here, we'll break down
the Hello World program.

3
00:00:14.360 --> 00:00:17.170
Just so you can understand exactly
what's going on with the program and

4
00:00:17.170 --> 00:00:17.930
how it works.

5
00:00:17.930 --> 00:00:18.860
It's a simple program.

6
00:00:18.860 --> 00:00:21.160
But we'll go through it, piece by piece,
so you can understand the code.

7
00:00:22.810 --> 00:00:23.810
So to look at hello world.

8
00:00:23.810 --> 00:00:26.600
It starts off at the top
with an include statement.

9
00:00:26.600 --> 00:00:31.550
Hashtag include standard IO, stdio.h.

10
00:00:31.550 --> 00:00:34.450
So hashtag include.

11
00:00:34.450 --> 00:00:37.860
Anything with a hashtag in front of it
is what's called a compiler directive.

12
00:00:37.860 --> 00:00:40.500
It's not really a piece of code.

13
00:00:40.500 --> 00:00:43.760
It tells a compiler to do
something special, and

14
00:00:43.760 --> 00:00:48.760
include tells the compiler to include
whatever the file is to the right.

15
00:00:48.760 --> 00:00:54.348
So hashtag includes to stdio.h
says take this file stdio.h and

16
00:00:54.348 --> 00:00:56.950
include it right here in the code.

17
00:00:56.950 --> 00:00:59.850
So it just basically, it cuts and pastes.

18
00:00:59.850 --> 00:01:03.860
It takes that stdio.h and
pastes it to the beginning of this file.

19
00:01:03.860 --> 00:01:08.950
Now in this case, stdio.h is a library,
standard library.

20
00:01:08.950 --> 00:01:11.490
In fact, it stands for standard IO.

21
00:01:11.490 --> 00:01:16.330
And standard IO library, it has all
the standard IO, input/output functions,

22
00:01:16.330 --> 00:01:18.530
like printf for printing.

23
00:01:18.530 --> 00:01:21.560
So if you ever wanna do printf you've
gotta include the standard IO library.

24
00:01:21.560 --> 00:01:25.610
So this basically takes the .h library for
the library, the header file for

25
00:01:25.610 --> 00:01:28.050
the library, and includes it at the top.

26
00:01:28.050 --> 00:01:31.840
Now, the .h file, what that does is it
just takes all the library functions and

27
00:01:31.840 --> 00:01:32.810
defines them.

28
00:01:32.810 --> 00:01:34.720
It doesn't define all
the library functions,

29
00:01:34.720 --> 00:01:36.910
it defines their inputs and outputs.

30
00:01:36.910 --> 00:01:38.130
It doesn't have all the code for the, but

31
00:01:38.130 --> 00:01:40.690
it says each function,
here's what it takes.

32
00:01:40.690 --> 00:01:43.040
One input, one output,
something like that.

33
00:01:43.040 --> 00:01:44.020
It lists that.

34
00:01:44.020 --> 00:01:45.974
Gives what are called function prototypes.

35
00:01:45.974 --> 00:01:49.645
So, but the point is that if you want
to include a library, use a library,

36
00:01:49.645 --> 00:01:51.540
then you have to include it at the top,

37
00:01:51.540 --> 00:01:54.461
include at least it's header
file at the top of your code.

38
00:01:54.461 --> 00:01:58.860
So, stdio, if you want to use
printer function for printing,

39
00:01:58.860 --> 00:02:01.300
you've got to include stdio.h.

40
00:02:01.300 --> 00:02:03.870
So, you do that and that's at the top.

41
00:02:03.870 --> 00:02:06.710
And you can include any number of
libraries depending on what type of coding

42
00:02:06.710 --> 00:02:08.930
you're doing, but
we'll stick with the standard library.

43
00:02:08.930 --> 00:02:10.840
So standard io.h,
you include that at the top.

44
00:02:12.150 --> 00:02:16.400
Now then, inside the code, so
printf is inside standard io.

45
00:02:16.400 --> 00:02:18.290
And that's exactly why
we're including that.

46
00:02:18.290 --> 00:02:19.580
So that's the first line.

47
00:02:20.750 --> 00:02:25.610
Now inside the program, after you've done
the include, you have the main function.

48
00:02:25.610 --> 00:02:27.960
So there's a function defined called main.

49
00:02:27.960 --> 00:02:30.900
And we'll talk in more detail
about functions a little bit.

50
00:02:30.900 --> 00:02:34.060
But the main function, it starts out
with this main, open parenthesis,

51
00:02:34.060 --> 00:02:35.180
closed parenthesis.

52
00:02:35.180 --> 00:02:38.100
This is where all the execution starts.

53
00:02:38.100 --> 00:02:40.850
So when it sees that main it says okay,

54
00:02:40.850 --> 00:02:42.720
this is where I want to
start running my code.

55
00:02:42.720 --> 00:02:45.400
When it's time to run the code,
I go to the beginning of the main and

56
00:02:45.400 --> 00:02:46.340
run from there.

57
00:02:46.340 --> 00:02:46.910
Okay.
So

58
00:02:46.910 --> 00:02:50.210
main marks the beginning of the code,
all execution starts at the main.

59
00:02:50.210 --> 00:02:57.840
So every C program, or C++ program,
has to have a main in it.

60
00:02:57.840 --> 00:02:59.120
Now, curly brackets.

61
00:02:59.120 --> 00:03:03.830
After the main, there's an open curly
bracket, then there's a little code, and

62
00:03:03.830 --> 00:03:05.710
then there's a closed curly bracket.

63
00:03:05.710 --> 00:03:08.770
So curly brackets are used to
groups statements together into

64
00:03:08.770 --> 00:03:09.879
what are called scopes.

65
00:03:11.050 --> 00:03:14.690
So, but the idea here is that if
there's a function, so the main,

66
00:03:14.690 --> 00:03:16.060
it's a list of instructions.

67
00:03:16.060 --> 00:03:18.690
In our case, it's one instruction.

68
00:03:18.690 --> 00:03:22.170
But you could have many instructions
inside your main function, right.

69
00:03:22.170 --> 00:03:24.312
All of them have to be grouped
together in curly brackets.

70
00:03:24.312 --> 00:03:27.323
So you have an open curly bracket,
then you have all your instructions, and

71
00:03:27.323 --> 00:03:28.794
then you have a close curly bracket.

72
00:03:28.794 --> 00:03:32.560
And then all those instructions in between
the curly brackets are part of main.

73
00:03:32.560 --> 00:03:35.260
So whenever you start executing,
you execute the main,

74
00:03:35.260 --> 00:03:38.280
you execute all those instructions
one at a time from the top.

75
00:03:38.280 --> 00:03:40.440
Not all of them,
depending on the control flow, but

76
00:03:40.440 --> 00:03:42.390
you start executing at the top
of those instructions.

77
00:03:43.490 --> 00:03:44.460
So that's the idea.

78
00:03:44.460 --> 00:03:46.959
All functions have to start and
end with curly brackets.

79
00:03:48.730 --> 00:03:52.500
Now inside their, inside our function,
our main function, we have a printf,

80
00:03:52.500 --> 00:03:53.680
print statement.

81
00:03:53.680 --> 00:03:55.710
And that just basically prints
to the screen by default.

82
00:03:57.120 --> 00:04:01.500
Inside the parenthesis, you put in
quotes whatever you want to print.

83
00:04:01.500 --> 00:04:04.920
So in our case, we wanna print the word,
the phrase, hello world.

84
00:04:04.920 --> 00:04:06.860
So you say printf and then in parenthesis,

85
00:04:06.860 --> 00:04:10.070
you have quotes Hello world,
closed quotes.

86
00:04:10.070 --> 00:04:12.557
And there's a semi colon at
the end of the print statement,

87
00:04:12.557 --> 00:04:14.766
after the print statement,
that's standard in C.

88
00:04:14.766 --> 00:04:18.172
These traditional statements,
assignment statements and

89
00:04:18.172 --> 00:04:21.841
so forth, function calls,
you put a semi colon at the end after,

90
00:04:21.841 --> 00:04:26.380
at the end of your statement so
that C knows that the line has ended.

91
00:04:26.380 --> 00:04:31.910
And note that, that means that
the indentation doesn't matter.

92
00:04:31.910 --> 00:04:34.210
The spacing, indentation,
the file doesn't matter at all.

93
00:04:34.210 --> 00:04:35.620
All it's looking at is semicolons.

94
00:04:35.620 --> 00:04:39.180
So say you got a program
that is 20 lines long.

95
00:04:39.180 --> 00:04:42.570
You can put them on the same
physical line in your text editor.

96
00:04:42.570 --> 00:04:44.440
It could be never hitting Return.

97
00:04:44.440 --> 00:04:46.990
You could just have one long
line with 20 statements.

98
00:04:46.990 --> 00:04:50.970
As long as you put semicolons between
them, C will execute it just fine.

99
00:04:50.970 --> 00:04:54.299
So that's what the semicolons are for.

100
00:04:54.299 --> 00:04:57.338
Now, this isn't a main,
this is a different main, but

101
00:04:57.338 --> 00:05:00.770
it does exactly the same
thing as the first main.

102
00:05:00.770 --> 00:05:07.560
So, in quotes in the original main,
we said, "hello, world\n".

103
00:05:07.560 --> 00:05:10.820
So there's, if you'll notice
the slash n it's a special character.

104
00:05:10.820 --> 00:05:11.860
So hello world is clear.

105
00:05:11.860 --> 00:05:13.680
It prints the word hello world.

106
00:05:13.680 --> 00:05:17.150
Then the slash n is a carriage return,
a new line.

107
00:05:17.150 --> 00:05:20.190
So whenever it sees a slash n,
it goes to the next line,

108
00:05:20.190 --> 00:05:23.820
which means that if you didn't put the
slash n, it wouldn't go to the next line.

109
00:05:23.820 --> 00:05:25.830
So for instance,
in the program that we have up here,

110
00:05:25.830 --> 00:05:31.880
this main right here It first does
a print hello, then it prints world.

111
00:05:31.880 --> 00:05:34.460
But notice that there's
no slash n in between.

112
00:05:34.460 --> 00:05:37.510
So what that means is it'll print hello,
and then on the same line,

113
00:05:37.510 --> 00:05:40.100
it will print world,
because we didn't put a new line.

114
00:05:40.100 --> 00:05:41.244
Then it prints a new line, so

115
00:05:41.244 --> 00:05:43.848
anything else we print after
that would be on the next line.

116
00:05:43.848 --> 00:05:46.179
So that \n is a special character, and

117
00:05:46.179 --> 00:05:50.570
theres several of these special
characters that you can print and quote.

118
00:05:50.570 --> 00:05:51.811
But we won't belabor that,

119
00:05:51.811 --> 00:05:55.434
because this isn't the type of thing
that's actually particularly important for

120
00:05:55.434 --> 00:05:59.360
Arduino, because you're not generally
doing a lot of string manipulations.

121
00:05:59.360 --> 00:06:00.470
With Arduinos,

122
00:06:00.470 --> 00:06:04.580
you can but there's generally no need
since you're not printing anything, right.

123
00:06:04.580 --> 00:06:07.900
You're not having a screen generally,
so it's not something we worry about.

124
00:06:07.900 --> 00:06:13.170
But \n is useful, because carriage return
is something you often want to print, so.

125
00:06:13.170 --> 00:06:16.699
And even in the Arduino,
when we start using a serial interface,

126
00:06:16.699 --> 00:06:20.741
we'll be printing stuff to the screen for
diagnostics and debugging, and

127
00:06:20.741 --> 00:06:21.722
stuff like that.

128
00:06:21.722 --> 00:06:25.668
And we'll want to put carriage returns
in there so that we can read the text.

129
00:06:25.668 --> 00:06:26.695
Thank you.

130
00:06:26.695 --> 00:06:35.849
[MUSIC]