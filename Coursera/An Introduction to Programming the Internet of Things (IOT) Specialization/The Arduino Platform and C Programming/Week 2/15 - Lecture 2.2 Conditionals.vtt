WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.035 --> 00:00:14.971
This lecture is about conditional
operation inside a C program.

3
00:00:14.971 --> 00:00:19.067
So if you have a program with no
conditionals, that's unusual, but you can

4
00:00:19.067 --> 00:00:23.990
have a program with no conditionals,
where it just executes line after line.

5
00:00:23.990 --> 00:00:26.119
But a lot of time,
most of the time in programs,

6
00:00:26.119 --> 00:00:29.747
you wanna have conditionals where you
execute some code under some conditions,

7
00:00:29.747 --> 00:00:32.430
and execute other code
under other conditions.

8
00:00:32.430 --> 00:00:35.840
So that's what we're talking about here,
how you implement conditionals inside C.

9
00:00:37.800 --> 00:00:41.950
So the main conditional statement
is going to be an if statement.

10
00:00:43.050 --> 00:00:45.570
And I, we're showing two forms
of an if statement right here.

11
00:00:47.150 --> 00:00:48.750
Let's take the one on the left.

12
00:00:48.750 --> 00:00:52.890
If expression is true, then execute
statement1, else execute statement2.

13
00:00:52.890 --> 00:00:57.040
So you'll notice after the word if,
there's an expression in parentheses.

14
00:00:57.040 --> 00:00:59.530
That expression is evaluated at run time.

15
00:00:59.530 --> 00:01:02.810
If it turns out to be true,
then statement1 is executed.

16
00:01:02.810 --> 00:01:04.380
Else, statement2 is executed.

17
00:01:04.380 --> 00:01:06.910
And note that you don't
have to have a statement2.

18
00:01:06.910 --> 00:01:11.450
You could just say if expression
statement1 and leave it at that, no else.

19
00:01:11.450 --> 00:01:13.630
Then if the expression is
true it executes statement1,

20
00:01:13.630 --> 00:01:17.650
if it's not true it executes nothing,
it just moves on to the next statement.

21
00:01:18.860 --> 00:01:24.220
So on the other side you got if and
then an else if, this is an extension.

22
00:01:24.220 --> 00:01:27.520
So this is sort of a chain,
a series of if statements.

23
00:01:27.520 --> 00:01:31.850
So you can if expression1,
then execute statement1.

24
00:01:31.850 --> 00:01:34.550
Else, if expression2, execute statement2.

25
00:01:34.550 --> 00:01:36.200
And you can continue this, right?

26
00:01:36.200 --> 00:01:39.190
You can say else, if expression3,
execute statement3 and so on.

27
00:01:39.190 --> 00:01:42.210
You could continue that as long as you
want, and at the end you typically put

28
00:01:42.210 --> 00:01:46.050
an else statement, else statement3,
or in this case, statement3.

29
00:01:46.050 --> 00:01:48.520
So what happens is first
it checks expression1.

30
00:01:48.520 --> 00:01:51.360
If that's true,
then it executes statement1 and

31
00:01:51.360 --> 00:01:53.450
it's done with the entire if statement.

32
00:01:53.450 --> 00:01:56.510
If that's not true then it goes to
the next expression and checks it.

33
00:01:56.510 --> 00:01:58.420
And then if that's not true,
it goes to the next.

34
00:01:58.420 --> 00:02:02.230
So it goes down the list of expressions
until it hits one that's true.

35
00:02:02.230 --> 00:02:05.560
As soon as it hits one that's true it
executes the appropriate statement and

36
00:02:05.560 --> 00:02:08.650
then it exits the if statement.

37
00:02:08.650 --> 00:02:11.440
And if all else fails it
hits the else at the end.

38
00:02:11.440 --> 00:02:12.890
Which, by the way, the else is optional.

39
00:02:12.890 --> 00:02:14.410
You can just leave out
the else if you wanted to.

40
00:02:15.650 --> 00:02:18.530
So, those are two forms of if statements,
if and else if also.

41
00:02:20.090 --> 00:02:21.980
Here's an example, a conditional example.

42
00:02:21.980 --> 00:02:24.040
We've got a main.

43
00:02:24.040 --> 00:02:26.620
So, we declare an integer x,
and we set it equal to 1,

44
00:02:26.620 --> 00:02:29.150
which we can do on the same line,
int x = 1.

45
00:02:29.150 --> 00:02:33.008
Then, if x = 1, which it is,
printf("Correct"),

46
00:02:33.008 --> 00:02:35.720
else printf("Incorrect").

47
00:02:35.720 --> 00:02:37.480
So that's a typical if statement.

48
00:02:37.480 --> 00:02:41.889
Now one thing to note about this if
statement is that, so statement1 and

49
00:02:41.889 --> 00:02:42.840
statement2.

50
00:02:42.840 --> 00:02:45.140
Statement1 we'll call printf("Correct").

51
00:02:45.140 --> 00:02:47.120
Statement2 is printf("Incorrect").

52
00:02:47.120 --> 00:02:49.730
These two statements they
are single statements, so

53
00:02:49.730 --> 00:02:54.180
if x = 1 we're executing in
this case only one statement.

54
00:02:54.180 --> 00:02:55.730
But you could execute many.

55
00:02:55.730 --> 00:02:57.440
There are many cases
where you might say look,

56
00:02:57.440 --> 00:03:00.830
if x = 1 I wanna do 10 statements or
something like that.

57
00:03:00.830 --> 00:03:02.860
To do that, you can do that, but

58
00:03:02.860 --> 00:03:06.300
you've gotta use curly brackets
to group the statements.

59
00:03:06.300 --> 00:03:08.880
So notice here,
there are no curly brackets,

60
00:03:08.880 --> 00:03:11.780
there's a curly bracket that defines main,
one at the top, one at the bottom, but

61
00:03:11.780 --> 00:03:14.060
there are no curly brackets
inside the if statement.

62
00:03:14.060 --> 00:03:18.810
But if I wanted to have multiple
statements executed, if x = 1,

63
00:03:18.810 --> 00:03:20.270
then I would put curly brackets in.

64
00:03:20.270 --> 00:03:24.210
So I would say if x = 1,
then I have an open curly bracket,

65
00:03:24.210 --> 00:03:28.010
then I have as many statements as I wanted
then I have a closed curly bracket.

66
00:03:28.010 --> 00:03:31.590
And then I can say else
printf("Incorrect") okay.

67
00:03:31.590 --> 00:03:34.510
So you can have many statements
executed on the true or

68
00:03:34.510 --> 00:03:36.450
false sides of that if statement.

69
00:03:36.450 --> 00:03:38.180
As long as you group
them in curly brackets.

70
00:03:40.650 --> 00:03:45.760
Now switch, it's another type
of conditional branch statement,

71
00:03:45.760 --> 00:03:47.990
and it's useful in a lot of cases.

72
00:03:47.990 --> 00:03:51.030
What it does is,
it basically takes a variable,

73
00:03:51.030 --> 00:03:55.280
some expression, okay and
the expression is evaluated.

74
00:03:55.280 --> 00:03:56.670
So you switch against some expression.

75
00:03:56.670 --> 00:03:58.440
The expression in
parenthesis is evaluated,

76
00:03:58.440 --> 00:04:01.220
as compared to a set of
constant expressions.

77
00:04:01.220 --> 00:04:05.250
So a common way to do this is
say you got a variable x, right.

78
00:04:05.250 --> 00:04:07.963
And you know it's gonna equal either 0,
1, 2, or 3.

79
00:04:07.963 --> 00:04:12.010
And under each condition,
you wanna do a different thing.

80
00:04:12.010 --> 00:04:16.800
So, you could say switch x,
the expression would be x itself.

81
00:04:16.800 --> 00:04:23.990
And then you'd say case 0, statement,
whatever, statement1, case1, case2.

82
00:04:23.990 --> 00:04:26.702
And so the constant expression,
case0, case1,

83
00:04:26.702 --> 00:04:30.640
case2, that's compared to
whatever the expression is, okay?

84
00:04:30.640 --> 00:04:33.535
And if it matches,
if the expression evaluates to 0 and

85
00:04:33.535 --> 00:04:36.270
you have a case0,
then statement1 is executed.

86
00:04:36.270 --> 00:04:39.140
If you have a case1 and
the expression matches that,

87
00:04:39.140 --> 00:04:41.380
then statement2 is executed, and so on.

88
00:04:41.380 --> 00:04:46.660
And default is optional, it's if nothing
matches, you execute the default.

89
00:04:46.660 --> 00:04:50.840
It's like the else at the end of an if
statement, if else if statement.

90
00:04:50.840 --> 00:04:54.210
Actually a switch is an alternative
to using ifs and else ifs.

91
00:04:54.210 --> 00:04:56.910
If else if,
else if is an alternative way to do this.

92
00:04:58.400 --> 00:05:01.190
So here's an example of a switch.

93
00:05:01.190 --> 00:05:04.280
And it's important to use these
break statements in the switch, but

94
00:05:04.280 --> 00:05:06.170
I'll talk about that in a second.

95
00:05:06.170 --> 00:05:08.300
So let's say I have my switch, switch x.

96
00:05:08.300 --> 00:05:09.740
X is my expression.

97
00:05:09.740 --> 00:05:13.050
Notice there are three cases,
case 0, case 1, case 2.

98
00:05:13.050 --> 00:05:17.180
And what'll happen is x is gonna
be first matched, compared to 0.

99
00:05:17.180 --> 00:05:19.900
If it matches,
then it executes that statement y = 1.

100
00:05:19.900 --> 00:05:24.048
But if it doesn't match that,
then x is gonna be compared to case 1, and

101
00:05:24.048 --> 00:05:27.727
then it's gonna be compared to 2,
so compared to 0, 1, 2.

102
00:05:27.727 --> 00:05:32.383
And one thing about a switch though,
that's a little bit annoying,

103
00:05:32.383 --> 00:05:35.444
frankly, is that it,
so it does what I said.

104
00:05:35.444 --> 00:05:38.509
It'll start off, it'll take x,
compare it to 0, right?

105
00:05:38.509 --> 00:05:44.410
Now, if x doesn't match 0, then it'll go
to the next case and try comparing x to 1.

106
00:05:44.410 --> 00:05:50.300
But if x does match 0, it'll execute
every statement from that point on.

107
00:05:50.300 --> 00:05:53.300
So that means in the way
that this is written if

108
00:05:53.300 --> 00:05:58.470
x = 0 it'll say case 0,
it'll match that case.

109
00:05:58.470 --> 00:06:00.090
It'll assign y equal to 1.

110
00:06:00.090 --> 00:06:03.300
But then notice it'll continue execution.

111
00:06:03.300 --> 00:06:06.727
It'll go on to the next statement,
y = 2, and execute that also.

112
00:06:06.727 --> 00:06:10.512
A very weird and
annoying thing about switches in C.

113
00:06:10.512 --> 00:06:12.980
Cuz usually that's not what you want.

114
00:06:12.980 --> 00:06:17.160
Usually you want these cases to be
mutually exclusive, meaning if x = 0,

115
00:06:17.160 --> 00:06:19.240
you execute case 0 and that's that.

116
00:06:19.240 --> 00:06:21.310
If x = 1, you execute case 1 and
that's that.

117
00:06:21.310 --> 00:06:22.570
You like them to be separate.

118
00:06:22.570 --> 00:06:24.390
But that's not how C is.

119
00:06:24.390 --> 00:06:26.050
So in order to make it that way,

120
00:06:26.050 --> 00:06:30.020
which is a very common thing people
want to do you use a break statement.

121
00:06:30.020 --> 00:06:32.540
Now I've put one in there,
normally I would put

122
00:06:32.540 --> 00:06:35.230
one break statement in every case but
in this case I put one in there.

123
00:06:35.230 --> 00:06:38.840
So let's say if you look at case 1,
let's say x = 1.

124
00:06:38.840 --> 00:06:42.610
So x matches case 1 so
the next statement is y = 2.

125
00:06:42.610 --> 00:06:44.930
So executes that y = 2 statement.

126
00:06:44.930 --> 00:06:46.760
Then after that there's a break.

127
00:06:46.760 --> 00:06:50.540
What a break does in a switch
is it says stop right now and

128
00:06:50.540 --> 00:06:52.880
do not execute anything
else after this line.

129
00:06:52.880 --> 00:06:55.170
And it jumps out of the case.

130
00:06:55.170 --> 00:06:57.620
So out of the switch
statement all together.

131
00:06:57.620 --> 00:07:01.100
So what will happen is if x = 1 it'll
execute y = 2, it'll hit the break, and

132
00:07:01.100 --> 00:07:03.250
it won't reach that case 2.

133
00:07:03.250 --> 00:07:05.900
It'll just skip straight
to the end of the switch.

134
00:07:05.900 --> 00:07:10.090
So it's very common in a switch statement
if you have 3 cases like this, case 0,

135
00:07:10.090 --> 00:07:12.620
case 1, case 2, you put 3 breaks.

136
00:07:12.620 --> 00:07:15.130
You'll put a break at the end of case 0,
a break at the end of case 1 and

137
00:07:15.130 --> 00:07:16.590
a break at the end of case 2.

138
00:07:16.590 --> 00:07:19.240
Actually, case 2 you don't
technically need a break since

139
00:07:19.240 --> 00:07:20.960
it's at the end already, all right?

140
00:07:20.960 --> 00:07:23.379
So you put a break at
the end of case 0 and case 1,

141
00:07:23.379 --> 00:07:26.166
that's a very common way to
use a break inside a switch.

142
00:07:26.166 --> 00:07:31.281
So be wary of switches when you use them,
because if you don't use the break, then

143
00:07:31.281 --> 00:07:36.564
if x matches 0, case 0, then it'll also
execute case 1 as if it matched that too.

144
00:07:36.564 --> 00:07:38.840
And that can be confusing sometimes.

145
00:07:38.840 --> 00:07:40.884
Sometimes that's what you want,
but just be aware.

146
00:07:40.884 --> 00:07:41.847
Thank you.

147
00:07:41.847 --> 00:07:51.339
[MUSIC].