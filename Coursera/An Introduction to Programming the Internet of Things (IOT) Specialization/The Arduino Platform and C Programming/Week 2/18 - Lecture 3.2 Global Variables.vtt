WEBVTT

1
00:00:00.000 --> 00:00:07.672
[MUSIC]

2
00:00:11.587 --> 00:00:13.909
We're gonna talk about
variables a little bit more,

3
00:00:13.909 --> 00:00:17.220
specifically a type of variables
called global variables.

4
00:00:17.220 --> 00:00:20.337
They are used a lot, so
you need to know what they are.

5
00:00:20.337 --> 00:00:22.170
In small programs, maybe they are okay.

6
00:00:22.170 --> 00:00:23.711
Generally, they are dangerous.

7
00:00:23.711 --> 00:00:26.462
They are risky, but
you certainly need to know what they are.

8
00:00:26.462 --> 00:00:30.879
So let's explain them.

9
00:00:30.879 --> 00:00:35.788
So generally, regular variables
are declared inside a function and

10
00:00:35.788 --> 00:00:38.588
they only exist inside that function.

11
00:00:38.588 --> 00:00:41.811
So not ignoring what
the pictures I have up there,

12
00:00:41.811 --> 00:00:46.109
think about in the last lecture,
you have a function called foo and

13
00:00:46.109 --> 00:00:50.128
inside that function called foo
you declare a variable int i.

14
00:00:50.128 --> 00:00:54.504
Now that int i,
that i is alive when you're executing foo.

15
00:00:54.504 --> 00:00:55.719
Only within foo, so

16
00:00:55.719 --> 00:01:00.296
it's scope is limited to the execution
of the function where it is defined.

17
00:01:00.296 --> 00:01:04.438
So what that means is if
you have a main function,

18
00:01:04.438 --> 00:01:08.087
which calls foo, the main doesn't see i.

19
00:01:08.087 --> 00:01:13.002
Since you defined i inside foo,
i is only visible inside foo and

20
00:01:13.002 --> 00:01:14.960
then main can't see it.

21
00:01:15.990 --> 00:01:20.954
So that's normal variables and they call
those local variables, cuz this variable,

22
00:01:20.954 --> 00:01:23.879
they say a variable's scope,
it exists locally.

23
00:01:23.879 --> 00:01:27.379
Its scope is bound by the function
in which it is defined, so

24
00:01:27.379 --> 00:01:28.855
It's a local variable.

25
00:01:28.855 --> 00:01:34.865
So if I say, int i inside my function foo,
then that i only exists inside foo.

26
00:01:34.865 --> 00:01:38.905
And if I have another function called
bar or something like that and I say,

27
00:01:38.905 --> 00:01:41.463
int x, that x only exists inside bar and
so on.

28
00:01:41.463 --> 00:01:44.489
So those are local variables,
the standard variables.

29
00:01:45.540 --> 00:01:47.120
Now you can also have global variables.

30
00:01:47.120 --> 00:01:51.674
A global variable is basically a variable
where more than one function can see that

31
00:01:51.674 --> 00:01:52.337
variable.

32
00:01:52.337 --> 00:01:58.129
They share a copy of the same variable.

33
00:01:58.129 --> 00:02:00.712
So if you look at the top, int global_i.

34
00:02:00.712 --> 00:02:04.295
So I've defined some variable called
global_i and it's an i variable,

35
00:02:04.295 --> 00:02:05.171
which is global.

36
00:02:05.171 --> 00:02:06.587
I want everybody to see it.

37
00:02:06.587 --> 00:02:08.754
So I declare it, int global_i.

38
00:02:08.754 --> 00:02:12.001
Note that in order to make a variable
global, first thing you've got to do is

39
00:02:12.001 --> 00:02:15.000
declare it outside of any function,
which is what I've done.

40
00:02:15.000 --> 00:02:17.984
I could have ten functions,
I'm only showing foo, but I could have ten

41
00:02:17.984 --> 00:02:21.087
functions, but I declare this global
variable outside of any function.

42
00:02:21.087 --> 00:02:24.421
Cuz if you declare it inside a function,
it becomes local to that function.

43
00:02:24.421 --> 00:02:26.171
So, I declare it outside.

44
00:02:26.171 --> 00:02:30.688
Now in addition, what you have to do in
order for this variable to be globally

45
00:02:30.688 --> 00:02:35.558
seen by other functions, every function
where you want this variable to be seen,

46
00:02:35.558 --> 00:02:38.810
to be used,
you have to declare it as an extern.

47
00:02:38.810 --> 00:02:42.254
So look at that foo, it says,
extern into global_i.

48
00:02:42.254 --> 00:02:45.910
So, it looks like I'm
re-declaring the same variable.

49
00:02:45.910 --> 00:02:49.838
But notice I put that extern in front of
it, which means it's an external variable.

50
00:02:49.838 --> 00:02:52.503
So that means that this
is gonna be global.

51
00:02:52.503 --> 00:02:57.765
So in my foo for the top of it, if I say,
extern int global_i, then anytime I refer

52
00:02:57.765 --> 00:03:03.940
to global i inside my foo, I'm referring
to the one global_i that everybody sees.

53
00:03:03.940 --> 00:03:07.462
So those are the two things you have
to do to make a global variable.

54
00:03:07.462 --> 00:03:10.379
First, define the variable
outside of any function.

55
00:03:10.379 --> 00:03:13.719
Then inside every function where
you wanna use that global variable,

56
00:03:13.719 --> 00:03:15.423
you have to declare it as an extern.

57
00:03:15.423 --> 00:03:19.255
Extern and or extern float, whatever
type it is, gives you the variable name.

58
00:03:19.255 --> 00:03:24.697
Now that second thing about
declaring it as an extern variable,

59
00:03:24.697 --> 00:03:27.629
that is not strictly always true.

60
00:03:27.629 --> 00:03:30.795
And in fact, in the Arduino
sketches that we're gonna see,

61
00:03:30.795 --> 00:03:32.296
they don't adhere to that.

62
00:03:32.296 --> 00:03:37.377
So the one thing you have to do is
declare the variable outside of any

63
00:03:37.377 --> 00:03:42.212
other function, but that extern,
you don't have to do that.

64
00:03:42.212 --> 00:03:46.776
As long as you declare this global
variable outside of the scope of any other

65
00:03:46.776 --> 00:03:49.891
function, you declare it
at the top of your file and

66
00:03:49.891 --> 00:03:55.046
you're using only one c file, then you
don't have to do the extern into global_i.

67
00:03:55.046 --> 00:03:57.735
[COUGH] If you just refer to
global_i inside your foo,

68
00:03:57.735 --> 00:04:00.790
it will know that you mean the global one.

69
00:04:00.790 --> 00:04:05.100
But that only works,
if foo is in the same file and

70
00:04:05.100 --> 00:04:09.421
foo is defined after
the global_i is declared.

71
00:04:09.421 --> 00:04:13.054
So in our Arduino's sketches, you'll see
where they'll, like right at the top of

72
00:04:13.054 --> 00:04:17.130
the sketch, they'll define some external
variable into x or something like that.

73
00:04:17.130 --> 00:04:20.955
And then inside all of these functions,
they'll use x, but

74
00:04:20.955 --> 00:04:23.587
they won't extern it and that will work.

75
00:04:23.587 --> 00:04:27.178
Now the extern way is the proper way to do
it and if you have a big problem, which

76
00:04:27.178 --> 00:04:31.004
we're probably not gonna get to programs
this big and complicated in this class.

77
00:04:31.004 --> 00:04:34.068
But if you have a big program,
you've got multiple C files,

78
00:04:34.068 --> 00:04:38.215
multiple C++ files, whatever they are and
you wanna have a global variable that

79
00:04:38.215 --> 00:04:42.130
spans all these different files,
then you have to use the extern.

80
00:04:42.130 --> 00:04:43.760
Otherwise, one file won't see it.

81
00:04:45.060 --> 00:04:47.172
So that's a global variable.

82
00:04:47.172 --> 00:04:51.566
So global variables can be dangerous
in the sense that the program is less

83
00:04:51.566 --> 00:04:54.961
compartmentalized, so
they're sharing variables.

84
00:04:54.961 --> 00:04:59.331
So what that means is if two
functions share the same variable,

85
00:04:59.331 --> 00:05:03.379
then one function can alter and
mess up another function.

86
00:05:03.379 --> 00:05:06.710
So in this case,
we see a foo and we see bar.

87
00:05:06.710 --> 00:05:12.075
So foo writes to global_ i,
global_i equals a plus b,

88
00:05:12.075 --> 00:05:17.337
whatever it is and
then bar uses global_i to assign x.

89
00:05:17.337 --> 00:05:21.526
Now if somehow foo does something
wrong say, foo is written incorrectly,

90
00:05:21.526 --> 00:05:22.463
say it has a bug.

91
00:05:22.463 --> 00:05:27.211
So it writes to global_i, but
it writes the wrong value to global_i,

92
00:05:27.211 --> 00:05:32.296
then that bug is not just contained
inside foo, that bug now spreads to bar.

93
00:05:32.296 --> 00:05:35.851
Because not only does foo do something
wrong, but now bar is forced to do

94
00:05:35.851 --> 00:05:39.180
something wrong, because bar is
getting the wrong data from foo.

95
00:05:40.190 --> 00:05:43.177
So it's just another connection
between functions and

96
00:05:43.177 --> 00:05:46.046
it's not an obvious
connection between functions.

97
00:05:46.046 --> 00:05:50.260
So that's another bad problem, because one
way to connect functions to trade data

98
00:05:50.260 --> 00:05:54.534
between functions is if one function calls
another function, it passes that data in

99
00:05:54.534 --> 00:05:57.629
the form of an argument and
that's a nice narrow interface.

100
00:05:57.629 --> 00:06:02.677
Meaning, you know this is the pipeline
of information, but globals are these

101
00:06:02.677 --> 00:06:08.046
Information type lines between functions
that are not obvious to the programmer.

102
00:06:08.046 --> 00:06:12.379
So, it's hard to necessarily remember
all the global interactions.

103
00:06:12.379 --> 00:06:16.297
So these type of things are more difficult
to see, they're connections between

104
00:06:16.297 --> 00:06:19.190
functions that are more difficult
to see for a programmer.

105
00:06:19.190 --> 00:06:23.189
So it makes debugging hard, because when
the problem happens it's hard to remember,

106
00:06:23.189 --> 00:06:24.797
oh, wait a minute that's right.

107
00:06:24.797 --> 00:06:28.463
Foo is passing data to
bar through this global.

108
00:06:28.463 --> 00:06:31.679
So if foo went wrong that could have
messed up bar, it's just another

109
00:06:31.679 --> 00:06:34.962
consideration you have to worry
about when you're doing debugging.

110
00:06:34.962 --> 00:06:38.871
So debugging can become harder
when the code is less modular,

111
00:06:38.871 --> 00:06:40.837
because of global variables.

112
00:06:40.837 --> 00:06:45.422
So generally,
you try to avoid using global variables.

113
00:06:45.422 --> 00:06:49.449
But especially in these Arduino sketches,
they're so short people use them anyway

114
00:06:49.449 --> 00:06:52.830
and they are so small that maybe
it doesn't matter at that scale.

115
00:06:52.830 --> 00:06:56.511
It's sort of a bad programming
practice to get into though, but

116
00:06:56.511 --> 00:06:59.047
I tell you I see it a lot
in Arduino sketches.

117
00:06:59.047 --> 00:06:59.798
Thank you.

118
00:06:59.798 --> 00:07:06.046
[MUSIC]