WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:11.419 --> 00:00:16.251
In this lecture, we'll talk about how you
compile using the IDE, how you compile,

3
00:00:16.251 --> 00:00:20.945
and you upload using IDE, and what it
looks like, so, and what errors look like,

4
00:00:20.945 --> 00:00:23.010
which you will most certainly see.

5
00:00:24.660 --> 00:00:25.860
So compiling code.

6
00:00:25.860 --> 00:00:27.062
If you want to compile a code,

7
00:00:27.062 --> 00:00:30.670
cross-compile technically,
you can either verify or upload.

8
00:00:30.670 --> 00:00:32.430
So those are both buttons,
verify and upload.

9
00:00:32.430 --> 00:00:35.420
Also, you can get those
from the pull-down menus.

10
00:00:35.420 --> 00:00:37.930
So verify and
upload both compile the code.

11
00:00:37.930 --> 00:00:40.535
Upload additionally copies a code,
the executable,

12
00:00:40.535 --> 00:00:44.000
final executable to the Arduino, but
both of those will compile a code.

13
00:00:45.110 --> 00:00:50.360
Now, what happens is when you do it,
there's a message window at the bottom.

14
00:00:50.360 --> 00:00:53.630
And the message window is there to
show you the status of the compile.

15
00:00:54.830 --> 00:00:57.230
So it will either,
after it's done compiling,

16
00:00:57.230 --> 00:01:00.623
it'll either show you some completion
message, to say, you know,

17
00:01:00.623 --> 00:01:04.311
compile complete, something like
done uploading if you're uploading,

18
00:01:04.311 --> 00:01:07.840
something like that, or it'll show
you an error, one or more errors.

19
00:01:08.930 --> 00:01:12.080
Error messages will show the line numbers,
too.

20
00:01:12.080 --> 00:01:13.910
So whenever there's
an error inside your code,

21
00:01:13.910 --> 00:01:16.120
you want to know where in
your code it happened.

22
00:01:16.120 --> 00:01:19.675
So it helps you to find
the errors somewhat.

23
00:01:19.675 --> 00:01:23.165
So first thing, you can see that, so in
this program, if you look at the program,

24
00:01:23.165 --> 00:01:25.475
I'm just showing a few lines,
three lines of code.

25
00:01:25.475 --> 00:01:28.375
In this program I messed
up the code intentionally.

26
00:01:28.375 --> 00:01:29.465
I typed in an XX.

27
00:01:29.465 --> 00:01:31.880
So if you look in there, there's a line,
and it's highlighted pink.

28
00:01:31.880 --> 00:01:32.685
Okay?

29
00:01:32.685 --> 00:01:37.385
That line, I typed in the letters XX,
just to put an error in there, right?

30
00:01:37.385 --> 00:01:39.400
So that's an error, bad syntax.

31
00:01:39.400 --> 00:01:41.800
So when I compiled it, it gave an error.

32
00:01:41.800 --> 00:01:43.830
First thing it did was,
in the error, well,

33
00:01:43.830 --> 00:01:45.660
you can look in the message window and
it reports the error.

34
00:01:45.660 --> 00:01:48.510
It says what the error,
XX is not good text.

35
00:01:48.510 --> 00:01:50.510
And it tells you the line
number that it's on.

36
00:01:50.510 --> 00:01:53.540
So you can go back to the code and
figure out which line number it's on.

37
00:01:53.540 --> 00:01:57.290
Also, you can see in the main
text editor that it's highlighted

38
00:01:59.380 --> 00:02:03.730
pink the line with the error on it,
with the first error.

39
00:02:03.730 --> 00:02:04.710
So that's also helpful.

40
00:02:04.710 --> 00:02:05.900
You can look straight at that line.

41
00:02:05.900 --> 00:02:07.090
I mean,
you don't have to look at the line number.

42
00:02:07.090 --> 00:02:09.150
You can just look at the line
that's highlighted and say, okay,

43
00:02:09.150 --> 00:02:10.170
there's my first error.

44
00:02:10.170 --> 00:02:13.280
So it's helping you to zero-in
on where the errors are.

45
00:02:13.280 --> 00:02:16.560
And then you examine the line and
try to find it.

46
00:02:16.560 --> 00:02:19.130
Just a warning about these errors,

47
00:02:19.130 --> 00:02:21.390
you'll notice that it gives
you an error on that line.

48
00:02:21.390 --> 00:02:23.680
It also gives you an error
on the next line, right?

49
00:02:23.680 --> 00:02:25.510
This happens in C a lot.

50
00:02:25.510 --> 00:02:29.120
Because with C you get these semicolons
at the end of your statements.

51
00:02:29.120 --> 00:02:30.450
Notice the statements up there,

52
00:02:30.450 --> 00:02:34.890
each line, correct ending would
be a semicolon at the end.

53
00:02:34.890 --> 00:02:38.460
So since there's a line with the error,
you can see there's a semicolon and

54
00:02:38.460 --> 00:02:41.100
then there's an XX after the semicolon.

55
00:02:41.100 --> 00:02:44.705
And what happens is that
the compiler thinks,

56
00:02:44.705 --> 00:02:47.730
look, anything between two
semicolons is one line.

57
00:02:47.730 --> 00:02:51.570
So it thinks the XX is actually
the beginning of the next line.

58
00:02:51.570 --> 00:02:53.940
And that's why it gives us
an error on the next line as well,

59
00:02:53.940 --> 00:02:56.980
because an XX shouldn't be at
the beginning of the next line.

60
00:02:56.980 --> 00:02:58.580
So just be wary of that.

61
00:02:58.580 --> 00:03:02.820
When you see these errors,
you'll see sort of a cascade of errors.

62
00:03:02.820 --> 00:03:03.840
So what you do is,

63
00:03:03.840 --> 00:03:06.860
generally when you're debugging,
you go with the first error first.

64
00:03:06.860 --> 00:03:09.167
You look for the first error,
fix that, then recompile.

65
00:03:10.490 --> 00:03:12.978
And some of,
multiple errors may disappear as a result.

66
00:03:15.234 --> 00:03:20.261
So the serial monitor,
I mentioned that before.

67
00:03:20.261 --> 00:03:22.180
The serial monitor is
basically a pop-up window.

68
00:03:22.180 --> 00:03:24.390
You pop it up and it looks like this.

69
00:03:24.390 --> 00:03:25.740
It's got a main window,

70
00:03:25.740 --> 00:03:28.810
and then it's got, up near the top it's
got a row where you can type in text.

71
00:03:28.810 --> 00:03:31.350
So this is an interface to the Arduino.

72
00:03:31.350 --> 00:03:33.767
The main window is where
messages will pop up.

73
00:03:33.767 --> 00:03:37.741
So if you, you can write, there are
library functions that allow you to write

74
00:03:37.741 --> 00:03:40.820
in your code to print some
messages to this serial monitor.

75
00:03:40.820 --> 00:03:42.620
So if you have a serial monitor open and

76
00:03:42.620 --> 00:03:45.788
you write serial print, serial.print,
and we'll look at this later.

77
00:03:45.788 --> 00:03:50.660
You write serial.print in your code,
it will print text to the serial monitor.

78
00:03:50.660 --> 00:03:53.920
So you can see the results of
your computation, let's say.

79
00:03:53.920 --> 00:03:57.630
You can send it through, to the serial
monitor and a human can see it.

80
00:03:57.630 --> 00:03:59.945
Now, also, serial monitor can
work in the other direction.

81
00:03:59.945 --> 00:04:02.380
So somebody can type
into the serial monitor.

82
00:04:02.380 --> 00:04:05.790
So if you look at that top row
up there on the serial monitor,

83
00:04:05.790 --> 00:04:07.960
you can type in there and
click that send button.

84
00:04:07.960 --> 00:04:11.640
It will send that data to the Arduino,
and the Arduino will receive it.

85
00:04:11.640 --> 00:04:14.100
And you can write code that
does something with that data

86
00:04:14.100 --> 00:04:16.200
that interprets it in some way.

87
00:04:16.200 --> 00:04:20.767
So the serial monitor is like a, sort
of a keyboard and screen interface for

88
00:04:20.767 --> 00:04:21.647
the Arduino.

89
00:04:21.647 --> 00:04:25.333
You can open the serial monitor and then
you can write code in your Arduino that

90
00:04:25.333 --> 00:04:28.804
accesses the serial monitor,
either writes to it or reads data from it.

91
00:04:28.804 --> 00:04:29.553
Thank you.

92
00:04:29.553 --> 00:04:35.178
[MUSIC]