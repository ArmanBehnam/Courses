WEBVTT

1
00:00:00.000 --> 00:00:08.545
[MUSIC]

2
00:00:11.253 --> 00:00:14.509
So we've talked about different
aspects of the Arduino environment,

3
00:00:14.509 --> 00:00:17.720
talked about the Arduino development
board, looked at a schematic.

4
00:00:17.720 --> 00:00:22.690
We've talked about the Arduino IDE,
and basics of how to use it.

5
00:00:22.690 --> 00:00:23.570
Now, on top of that,

6
00:00:23.570 --> 00:00:27.980
the third aspect of the arduino are the
shields, these are hardware shields.

7
00:00:27.980 --> 00:00:32.450
So, these are add on hardware together
with libraries that control and

8
00:00:32.450 --> 00:00:35.799
access that add on hardware, and we'll
talk about that and how useful it is.

9
00:00:37.510 --> 00:00:40.310
So Arduino Shields
are basically add-on boards.

10
00:00:40.310 --> 00:00:42.430
Daughterboards is another term for this.

11
00:00:42.430 --> 00:00:46.320
That interface with some other device,
usually an integrated circuit, but

12
00:00:46.320 --> 00:00:47.420
it can be anything.

13
00:00:47.420 --> 00:00:50.620
So the idea is that there are often
devices that you want to connect your

14
00:00:50.620 --> 00:00:53.720
Arduino up to that are complicated,
okay, and

15
00:00:53.720 --> 00:00:56.840
require an integrated circuit,
an IC, to access them.

16
00:00:56.840 --> 00:00:58.980
So, take an ethernet controller, okay?

17
00:00:58.980 --> 00:01:00.250
An ethernet jack.

18
00:01:00.250 --> 00:01:01.890
That's a complicated interface.

19
00:01:01.890 --> 00:01:05.150
If you want to talk to an ethernet jack,
you can't just wire straight to it.

20
00:01:05.150 --> 00:01:07.470
You need to talk to
an ethernet controller chip.

21
00:01:07.470 --> 00:01:10.440
A chip that is made to speak
the ethernet protocol.

22
00:01:10.440 --> 00:01:13.690
And you need to wire that ethernet
controller chip up to your chip.

23
00:01:13.690 --> 00:01:16.570
And it's a complicated thing,
and you need to control it.

24
00:01:16.570 --> 00:01:19.390
The datasheet for
the control chip could be 150 pages long,

25
00:01:19.390 --> 00:01:21.230
and you gotta understand that.

26
00:01:21.230 --> 00:01:23.070
It's a complicated process.

27
00:01:23.070 --> 00:01:26.230
So what happens instead is an ethernet
shield is a board that already has

28
00:01:26.230 --> 00:01:31.020
the ethernet control chip, say, wired on
there, so you don't have to do any wiring.

29
00:01:31.020 --> 00:01:33.390
All you have to do is
just take this board, and

30
00:01:33.390 --> 00:01:35.790
you stack it directly
on top of the Adruino.

31
00:01:35.790 --> 00:01:38.880
So the Adruino has
the pins along the side.

32
00:01:38.880 --> 00:01:42.430
Has the holes along the sides
that connect to the pins.

33
00:01:42.430 --> 00:01:45.780
So the shield is the same size and
it's got pins underneath it so

34
00:01:45.780 --> 00:01:50.080
you can just stack them on top and
push this shield right into those holes.

35
00:01:50.080 --> 00:01:51.990
And then the wiring is all done for you.

36
00:01:51.990 --> 00:01:54.690
You don't have to figure out
how to wire it to the arduino.

37
00:01:54.690 --> 00:01:57.320
You just stack it and it's wired.

38
00:01:57.320 --> 00:02:00.660
So the hardware part of it,
the wiring part, is all done.

39
00:02:00.660 --> 00:02:04.900
And in addition to the wiring being
done there are library functions.

40
00:02:04.900 --> 00:02:07.195
So, every shield comes with
a set of library functions.

41
00:02:07.195 --> 00:02:11.380
Pre-written functions that you
as a programmer can call to

42
00:02:11.380 --> 00:02:13.330
do things with the component.

43
00:02:13.330 --> 00:02:18.210
So, like with an ethernet jack,
ethernet card, ethernet shield.

44
00:02:18.210 --> 00:02:20.900
You would have functions that allow
you to access the Internet and

45
00:02:20.900 --> 00:02:22.720
things like this that are simple, right?

46
00:02:22.720 --> 00:02:25.240
You don't have to understand anything
about the ethernet controller and

47
00:02:25.240 --> 00:02:26.700
the complexities of it.

48
00:02:26.700 --> 00:02:30.190
You could just call this function and it
will do the task that it's supposed to do.

49
00:02:30.190 --> 00:02:35.120
So the hardware shields come together with
these libraries that make it easy for

50
00:02:35.120 --> 00:02:36.270
the programmer to access.

51
00:02:37.740 --> 00:02:43.200
So, open source hardware, these designs
are generally open source shield,

52
00:02:43.200 --> 00:02:45.640
but you can purchase them pre-made for
the most part.

53
00:02:47.240 --> 00:02:48.780
A large variety available.

54
00:02:48.780 --> 00:02:53.100
A whole lot of shields to do, Arduina has
been around for a while, people love it.

55
00:02:53.100 --> 00:02:56.160
There are shields to interface with
all sorts of different circuitry.

56
00:02:57.760 --> 00:02:59.590
It's a big advantage of
the argument of platforms.

57
00:02:59.590 --> 00:03:02.880
It's a big reason why people use it,
because they can use

58
00:03:02.880 --> 00:03:06.140
different types of hardware, exotic types
of hardware, that are built into a shield,

59
00:03:06.140 --> 00:03:08.360
but they don't have to understand
the details of the hardware.

60
00:03:08.360 --> 00:03:11.090
They can just call the library functions,
and be happy, and

61
00:03:11.090 --> 00:03:11.810
things are easy for them.

62
00:03:13.570 --> 00:03:14.910
So here are some shields.

63
00:03:14.910 --> 00:03:18.560
There's a complete list at shieldlist.org,
but there are lots of lists, so

64
00:03:18.560 --> 00:03:20.230
just Google around out there.

65
00:03:20.230 --> 00:03:22.460
But we can see here,
we've got the ethernet shield.

66
00:03:22.460 --> 00:03:25.990
I got that one first, and
we've already seen that one.

67
00:03:25.990 --> 00:03:27.800
It allows you,
it's a wired ethernet shield.

68
00:03:27.800 --> 00:03:30.570
So if you want to connect to
the Internet through a wired connection,

69
00:03:30.570 --> 00:03:34.690
you'd take one of these shields,
pop it on top of your Arduino and

70
00:03:34.690 --> 00:03:38.720
then you can connect an ethernet wire
up to that and connect to a network.

71
00:03:40.430 --> 00:03:42.350
Next is the color LCD shield.

72
00:03:42.350 --> 00:03:44.840
So Arduinos don't have screens.

73
00:03:44.840 --> 00:03:46.790
So, say you want it to have a screen.

74
00:03:46.790 --> 00:03:51.740
So, you want a color LCD and the shield
has a color LCD screen built into it and

75
00:03:51.740 --> 00:03:55.910
it ethernet, it has underneath,
you can't see it there but

76
00:03:55.910 --> 00:03:59.010
there's a processor that's connected to
the shield that speaks to the shield.

77
00:04:00.030 --> 00:04:02.600
And it speaks to the screen, and
allows you to control the screen.

78
00:04:03.610 --> 00:04:06.430
And then there's a synthesizer shield,
a music synthesizer, so

79
00:04:06.430 --> 00:04:09.650
if you wanna generate music,
nice music, you can take this shield.

80
00:04:09.650 --> 00:04:11.960
It actually has jacks to
connect to a speaker and

81
00:04:11.960 --> 00:04:17.070
you can talk to speakers and play nice
music, MIDI music and things like this.

82
00:04:17.070 --> 00:04:19.830
These are just a few but
there's a long list of shields and

83
00:04:19.830 --> 00:04:22.300
they are a real benefit
of the Arduino platform.

84
00:04:23.500 --> 00:04:28.470
Now the great thing about these
shields is that they come with

85
00:04:28.470 --> 00:04:31.110
these libraries that make their use easy.

86
00:04:31.110 --> 00:04:34.740
So I'm just giving you a taste of
what these libraries do for you.

87
00:04:34.740 --> 00:04:36.690
So let's take the ethernet shield.

88
00:04:36.690 --> 00:04:38.850
There are several functions
in this library, and

89
00:04:38.850 --> 00:04:42.370
if you go to arduino.cc,
you can see all of its library functions.

90
00:04:42.370 --> 00:04:44.350
But here's one called connect.

91
00:04:44.350 --> 00:04:49.270
Now Connect, iy takes an IP address and
a port number.

92
00:04:49.270 --> 00:04:51.900
So the IP address, whatever the internet
address is that you want to connect to

93
00:04:51.900 --> 00:04:55.520
plus the port number that you want to
connect on, you pass those as arguments

94
00:04:55.520 --> 00:05:00.920
and this function connect will open up a
connection with some remote device, okay?

95
00:05:00.920 --> 00:05:04.900
So at the high level, it's
a straightforward thing that you wanna

96
00:05:04.900 --> 00:05:07.660
do to start a connection
with a remote device.

97
00:05:07.660 --> 00:05:10.620
Now it's very easy to do with this library
function, you just call connect with

98
00:05:10.620 --> 00:05:13.850
the address and the port number and
bam the connection is open.

99
00:05:13.850 --> 00:05:18.190
But in reality it's actually
a much more complicated

100
00:05:18.190 --> 00:05:22.580
operation that has to be preformed, so
you can see that code that I have there,

101
00:05:22.580 --> 00:05:25.790
that's the implementation
of the connect function.

102
00:05:25.790 --> 00:05:30.300
So all these libraries are open source so
you can go to rwcc and

103
00:05:30.300 --> 00:05:32.000
look and find this implementation.

104
00:05:32.000 --> 00:05:33.850
That's where I grabbed this code.

105
00:05:33.850 --> 00:05:35.240
I went and grabbed this code.

106
00:05:35.240 --> 00:05:39.830
It's an implementation of the connect
function, the connect method, and

107
00:05:39.830 --> 00:05:41.830
you see it there and it's complicated.

108
00:05:41.830 --> 00:05:43.400
Okay I'm not gonna go through it and
describe it.

109
00:05:43.400 --> 00:05:44.920
That's not the whole function actually.

110
00:05:44.920 --> 00:05:46.254
That's less than half of the function.

111
00:05:46.254 --> 00:05:48.240
I just took the beginning part.

112
00:05:48.240 --> 00:05:48.950
Right?

113
00:05:48.950 --> 00:05:51.750
But it's a complicated piece of code.

114
00:05:51.750 --> 00:05:54.980
And to understand it you have to
understand details of ethernet,

115
00:05:54.980 --> 00:06:00.850
what it's doing, you have to understand
the ethernet controller and how it works.

116
00:06:00.850 --> 00:06:03.540
So these are things that regular people
don't generally wanna understand.

117
00:06:03.540 --> 00:06:05.380
They just wanna open up a connection.

118
00:06:05.380 --> 00:06:07.920
So this library takes care
of all those details.

119
00:06:07.920 --> 00:06:09.140
You never have to look at this code.

120
00:06:09.140 --> 00:06:11.130
You're looking at it now, but you're
never gonna have to look at it again.

121
00:06:11.130 --> 00:06:14.666
You could just call connect and
bam there's a connection so, you can call

122
00:06:14.666 --> 00:06:18.671
the function and ignore all the details,
and there's a nice abstraction for you.

123
00:06:18.671 --> 00:06:20.254
Thank you.

124
00:06:20.254 --> 00:06:28.609
[MUSIC]