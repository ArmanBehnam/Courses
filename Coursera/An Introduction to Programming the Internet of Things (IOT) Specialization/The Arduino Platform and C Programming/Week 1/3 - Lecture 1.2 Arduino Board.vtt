WEBVTT

1
00:00:00.006 --> 00:00:05.861
[SOUND] So we'll continue

2
00:00:05.861 --> 00:00:13.672
to talk about the Arduino board.

3
00:00:13.672 --> 00:00:16.140
Talk about the different
components on the board.

4
00:00:16.140 --> 00:00:18.770
Note that a lot of this.

5
00:00:18.770 --> 00:00:20.490
Some of this information you need,
some, you don't.

6
00:00:20.490 --> 00:00:24.590
So I'm gonna go into a little bit more
detail than you necessarily are ever going

7
00:00:24.590 --> 00:00:27.100
to need, but you might.

8
00:00:27.100 --> 00:00:31.940
So what I mean is if I'm too superficial
about this then when you run into problems

9
00:00:31.940 --> 00:00:33.560
you won't know what to do.

10
00:00:33.560 --> 00:00:37.260
So it's helpful if I give you a little
bit more depth then you actually will

11
00:00:37.260 --> 00:00:39.790
regularly need and then every once
in a while something goes wrong and

12
00:00:39.790 --> 00:00:41.930
know what the error is about.

13
00:00:41.930 --> 00:00:44.070
So this you're gonna need to know though.

14
00:00:44.070 --> 00:00:46.350
This is the input output pin to the board.

15
00:00:46.350 --> 00:00:50.665
So you can see at the top and
the bottom in red, we circled these pins.

16
00:00:50.665 --> 00:00:53.240
And each one of those pins
on the board is a hole,

17
00:00:53.240 --> 00:00:55.240
a hole in the board that fits a wire.

18
00:00:55.240 --> 00:00:58.004
I believe 24 gauge wire is the wire.

19
00:00:58.004 --> 00:01:01.564
So, you stick the wire in the hole and
those holes on the top and

20
00:01:01.564 --> 00:01:05.210
the bottom are wired or
connected through traces on the board.

21
00:01:05.210 --> 00:01:08.583
They're connected to the pins of
the actual chip of the main processor

22
00:01:08.583 --> 00:01:09.740
down there.

23
00:01:09.740 --> 00:01:12.450
So you can't see the traces because
they're probably embedded inside

24
00:01:12.450 --> 00:01:16.000
the board, maybe they're right on
the bottom, but they're connected.

25
00:01:16.000 --> 00:01:19.915
So if you wanna connect to that chip, the
microcontroller chip, you connect to those

26
00:01:19.915 --> 00:01:23.310
I/O pins on the top or on the bottom
that we've highlighted in red.

27
00:01:23.310 --> 00:01:26.000
Now on the top you can
see the digital I/O pins.

28
00:01:26.000 --> 00:01:29.047
Those pins are meant to be,
they take digital inputs and outputs.

29
00:01:29.047 --> 00:01:31.546
They drive digital outputs and
they take digital inputs.

30
00:01:31.546 --> 00:01:35.506
So, by digital, this board,
this Arduino board,

31
00:01:35.506 --> 00:01:38.880
the uno board is zero volts or five volts.

32
00:01:38.880 --> 00:01:42.004
Right so zero volts means zero,
and five volts means a one.

33
00:01:42.004 --> 00:01:46.921
Now there are other Arduino boards,
not this one, that run at 3.3 volts.

34
00:01:46.921 --> 00:01:50.010
So zero to 3.3 but
right now we're doing zero to five.

35
00:01:50.010 --> 00:01:53.879
So the digital I/O
are the ones on the top.

36
00:01:53.879 --> 00:01:58.047
Now the ones on the bottom,
some of those are analog inputs.

37
00:01:58.047 --> 00:02:01.090
So you can see the ones we've
highlighted analog inputs.

38
00:02:01.090 --> 00:02:04.900
Those can take analog data on the input.

39
00:02:04.900 --> 00:02:09.320
The voltages don't have to be zero volts
or five volts, they can be in between and

40
00:02:09.320 --> 00:02:11.390
that information can be read
by the microcontroller.

41
00:02:11.390 --> 00:02:13.060
We'll talk about how to do that later.

42
00:02:13.060 --> 00:02:16.890
So those inputs are the only ones that
you can drive with analog inputs.

43
00:02:16.890 --> 00:02:20.119
Note that it doesn't provide
analog outputs in a direct way,

44
00:02:20.119 --> 00:02:23.546
cuz it's a digital the processor
itself is a digital processor.

45
00:02:23.546 --> 00:02:28.045
So it can't drive analog outputs,
but it can accept analog inputs.

46
00:02:28.045 --> 00:02:30.643
Because it has an analog because
it has an analog converter

47
00:02:30.643 --> 00:02:32.190
built into the micro controller.

48
00:02:33.770 --> 00:02:36.880
So all CC the other pins down there,
the power reset pins.

49
00:02:37.970 --> 00:02:41.490
Power reset pins are generally outputs.

50
00:02:41.490 --> 00:02:43.990
They have the ground and the power on.

51
00:02:43.990 --> 00:02:48.280
They have five volt power, 3.3 volt power,
several grounds, and things like this.

52
00:02:48.280 --> 00:02:51.513
So, those are on those pins, and
often, when you're connecting,

53
00:02:51.513 --> 00:02:54.381
when you're wiring a circuit,
connecting it to the board.

54
00:02:54.381 --> 00:02:57.548
You'll maybe take power from
the five volts from the board,

55
00:02:57.548 --> 00:03:01.398
from the Arduino board wired to your
circuit, and also you'll wanna have

56
00:03:01.398 --> 00:03:04.837
a common ground between your
Arduino board, and your circuits.

57
00:03:04.837 --> 00:03:09.510
So, you'll take the ground from one of
these ground pins on the Arduino board,

58
00:03:09.510 --> 00:03:11.129
and wire it to the circuit.

59
00:03:11.129 --> 00:03:16.382
Those pins, you're gonna be using
those all the time, because that's

60
00:03:16.382 --> 00:03:22.254
how the processor interacts with the
world, with the senses and the actuators.

61
00:03:22.254 --> 00:03:24.954
Now, two other important
Important features on this board

62
00:03:24.954 --> 00:03:28.574
are the microprocessors now this board
actually has two microprocessors micro

63
00:03:28.574 --> 00:03:29.504
controllers on it.

64
00:03:29.504 --> 00:03:33.253
The main one is that big one
down there the ATmega328.

65
00:03:33.253 --> 00:03:36.645
That is a program that is a processor
that you are programming that the user is

66
00:03:36.645 --> 00:03:37.337
programming.

67
00:03:37.337 --> 00:03:41.830
So your code, when you write it and
compile it it gets written into that

68
00:03:41.830 --> 00:03:45.421
ATmega328 and
the ATmega328 executes the code.

69
00:03:45.421 --> 00:03:49.758
Now in addition to that processor,
there's this other micro-controller,

70
00:03:49.758 --> 00:03:55.330
the ATmega16U2, and that is there just to
handle the communication with the USB.

71
00:03:55.330 --> 00:04:00.270
So, USB is a protocol, and that processor,

72
00:04:00.270 --> 00:04:03.740
all it does is it understands
the USB protocol.

73
00:04:03.740 --> 00:04:08.410
So data that comes in on the USB, it
translates it to something that the main

74
00:04:08.410 --> 00:04:11.620
processor can understand and
it passes it on to the main processor.

75
00:04:11.620 --> 00:04:14.360
And when the main processor
wants to write something to USB,

76
00:04:14.360 --> 00:04:18.350
it translates that into USB protocol and
sends it out So that process,

77
00:04:18.350 --> 00:04:22.210
that ATmega16U2,
you won't ever directly access.

78
00:04:22.210 --> 00:04:26.810
It has code on it, code in it's flash,
and you will not touch that code.

79
00:04:26.810 --> 00:04:29.530
It just stays there
forever to talk to USB.

80
00:04:29.530 --> 00:04:33.160
So you really are going to be
accessing that ATmega328 directly.

81
00:04:36.460 --> 00:04:40.070
Now, the ATmega328 that you're
gonna be working with, and

82
00:04:40.070 --> 00:04:44.620
any microcontroller really,
has let's say, broadly defined,

83
00:04:44.620 --> 00:04:47.500
two types of code running
on the microcontroller.

84
00:04:47.500 --> 00:04:48.260
Okay.

85
00:04:48.260 --> 00:04:50.670
One type of code,
we'll call application code.

86
00:04:50.670 --> 00:04:54.200
That is a code that you as a programmer
are generally going to write.

87
00:04:54.200 --> 00:04:55.630
Okay.
That is a program that doesn't

88
00:04:55.630 --> 00:04:59.990
come with the microcontroller, you write
that for your particular application.

89
00:04:59.990 --> 00:05:03.970
So if you want to make an Arduino,
you wanna build a system with an Arduino I

90
00:05:03.970 --> 00:05:06.990
don't know, something to sense
if plants need to get watered.

91
00:05:06.990 --> 00:05:09.120
So it senses the humidity,
it senses how wet it is,

92
00:05:09.120 --> 00:05:10.770
it waters the plants, something like that.

93
00:05:10.770 --> 00:05:14.360
You're gonna write code to do that and
you would call that application code.

94
00:05:14.360 --> 00:05:17.240
So we write the code, or you,
the programmer, write the code, and

95
00:05:17.240 --> 00:05:19.920
it executes the main functionality
of the system, directly.

96
00:05:21.140 --> 00:05:24.950
Now, besides this application code,
systems typically have firmware.

97
00:05:24.950 --> 00:05:30.030
Now, firmware Is low level code
that supports the main function,

98
00:05:30.030 --> 00:05:32.770
but doesn't directly
perform the main function.

99
00:05:32.770 --> 00:05:35.920
So it does all the background stuff,
like the USB interface, right.

100
00:05:35.920 --> 00:05:39.285
The Arduino has to talk
to the USB interface.

101
00:05:39.285 --> 00:05:42.465
And you, as a programmer, you don't
have to directly figure out how to

102
00:05:42.465 --> 00:05:46.025
talk on the USB interface, but
the Arduino has to know how.

103
00:05:46.025 --> 00:05:49.205
So it has code in there dedicated
to talking on the USB interface.

104
00:05:49.205 --> 00:05:52.170
Boot loader code does some of that,
and we'll talk about that later.

105
00:05:52.170 --> 00:05:53.040
Power modes, right.

106
00:05:53.040 --> 00:05:55.390
Changing the power modes from
low power to high power mode,

107
00:05:55.390 --> 00:05:56.440
that happens in the background.

108
00:05:56.440 --> 00:05:58.190
You as a programmer
don't have to see that.

109
00:05:58.190 --> 00:06:01.670
Reset, when the reset button is pressed,
what happens to the device,

110
00:06:01.670 --> 00:06:04.730
that's all code that you as
a programmer don't have to write.

111
00:06:04.730 --> 00:06:07.450
That stuff is already programmed in there.

112
00:06:07.450 --> 00:06:08.749
Generally, you call that firmware.

113
00:06:09.780 --> 00:06:11.140
So the programmer doesn’t write it, but

114
00:06:11.140 --> 00:06:14.960
it’s code that’s sitting on the Arduino
anyway, and comes with the Arduino.

115
00:06:14.960 --> 00:06:17.430
So when you buy the Arduino
on that microcontroller,

116
00:06:17.430 --> 00:06:21.020
it already has firmware built in to it.

117
00:06:21.020 --> 00:06:23.569
Now the distinction between firmware and

118
00:06:23.569 --> 00:06:27.004
application code is somewhat
a matter of perspective.

119
00:06:27.004 --> 00:06:31.908
So in the sense that, so
definitely it's clear the application code

120
00:06:31.908 --> 00:06:34.962
is something that the programmer writes.

121
00:06:34.962 --> 00:06:38.469
But all the code, so say you take
an Arduino, and you use your Arduino to

122
00:06:38.469 --> 00:06:41.451
make a camera, like the one
pointing at me right now, okay,

123
00:06:41.451 --> 00:06:45.750
you use it to drive the motors and pull
the lens in and out and all that, right?

124
00:06:45.750 --> 00:06:48.060
So you write some code,
and you wrote it so

125
00:06:48.060 --> 00:06:49.760
you would think of it as application code.

126
00:06:49.760 --> 00:06:51.850
But once you sell that
product to somebody,

127
00:06:51.850 --> 00:06:55.280
sell the camera to somebody,
they will never touch that code, right?

128
00:06:55.280 --> 00:06:56.440
They don't access that code.

129
00:06:56.440 --> 00:06:58.270
So they think of that code as firmware.

130
00:06:58.270 --> 00:07:01.760
That code to them is firmware because
they're never gonna modify it, right?

131
00:07:01.760 --> 00:07:05.410
So somehow this definition of
firmware depends on your perspective.

132
00:07:05.410 --> 00:07:09.671
What part of the chain you're in, right.

133
00:07:09.671 --> 00:07:11.108
If you buy something, and

134
00:07:11.108 --> 00:07:15.352
it has code already in it that you did
not modify you call that firmware often,

135
00:07:15.352 --> 00:07:18.837
and it accesses a low level hardware,
you call that firmware.

136
00:07:18.837 --> 00:07:22.337
But in general with us, we're gonna
be writing code on this Arduino, but

137
00:07:22.337 --> 00:07:24.378
we will not be writing this firmware code.

138
00:07:24.378 --> 00:07:26.880
But it exists on there, so
you should be aware of that.

139
00:07:28.550 --> 00:07:32.348
All right, it's preprogrammed,
so it comes with the Arduino,

140
00:07:32.348 --> 00:07:36.296
the firmware's already been
programmed onto that ATmega328.

141
00:07:36.296 --> 00:07:37.171
Thank you.

142
00:07:37.171 --> 00:07:44.046
[MUSIC]