WEBVTT

1
00:00:01.240 --> 00:00:04.370
So, the first one we will look
at is the amplitude domain.

2
00:00:04.370 --> 00:00:07.400
It's called Log Companding.

3
00:00:07.400 --> 00:00:15.290
We have actually seen this codec before
mew law in North America, A law in Europe.

4
00:00:15.290 --> 00:00:20.194
And this is the 64 kilobits
codec that was used and

5
00:00:20.194 --> 00:00:23.450
digital telephoning.

6
00:00:23.450 --> 00:00:30.020
So, if you consider the probability
distribution function of speech signals,

7
00:00:30.020 --> 00:00:35.690
speech samples,
you will find that a lot more samples

8
00:00:35.690 --> 00:00:41.210
have values very closer to
zero than very large values.

9
00:00:41.210 --> 00:00:45.790
So, the PDF is very skewed
Picky distribution.

10
00:00:45.790 --> 00:00:51.680
It is closer to gamma distribution,
but a Laplacian distribution

11
00:00:51.680 --> 00:00:58.032
is often used as a good
engineering approximation.

12
00:00:58.032 --> 00:01:04.650
So, what can we do, once we know
this really good useful insight?

13
00:01:04.650 --> 00:01:10.870
If the signal was random we have to use
same number of birds for each sample.

14
00:01:10.870 --> 00:01:15.640
But now that we know more and
more samples are closer to zero.

15
00:01:15.640 --> 00:01:19.300
And that's really where
the information is.

16
00:01:19.300 --> 00:01:24.850
We use very, very fine quantization for
signals near zero.

17
00:01:24.850 --> 00:01:29.870
And we can afford to have little bit
error for very, very large values

18
00:01:29.870 --> 00:01:34.770
as you go further out to
peak to peak radiation.

19
00:01:36.160 --> 00:01:43.246
So, this idea is actually what
is used in Log Companding.

20
00:01:43.246 --> 00:01:50.090
The G.711 u-Law uses
a logarithmic equation.

21
00:01:51.100 --> 00:01:53.620
Between the input and output mapping.

22
00:01:53.620 --> 00:01:57.840
For a given sample XFN the output

23
00:01:57.840 --> 00:02:02.600
is a function of log of XFN
shown in this equation.

24
00:02:02.600 --> 00:02:06.657
So, we treat positive portions of x(n) and

25
00:02:06.657 --> 00:02:13.387
the negative portions of x(n)
independently using the sine operator and

26
00:02:13.387 --> 00:02:18.320
the value of for the normalization is 255.

27
00:02:18.320 --> 00:02:24.190
And these numbers have been picked
by extensive experimentation at

28
00:02:24.190 --> 00:02:29.656
labs looking at the speech
distributions for various

29
00:02:31.444 --> 00:02:37.970
the A-law is similar with a slightly
different normalization value

30
00:02:37.970 --> 00:02:43.330
and it does not include
zero In the output.

31
00:02:43.330 --> 00:02:47.200
And the wise quality is same
in pretty much both of them.

32
00:02:47.200 --> 00:02:55.050
So, both codecs take about 13 or 14 bit
samples and generate 8 bits per sample.

33
00:02:55.050 --> 00:02:59.270
So, 8 kilohertz per sampling,
as we have seen before,

34
00:02:59.270 --> 00:03:04.120
we have the 64 kilobits For
second data rate.

35
00:03:05.800 --> 00:03:08.150
So, if I show you this picture,

36
00:03:08.150 --> 00:03:12.780
you will appreciate the operation
of this codec a lot more easily.

37
00:03:12.780 --> 00:03:17.820
X axis is the input and y axis is
the output and as you go to higher and

38
00:03:17.820 --> 00:03:21.590
higher values of y,
the x looks more plateaued so

39
00:03:21.590 --> 00:03:25.900
you're losing More coarse quantization.

40
00:03:25.900 --> 00:03:32.300
And it turns out that the ear is very,
very forgiving to this kind of calling.