WEBVTT

1
00:00:00.350 --> 00:00:03.260
Here we have the code walkthrough.

2
00:00:03.260 --> 00:00:09.150
This isn't going to go over all the files
because it's a little too much for

3
00:00:09.150 --> 00:00:11.540
us to cover in this video.

4
00:00:11.540 --> 00:00:17.020
So if you guys want to learn more about
the code that we're not going to cover,

5
00:00:17.020 --> 00:00:20.310
we just recommend that you
go over it yourself and

6
00:00:20.310 --> 00:00:24.110
find resources online and
let's get on to it.

7
00:00:24.110 --> 00:00:29.640
So the first program we're going to go
over is the Arduino file for facetrack.

8
00:00:29.640 --> 00:00:31.127
So let's open that up.

9
00:00:35.637 --> 00:00:37.210
So here we are.

10
00:00:37.210 --> 00:00:45.760
At the top we have the define
which defines constants for us.

11
00:00:45.760 --> 00:00:53.076
This is just and then we have some
values that we want to initialize.

12
00:00:53.076 --> 00:00:56.210
Valx and valy, and

13
00:00:56.210 --> 00:01:02.380
these are to determine how much
we need to turn the webcam.

14
00:01:02.380 --> 00:01:09.490
And then we have some values that
we want to read from the Mezzanine.

15
00:01:09.490 --> 00:01:13.240
So here we have
the communication with Serial.

16
00:01:15.370 --> 00:01:17.470
We went over this in previous videos but

17
00:01:17.470 --> 00:01:20.860
we just want to keep the communication
going with Mezzanine.

18
00:01:22.810 --> 00:01:27.226
And then here we have some
stuff that is reading

19
00:01:27.226 --> 00:01:32.096
the values from Serial, and
then we want to use these

20
00:01:32.096 --> 00:01:37.432
values to determine how much
we want to turn the ServoX.

21
00:01:37.432 --> 00:01:40.050
So that's what this code is doing.

22
00:01:40.050 --> 00:01:42.365
So when we run the application,

23
00:01:42.365 --> 00:01:48.170
what the ServoX is trying to do is trying
to center your face in the camera.

24
00:01:48.170 --> 00:01:52.450
So it will try to read data and

25
00:01:52.450 --> 00:01:57.720
then determine how much it needs to
turn so that your face is in the center.

26
00:01:59.930 --> 00:02:02.970
So Simon will be going
over the next two files.

27
00:02:04.060 --> 00:02:07.680
>> Yes, so the next two files,
the first one will be the actual how

28
00:02:07.680 --> 00:02:13.290
open cd databases and recognizes people,
and the next one will just be the flask

29
00:02:13.290 --> 00:02:19.870
Python Web server, which is just
giving out files and sending data.

30
00:02:19.870 --> 00:02:24.720
And we can go to part five,
which is the file part of the project and

31
00:02:24.720 --> 00:02:26.280
we just open that up.

32
00:02:26.280 --> 00:02:31.080
So if you go into the facedetect,
you can see here that

33
00:02:31.080 --> 00:02:36.092
a little copyright but for
Linaro, all our libraries,

34
00:02:36.092 --> 00:02:41.120
so open tv2, boto3, Amazon SDK,
went over it a bit.

35
00:02:42.340 --> 00:02:48.000
And then here is the class for
the face detecting object that we have.

36
00:02:48.000 --> 00:02:50.969
It just contains most of everything
that we are going to use.

37
00:02:52.020 --> 00:02:57.600
So here it's just creating an S3,
creating something

38
00:02:57.600 --> 00:03:03.100
to access the Amazon web
services hard drive, or S3.

39
00:03:04.260 --> 00:03:05.700
And then, this is recognizer.

40
00:03:05.700 --> 00:03:06.570
This is so

41
00:03:06.570 --> 00:03:11.540
that, this is actually recognizing who
the person is when we detect a face.

42
00:03:12.840 --> 00:03:17.010
And this is the building up all
the weights that we gained, and

43
00:03:17.010 --> 00:03:22.270
here is the faceCascade, which is so,
just to recognize general faces and

44
00:03:22.270 --> 00:03:27.860
then we can do the recognizer
on just that part of the image.

45
00:03:27.860 --> 00:03:33.160
And then just choosing which camera port
it is, this one just happened to be two,

46
00:03:33.160 --> 00:03:36.300
it might be different for you,
often times is zero, one or two.

47
00:03:37.630 --> 00:03:39.190
And this is just the font for

48
00:03:39.190 --> 00:03:43.660
like the name as you saw like there
was Simon for my name on the image.

49
00:03:43.660 --> 00:03:46.913
So this is just setting the settings for
that, and

50
00:03:46.913 --> 00:03:51.646
these are just some flags for determining
how many images to send to AWS.

51
00:03:54.890 --> 00:03:59.233
Yeah this is just,
how to get the size of the image,

52
00:03:59.233 --> 00:04:02.980
like where to put the letter and
the square.

53
00:04:04.730 --> 00:04:08.726
And then this is setting up the serial
communication with Arduino so

54
00:04:08.726 --> 00:04:10.630
that it can send messages to it.

55
00:04:10.630 --> 00:04:14.274
Determines the port and the baud rate.

56
00:04:14.274 --> 00:04:18.232
And then here is the output function that
actually takes the file from the dragon

57
00:04:18.232 --> 00:04:20.375
board and sends it to Amazon web services.

58
00:04:20.375 --> 00:04:25.098
As you can see here, it is just that
S3 object and you choose Bucket and

59
00:04:25.098 --> 00:04:26.779
then you do ucsd-home,

60
00:04:26.779 --> 00:04:31.519
which is the name of the harddrive
that we have on Amazon web services.

61
00:04:31.519 --> 00:04:38.930
And then just put the path of the file
that we saved and the actual data.

62
00:04:40.870 --> 00:04:43.180
Now here is one more function.

63
00:04:43.180 --> 00:04:44.260
It's capture upload.

64
00:04:44.260 --> 00:04:47.570
So it just takes in the upload
function and uses it, and

65
00:04:47.570 --> 00:04:49.420
then it actually captures images.

66
00:04:49.420 --> 00:04:54.880
So as you can see here it captures an
image, one frame, turns it to grayscale.

67
00:04:54.880 --> 00:04:58.575
And then it uses the face cascade to
see if there are any faces detected.

68
00:04:58.575 --> 00:05:03.028
And if there are, it goes through
all the faces, draws a rectangle,

69
00:05:03.028 --> 00:05:08.740
as you can see here, and
then predicts whose this face could be.

70
00:05:08.740 --> 00:05:12.098
Maybe it's unknown, maybe it's
Barrack Obama, maybe it's Simon.

71
00:05:12.098 --> 00:05:18.760
And then, this part of the code we did
change just to recognize more faces.

72
00:05:18.760 --> 00:05:22.440
So originally there was only many,
this idea was originally but

73
00:05:22.440 --> 00:05:23.260
I changed it to the Simon.

74
00:05:23.260 --> 00:05:25.690
And it was only ID 1 or ID 2.

75
00:05:25.690 --> 00:05:29.163
So I just made it let it work for
more of the different faces.

76
00:05:30.595 --> 00:05:36.759
And then [COUGH] this is creating
the file path of where to save the image,

77
00:05:36.759 --> 00:05:41.604
and this is actually saving the image,
cv2.mwrite.

78
00:05:42.640 --> 00:05:47.420
And then this part is mostly,
this is actually uploading the image and

79
00:05:47.420 --> 00:05:49.980
then setting it so that all we have
already uploaded this person's image,

80
00:05:49.980 --> 00:05:52.800
we don't need to do it again
the next time we see the face.

81
00:05:52.800 --> 00:05:54.560
And then just how many
faces we've detected.

82
00:05:56.360 --> 00:06:01.610
Now this is, I personally don't reset
it too much, but it beats certificate

83
00:06:01.610 --> 00:06:05.230
bits and most certificate bits, and
setting it to the Arduino, and the Arduino

84
00:06:05.230 --> 00:06:08.990
will understand whether to move
the servos left or right, or up or down.

85
00:06:10.020 --> 00:06:13.670
And then the next part is
repeated again but for

86
00:06:16.750 --> 00:06:19.940
Bharathi, I am so
sorry if I mispronounced that name.

87
00:06:19.940 --> 00:06:26.300
But yeah, it's just the same thing again
for the next id, and just repeat the same.

88
00:06:26.300 --> 00:06:32.240
And then if the last else is, if it didn't
detect either of those people with 3 IDs

89
00:06:32.240 --> 00:06:37.230
and then also two, if it did not detect
any of those people just write unknown and

90
00:06:37.230 --> 00:06:38.510
actually put the text on the screen.

91
00:06:39.640 --> 00:06:45.440
And encoding the image and returning the
image as a byte so that can be displayed.

92
00:06:45.440 --> 00:06:51.870
And then the last part is just destroying
all of this after the program ends.

93
00:06:51.870 --> 00:06:55.190
So we exit out of this,
that was all face detection.

94
00:06:55.190 --> 00:06:59.234
Now we can see how face detection
is combined with a web server so

95
00:06:59.234 --> 00:07:01.918
that we have a nice webpage that shows up.

96
00:07:01.918 --> 00:07:09.200
Now we can see, you don't want
a cd into a file, and there we go.

97
00:07:09.200 --> 00:07:12.520
So, yeah the nice [INAUDIBLE] again,
some files.

98
00:07:12.520 --> 00:07:17.580
If you haven't seen this before it's
the Python way to multi thread,

99
00:07:18.880 --> 00:07:21.840
and this is the web server.

100
00:07:21.840 --> 00:07:24.690
This is actually our
facedetect file that we have.

101
00:07:26.150 --> 00:07:29.100
Then as you can see here,
here is just starting

102
00:07:29.100 --> 00:07:33.380
initializing the flask web server and
some flags.

103
00:07:34.580 --> 00:07:37.600
This just handles the keyboard in or outs.

104
00:07:37.600 --> 00:07:43.010
And this handles the stream for
the images.

105
00:07:43.010 --> 00:07:45.320
The next one is the face detecting thread.

106
00:07:45.320 --> 00:07:50.475
So this actually runs facedetect so that
it doesn't interrupt with the web server,

107
00:07:50.475 --> 00:07:55.210
like let's say facedetect is doing
something heavy and a lot of processing.

108
00:07:55.210 --> 00:07:58.010
We don't want it to delay our web
server from setting up web page.

109
00:07:59.010 --> 00:08:01.660
And the next part is actually
the web server part.

110
00:08:01.660 --> 00:08:05.820
So here's the,
if you don't know about routing and stuff,

111
00:08:05.820 --> 00:08:09.270
this is essentially just like, if you've
ever seen www.google.com, there's like

112
00:08:09.270 --> 00:08:16.320
a bunch of stuff after it like slash,
index, .html, this is essentially that.

113
00:08:16.320 --> 00:08:20.155
It just routes what file to
send back from the server.

114
00:08:20.155 --> 00:08:25.914
So here it's the main domain,
which is google.com/ with something else,

115
00:08:25.914 --> 00:08:28.848
and then we just return the index file.

116
00:08:28.848 --> 00:08:33.423
Here you can do that same URL thing,
but instead of sending just a file,

117
00:08:33.423 --> 00:08:38.400
you send an image or some image data so
that it can be displayed on the webpage.

118
00:08:38.400 --> 00:08:42.597
And the last part's just starting
with thread face detect and

119
00:08:42.597 --> 00:08:46.480
then starting the signal handler for

120
00:08:46.480 --> 00:08:49.050
the keyboard interrupt and
then finally the web server.

121
00:08:49.050 --> 00:08:51.579
And sending it on a port
that we can access.

122
00:08:53.510 --> 00:08:54.860
And that's it.

123
00:08:54.860 --> 00:08:58.360
So that's the code that you
really need to understand.

124
00:08:58.360 --> 00:09:03.220
There's a lot more like step parts of code
that we like step by step built up and

125
00:09:03.220 --> 00:09:07.880
you can open those up and
understand them more.

126
00:09:07.880 --> 00:09:10.860
This is all of course two.

127
00:09:10.860 --> 00:09:14.780
We mostly focused on hardware and
you've got a taste of what you can

128
00:09:14.780 --> 00:09:18.531
do with a little bit of Amazon
web services and cloud.

129
00:09:18.531 --> 00:09:23.370
We'll be diving more into cloud and
teaching you guys how to use it properly,

130
00:09:23.370 --> 00:09:27.670
and all the little projects that
you can do with it in course three.

131
00:09:27.670 --> 00:09:28.260
That's it, stay tuned.