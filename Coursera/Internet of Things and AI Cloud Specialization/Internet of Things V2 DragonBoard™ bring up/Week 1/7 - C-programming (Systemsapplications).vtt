WEBVTT

1
00:00:02.080 --> 00:00:02.710
Hello everyone.

2
00:00:02.710 --> 00:00:04.650
Here in this section,
we're going to go over C programming.

3
00:00:06.480 --> 00:00:09.100
>> And so, we're going to jump
straight into the pros and

4
00:00:09.100 --> 00:00:11.260
cons of C programming here.

5
00:00:11.260 --> 00:00:15.340
The first big advantage of C
programming is it's very portable, so

6
00:00:15.340 --> 00:00:19.750
you can write C programming in one system,
and easily transfer it to another system.

7
00:00:19.750 --> 00:00:23.390
The next big thing is that it
has extensive library use.

8
00:00:23.390 --> 00:00:25.773
So basically,
C programming is used everywhere.

9
00:00:25.773 --> 00:00:28.155
And that mean there's
a lot of developers on C.

10
00:00:28.155 --> 00:00:32.500
And the next implication of that, is that
there's a lot of library use for that.

11
00:00:32.500 --> 00:00:36.030
So, if you wanna write a piece
of code to do something,

12
00:00:36.030 --> 00:00:37.410
you might not actually have to write it.

13
00:00:37.410 --> 00:00:38.658
You can just import a library,

14
00:00:38.658 --> 00:00:40.921
cuz someone else might have
already written it for you.

15
00:00:40.921 --> 00:00:44.050
And the last thing you have
there is systems programming.

16
00:00:44.050 --> 00:00:45.740
So it's procedural oriented.

17
00:00:45.740 --> 00:00:49.328
This is another big difference
between object oriented programming.

18
00:00:49.328 --> 00:00:53.720
Because it's based more around usage,
specific usage type programming,

19
00:00:53.720 --> 00:00:57.190
where object oriented is
based more on implementation.

20
00:00:57.190 --> 00:01:01.520
>> So finally, we have like
a mid-level programming language.

21
00:01:01.520 --> 00:01:05.870
It's efficient, but
it's not as efficient as say like ARM.

22
00:01:05.870 --> 00:01:06.540
Yeah.
>> But it's,

23
00:01:06.540 --> 00:01:08.660
at the same time it's
not difficult to write.

24
00:01:08.660 --> 00:01:09.808
>> Yes.
>> We have things like,

25
00:01:09.808 --> 00:01:12.980
that's not automated is memory
management so it's a bit annoying.

26
00:01:12.980 --> 00:01:14.216
Makes it a bit more difficult.

27
00:01:14.216 --> 00:01:16.556
But we don't have to manage our registers.

28
00:01:16.556 --> 00:01:17.836
So it makes it a bit easier.

29
00:01:17.836 --> 00:01:19.430
That's why, in the middle.

30
00:01:19.430 --> 00:01:21.815
>> And
then the first disadvantage we have,

31
00:01:21.815 --> 00:01:25.020
there's no object oriented programming.

32
00:01:25.020 --> 00:01:28.080
This really is a big disadvantage here,
because for every use,

33
00:01:28.080 --> 00:01:30.480
you need to come up with
specific implementations.

34
00:01:30.480 --> 00:01:33.419
>> And in object oriented programming,
you can just create a very abstract

35
00:01:33.419 --> 00:01:35.601
implementation and
apply it to many different uses.

36
00:01:35.601 --> 00:01:36.322
>> Like more general.

37
00:01:36.322 --> 00:01:37.421
>> Yes.
More general.

38
00:01:37.421 --> 00:01:40.460
>> So and then finally we have
very loose type tricking.

39
00:01:40.460 --> 00:01:45.070
So this is basically saying like,
you wanted an integer argument for

40
00:01:45.070 --> 00:01:46.530
some kind of function you wrote.

41
00:01:46.530 --> 00:01:48.520
But someone throws in a character.

42
00:01:48.520 --> 00:01:51.670
And since everything is stored in bits and
bytes,

43
00:01:51.670 --> 00:01:56.171
your computer might read that character
as an integer for some reason.

44
00:01:56.171 --> 00:01:58.930
>> And you might have really
weird output at the end.

45
00:01:58.930 --> 00:02:02.170
>> And in high-level programming,
it'll throw you an error saying, hey,

46
00:02:02.170 --> 00:02:04.078
we need an integer,
you're throwing in a character.

47
00:02:04.078 --> 00:02:09.610
But in mid-level programming like C,
you might be able to get away with that.

48
00:02:09.610 --> 00:02:13.531
So that wraps up the pros and
cons of C programming.

49
00:02:13.531 --> 00:02:15.931
And with that,
we'll see you in the next video.