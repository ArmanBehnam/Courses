WEBVTT

1
00:00:03.029 --> 00:00:04.772
Hey everyone, welcome to this section.

2
00:00:04.772 --> 00:00:07.650
We're gonna go over what
Object Oriented Programming is.

3
00:00:07.650 --> 00:00:10.592
>> Right, so let's jump right in.

4
00:00:10.592 --> 00:00:15.120
So, we have three points up there,
and the first main

5
00:00:15.120 --> 00:00:20.250
point of Object Oriented Programming is,
Object Oriented Programming basically,

6
00:00:20.250 --> 00:00:24.630
the definition of it is, you have separate
objects for everything you want to do.

7
00:00:24.630 --> 00:00:28.390
So usually in low level programming,
you have separate actions.

8
00:00:28.390 --> 00:00:31.250
Everything you want to do is
a separate action, separate action.

9
00:00:31.250 --> 00:00:32.480
In Object Oriented Programming,

10
00:00:32.480 --> 00:00:35.620
as the name specifies,
is based around one object.

11
00:00:35.620 --> 00:00:38.270
And I know that sounds confusing, but

12
00:00:38.270 --> 00:00:41.550
we'll really explain what
that means as we go here.

13
00:00:41.550 --> 00:00:46.850
The first aspect of Object Oriented
Programming is code use and recycling.

14
00:00:46.850 --> 00:00:50.820
That means you can write one piece of
code and apply it to many uses later on.

15
00:00:50.820 --> 00:00:54.360
And then the second thing we
have there is encapsulation.

16
00:00:54.360 --> 00:00:59.840
That's basically another term for
hiding data or hiding information.

17
00:00:59.840 --> 00:01:02.660
And a third thing we have
there is design benefits.

18
00:01:02.660 --> 00:01:06.850
And design benefits is basically
something that allows us to

19
00:01:06.850 --> 00:01:11.390
make our programs more concrete
with less flaws and more versatile.

20
00:01:12.950 --> 00:01:15.869
>> Man those, I'm having a really
hard time understanding what you just

21
00:01:15.869 --> 00:01:16.419
said, man.

22
00:01:16.419 --> 00:01:18.521
Like, can you explain
to me in more detail?

23
00:01:18.521 --> 00:01:19.542
>> Yeah.

24
00:01:19.542 --> 00:01:21.260
How about I go through a scenario here.

25
00:01:21.260 --> 00:01:22.538
>> Oh, that sounds good.

26
00:01:22.538 --> 00:01:23.630
>> So, all right.
So, Randy,

27
00:01:23.630 --> 00:01:25.480
can you give me the name of three animals?

28
00:01:25.480 --> 00:01:29.400
>> How about dog, a tiger,
and horse, I guess?

29
00:01:29.400 --> 00:01:31.660
>> All right, okay, so
we have three animals here.

30
00:01:31.660 --> 00:01:35.040
And so,
let's call each animal their own objects.

31
00:01:35.040 --> 00:01:36.780
>> Oh, okay.
>> So, a dog is its own object,

32
00:01:36.780 --> 00:01:39.100
a cat is its own object, and
a tiger, a horse, right?

33
00:01:39.100 --> 00:01:39.990
>> Horse, horse.

34
00:01:39.990 --> 00:01:40.740
Horse and a tiger.

35
00:01:40.740 --> 00:01:41.990
>> Horse Tiger.

36
00:01:41.990 --> 00:01:43.170
Three different objects.

37
00:01:43.170 --> 00:01:47.836
Can you name me three functions that all
three of these objects have in common?

38
00:01:47.836 --> 00:01:51.412
>> They can all eat, walk, and sleep.

39
00:01:51.412 --> 00:01:52.735
>> Eat, walk, and sleep.

40
00:01:52.735 --> 00:01:55.930
So, each animal can eat, walk, and sleep.

41
00:01:55.930 --> 00:01:59.580
Now, we don't want to define those
three actions for each animal.

42
00:01:59.580 --> 00:02:02.110
So we're gonna create a forth
object called animals.

43
00:02:02.110 --> 00:02:04.580
It's an object just called animals, and

44
00:02:04.580 --> 00:02:07.530
we're gonna define each
action inside animals.

45
00:02:07.530 --> 00:02:10.290
>> So, like, the animal can eat,
walk and sleep.

46
00:02:10.290 --> 00:02:11.700
>> Yeah, animal can eat walk and
sleep, yeah.

47
00:02:11.700 --> 00:02:14.790
>> And the dog, tiger and
the horse are all animals, so.

48
00:02:14.790 --> 00:02:15.350
>> Right.

49
00:02:15.350 --> 00:02:18.640
So, in the code,
what would happen is the dog would inherit

50
00:02:18.640 --> 00:02:21.880
all the functions an animal can, and the
horse would inherit the same thing, and

51
00:02:21.880 --> 00:02:24.730
the tiger would inherit the same thing,
so, in which case,

52
00:02:24.730 --> 00:02:28.440
you don't have to define each action three
different times, you just do it once.

53
00:02:28.440 --> 00:02:29.330
>> Reusable code, right?

54
00:02:29.330 --> 00:02:30.800
>> Reusable code, that's that.

55
00:02:30.800 --> 00:02:32.060
And, cancellation.

56
00:02:32.060 --> 00:02:34.460
So, as I mentioned earlier, it's privacy.

57
00:02:34.460 --> 00:02:36.710
So let's say I add a fourth animal,
a duck.

58
00:02:36.710 --> 00:02:39.790
The duck is going to be completely
oblivious to what the horse can do,

59
00:02:39.790 --> 00:02:42.460
what the dog can do, and
what the tiger can do.

60
00:02:42.460 --> 00:02:47.210
Duck is it's own thing and yet,
it'll still inherit everything else that

61
00:02:47.210 --> 00:02:50.360
the animal can do,
it can sit, walk, play and

62
00:02:50.360 --> 00:02:55.410
lastly, because of these three things,
we have really good design benefits.

63
00:02:55.410 --> 00:02:59.510
And so, the design benefit is that you
plan out everything before hand so

64
00:02:59.510 --> 00:03:03.480
you think of all the commonalities and
all the common functionalities.

65
00:03:03.480 --> 00:03:04.890
And once you plan everything out,

66
00:03:04.890 --> 00:03:09.470
it makes the end product much more easy to
come by and there is gonna be less flaws.

67
00:03:09.470 --> 00:03:11.450
And, if there is a flaw,
you can easily fix it.

68
00:03:11.450 --> 00:03:12.810
You don't need to redo every single step.

69
00:03:12.810 --> 00:03:16.180
So those are the advantages of
Object Oriented Programming and

70
00:03:16.180 --> 00:03:18.130
the main idea of it.

71
00:03:18.130 --> 00:03:21.950
>> Some disadvantages would be,
the file sizes tend to be

72
00:03:21.950 --> 00:03:25.820
quite large because of all,
everything you have to include.

73
00:03:25.820 --> 00:03:28.700
Maybe you have to write extra stuff,
right, maybe?

74
00:03:28.700 --> 00:03:29.800
>> Yeah.

75
00:03:29.800 --> 00:03:33.870
>> And then the programs tend to be
slower, as well, since it includes

76
00:03:34.980 --> 00:03:39.970
a wide, the size of the files are very
big, so maybe it's not as efficient.

77
00:03:39.970 --> 00:03:44.740
>> Right, so it'll take longer to
compile and run all these larger files.

78
00:03:44.740 --> 00:03:46.070
And so, basically,

79
00:03:46.070 --> 00:03:51.450
that's the idea of Object Oriented
Programming and you can pause the video or

80
00:03:51.450 --> 00:03:54.190
you can look on our documentation and
find more resources on it.

81
00:03:54.190 --> 00:03:56.190
And with that,
we'll see you on our next video.