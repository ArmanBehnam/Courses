WEBVTT

1
00:00:03.330 --> 00:00:04.420
Hey everyone.
In this section,

2
00:00:04.420 --> 00:00:06.370
we're going to go over high and
low level programming,

3
00:00:06.370 --> 00:00:09.290
which is just a way to describe
different kinds of language.

4
00:00:09.290 --> 00:00:10.640
>> Right.

5
00:00:10.640 --> 00:00:15.200
And so, the first thing we're
going to look at is, how easy and

6
00:00:15.200 --> 00:00:18.060
how hard it is to look at
different models of programming.

7
00:00:18.060 --> 00:00:20.460
With high level programming,
just to start off.

8
00:00:20.460 --> 00:00:22.790
To give you some examples,
here, Python and Java.

9
00:00:22.790 --> 00:00:25.232
Those languages are considered
high-level programming.

10
00:00:25.232 --> 00:00:30.250
And low-level programming languages
are like Assembly, ARM, MIPs, so on.

11
00:00:30.250 --> 00:00:33.895
>> And it's also sort of a grey area,
because C's sort of in between.

12
00:00:33.895 --> 00:00:35.545
>> Right.
>> You'll see later when

13
00:00:35.545 --> 00:00:36.485
we start describing it.

14
00:00:36.485 --> 00:00:38.085
>> Right, and so,
with high level programming,

15
00:00:38.085 --> 00:00:41.135
the first point we want to touch upon is,
it's easier to use.

16
00:00:41.135 --> 00:00:43.915
The syntax is often easier for
like Python.

17
00:00:43.915 --> 00:00:44.585
It's much easier.

18
00:00:44.585 --> 00:00:47.025
You don't have to worry about brackets.

19
00:00:47.025 --> 00:00:48.085
>> Simpler.
Easier to read.

20
00:00:48.085 --> 00:00:48.915
>> Easier to read and all that.

21
00:00:48.915 --> 00:00:49.435
Yeah.

22
00:00:49.435 --> 00:00:52.860
>> Well, then like low level languages,
it might be a bit more difficult.

23
00:00:52.860 --> 00:00:57.240
When you first open an assembly file,
what the heck is this?

24
00:00:57.240 --> 00:01:01.110
>> And usually, lower programming has
a lot more lines of code to look through.

25
00:01:01.110 --> 00:01:05.940
And the next thing we have there is how
low programming has many abstractions.

26
00:01:05.940 --> 00:01:07.290
And that's basically, helpful,

27
00:01:07.290 --> 00:01:10.360
because the more abstract it is,
you can apply to more things.

28
00:01:10.360 --> 00:01:14.280
You don't have to specifically create
a certain thing for that specific use.

29
00:01:14.280 --> 00:01:16.620
You can just create one thing and
use it for ten different things.

30
00:01:16.620 --> 00:01:19.050
>> Right, it's like a lot of like premade
functions or something like that.

31
00:01:19.050 --> 00:01:20.420
>> Premade functions, yeah.

32
00:01:20.420 --> 00:01:23.260
And for low level program,
you don't have as many there as that.

33
00:01:23.260 --> 00:01:26.670
And the next thing we have for high
level programming is automate processes.

34
00:01:26.670 --> 00:01:29.540
So for like Java, there's this thing
called a garbage collector, and

35
00:01:29.540 --> 00:01:31.520
we'll go over more detail what that is.

36
00:01:31.520 --> 00:01:35.670
But that's basically, if you write
something that you never initialize or

37
00:01:35.670 --> 00:01:38.140
use later on, the garbage
collector will just remove that.

38
00:01:38.140 --> 00:01:39.640
>> Right, and
then in low level programming,

39
00:01:39.640 --> 00:01:42.040
you have to manage your memory yourself.

40
00:01:42.040 --> 00:01:45.470
So garbage collecting is removing
memory that you have already allocated.

41
00:01:45.470 --> 00:01:48.350
But then, in the long term,
you have to remove it.

42
00:01:48.350 --> 00:01:50.070
If you don't remove it,
you might run after a memory.

43
00:01:50.070 --> 00:01:51.580
So that's a big problem.

44
00:01:51.580 --> 00:01:55.140
>> Or you might have memory leaks and
that can cause security problems and such.

45
00:01:55.140 --> 00:01:56.430
So that's important there.

46
00:01:56.430 --> 00:01:59.570
Is there anything else you
want to add there, Randy?

47
00:01:59.570 --> 00:02:00.070
>> Yeah, it's like.

48
00:02:00.070 --> 00:02:02.460
What I said earlier about C
sort of being in the middle.

49
00:02:02.460 --> 00:02:07.160
It has an automated process
of looking at the registers.

50
00:02:07.160 --> 00:02:10.944
Like ARM, you have to actually
go into your registers,

51
00:02:10.944 --> 00:02:14.821
which is why the level is
considered closer to hardware.

52
00:02:14.821 --> 00:02:17.732
Because you talk about
the hardware's registers [CROSSTALK]

53
00:02:17.732 --> 00:02:18.351
>> So you basically,

54
00:02:18.351 --> 00:02:21.147
have to look at the hardware and manage
each registery with low-level programming.

55
00:02:21.147 --> 00:02:21.886
>> Right.

56
00:02:21.886 --> 00:02:24.730
>> With high-level programming,
it will do it for you.

57
00:02:24.730 --> 00:02:26.170
That's the point there.

58
00:02:26.170 --> 00:02:27.060
>> Right.
>> And

59
00:02:27.060 --> 00:02:29.130
with that,
we'll see you in the next video.

60
00:02:29.130 --> 00:02:32.710
And we'll talk about actual
high-level programming languages and

61
00:02:32.710 --> 00:02:33.490
what it offers here.