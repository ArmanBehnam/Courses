WEBVTT

1
00:00:02.880 --> 00:00:06.050
So to understand how
the internet actually works,

2
00:00:06.050 --> 00:00:10.970
we need to look at the protocols and
the OSI model,

3
00:00:10.970 --> 00:00:14.900
Open Systems Interconnection model,
that it is based on.

4
00:00:16.080 --> 00:00:22.550
The OSI model that is on
the left is a conceptual model

5
00:00:22.550 --> 00:00:27.030
that has been used in many communication
networks, including cell phones,

6
00:00:27.030 --> 00:00:32.240
the telephony, and many other
experimental networks in between.

7
00:00:32.240 --> 00:00:37.020
The one on the right is
the realization of the Internet.

8
00:00:40.840 --> 00:00:48.090
The TCP/IP, the Internet model,
you have an application layer,

9
00:00:48.090 --> 00:00:53.380
a transport layer, the Internet layer,
and the network access layer.

10
00:00:53.380 --> 00:00:59.170
The reason for
doing this modular design is

11
00:00:59.170 --> 00:01:04.350
each aspect of the system
can evolve independently.

12
00:01:04.350 --> 00:01:11.250
And there are seven layers in the OSI
model, but the internet uses only four.

13
00:01:13.910 --> 00:01:18.413
So the network topology is the data from

14
00:01:18.413 --> 00:01:23.878
Host A gets to Host B
through multiple routers.

15
00:01:23.878 --> 00:01:28.437
And the applications on both
sides talk to each other and

16
00:01:28.437 --> 00:01:35.033
the information actually flows from
the application down the transport layer,

17
00:01:35.033 --> 00:01:40.470
internet, link layer and
back to the routers and traces its path.

18
00:01:40.470 --> 00:01:44.016
Until it traverses back
from the link layer,

19
00:01:44.016 --> 00:01:47.880
internet, transport, and the application.

20
00:01:47.880 --> 00:01:55.480
So this is all people typically show,
the protocol stack between two hosts.

21
00:01:55.480 --> 00:02:01.381
The one thing I want to highlight

22
00:02:01.381 --> 00:02:07.830
here is the A and
B need not be based on the Internet.

23
00:02:07.830 --> 00:02:14.150
You can have a gateway module and you can
have a network of heterogeneous networks.

24
00:02:14.150 --> 00:02:15.030
In this picture,

25
00:02:16.300 --> 00:02:21.360
one of the routers actually talks
Internet and some other protocol.

26
00:02:21.360 --> 00:02:23.460
Let's call it XYZ.

27
00:02:23.460 --> 00:02:28.340
And it takes the internet messages,
and translates to XYZ.

28
00:02:28.340 --> 00:02:31.060
And that is a gateway.

29
00:02:31.060 --> 00:02:36.606
This way you have between the two
applications, seamless connectivity.

30
00:02:36.606 --> 00:02:41.590
And the two, so

31
00:02:41.590 --> 00:02:47.430
the way this works is a concept
called data encapsulation.

32
00:02:47.430 --> 00:02:54.820
So the user data, which is some text or
files that you need to transfer for FTP,

33
00:02:56.140 --> 00:03:01.200
it gets an application header, and
then it goes to the TCP layer.

34
00:03:01.200 --> 00:03:05.058
We will look at TCP in a minute,
Transmission Control Protocol.

35
00:03:05.058 --> 00:03:08.063
And then it goes to the IP layer.

36
00:03:08.063 --> 00:03:12.566
So as it goes down the layer
to the physical medium,

37
00:03:12.566 --> 00:03:17.071
every layer in the OSI model
keeps adding the header

38
00:03:17.071 --> 00:03:22.270
information ahead of what
it has already received.

39
00:03:22.270 --> 00:03:26.510
And this picture shows the Ethernet, but

40
00:03:26.510 --> 00:03:32.210
in a cellular connection, CDMA, GSM,
you would have different headers

41
00:03:32.210 --> 00:03:37.685
that get added to the IP datagram.

42
00:03:37.685 --> 00:03:42.751
The IP protocol itself,
it's called RFC 791.

43
00:03:42.751 --> 00:03:46.890
You can look it up on the Internet and
you will see this.

44
00:03:46.890 --> 00:03:53.460
There are, so I said the data can be
broken into small pieces and sent.

45
00:03:53.460 --> 00:03:58.962
So the Fragment Offset tells
where that particular piece

46
00:03:58.962 --> 00:04:05.720
of data fits in the big picture
of the file or the user message.

47
00:04:05.720 --> 00:04:12.440
And each IP packet has a source
address and a destination address.

48
00:04:12.440 --> 00:04:19.330
And then there is a checksum that it

49
00:04:19.330 --> 00:04:26.090
uses to check the sanity of the data,
to see if it got corrupted along the way.

50
00:04:26.090 --> 00:04:33.060
And on top of IP sits TCP, which is
the Transmission Control Protocol.

51
00:04:34.710 --> 00:04:40.110
This, incidentally, if this is all too
complex, it is, don't worry about it.

52
00:04:40.110 --> 00:04:44.390
I just wanted to highlight
the various fields

53
00:04:44.390 --> 00:04:49.470
that are there in these packets to
give you an idea of how it all works.

54
00:04:49.470 --> 00:04:55.480
So in the TCP,
one of the fields is a sequence number.

55
00:04:55.480 --> 00:04:59.070
And there is an acknowledgement number.

56
00:04:59.070 --> 00:05:01.320
And TCP sits on the IP.

57
00:05:01.320 --> 00:05:04.660
And this is how it provides reliability.

58
00:05:04.660 --> 00:05:08.620
TCP is a connection-oriented protocol and

59
00:05:08.620 --> 00:05:13.114
it looks at the missing pieces and
keeps asking for

60
00:05:13.114 --> 00:05:19.755
retransmissions until it gets
the complete message at the destination.