WEBVTT

1
00:00:00.000 --> 00:00:01.840
Welcome, everyone. In this video,

2
00:00:01.840 --> 00:00:05.245
we'll be going over the code for the mnist API project.

3
00:00:05.245 --> 00:00:07.590
And let's just jump into my computer here,

4
00:00:07.590 --> 00:00:11.480
and we'll see the three files that we needed for this project.

5
00:00:11.480 --> 00:00:14.310
So, the first file here is, essentially,

6
00:00:14.310 --> 00:00:18.280
taking the mnist data and taking a machine learning model and training it,

7
00:00:18.280 --> 00:00:22.900
so that we can output train model that we can actually use to predict some numbers.

8
00:00:22.900 --> 00:00:25.020
So, this is just some example code

9
00:00:25.020 --> 00:00:27.660
that they have on the tensorflow website that I can modified.

10
00:00:27.660 --> 00:00:30.435
The main thing is that I saved the weights,

11
00:00:30.435 --> 00:00:33.180
but we'll just go over it real quick.

12
00:00:33.180 --> 00:00:35.940
So, they're just inputting some libraries here.

13
00:00:35.940 --> 00:00:39.575
And then tensorflow is the important one.

14
00:00:39.575 --> 00:00:43.605
Here is how they define the model itself of the neural network.

15
00:00:43.605 --> 00:00:45.825
We won't be going over essentially how this works,

16
00:00:45.825 --> 00:00:47.940
but you can go over your topics and

17
00:00:47.940 --> 00:00:52.015
we will provide in the readings that you can look into.

18
00:00:52.015 --> 00:00:53.760
So, essentially, this is a bunch of

19
00:00:53.760 --> 00:00:57.105
layers that they're combining together to make a neural network.

20
00:00:57.105 --> 00:00:58.940
Some helper functions for them,

21
00:00:58.940 --> 00:01:03.990
and then this is the mouse callback.

22
00:01:03.990 --> 00:01:07.335
This is just an artifact from when we first did this.

23
00:01:07.335 --> 00:01:10.070
But here's the main code that's important.

24
00:01:10.070 --> 00:01:13.645
So, we want to input the mnist data set.

25
00:01:13.645 --> 00:01:16.210
So, just load up the data set, get all those images in.

26
00:01:16.210 --> 00:01:18.390
And you can ignore this.

27
00:01:18.390 --> 00:01:23.495
It's just how tensorflow works is it initializes some variables first.

28
00:01:23.495 --> 00:01:31.160
And here's actually getting the model which will be accessed through y_conv,

29
00:01:31.160 --> 00:01:36.030
and then, this is a bunch of calculations that typed,

30
00:01:36.030 --> 00:01:40.240
that they wanted to use for changing this model.

31
00:01:40.240 --> 00:01:45.310
And here's where it actually trains it.

32
00:01:45.310 --> 00:01:48.305
So, we opened up a tensorflow session.

33
00:01:48.305 --> 00:01:51.085
Now, this is a lot of stuff to just grasp at for now,

34
00:01:51.085 --> 00:01:53.045
but we didn't want to focus on this too much,

35
00:01:53.045 --> 00:01:54.880
but just get a brief overview on this.

36
00:01:54.880 --> 00:01:57.725
But it's really good to just read the documentation,

37
00:01:57.725 --> 00:02:00.910
just how machine learning works to get a good grasp for this.

38
00:02:00.910 --> 00:02:03.104
Basically, for this stuff,

39
00:02:03.104 --> 00:02:05.470
I was just going to give a brief overview again.

40
00:02:05.470 --> 00:02:08.845
This is just opening a tensorflow session,

41
00:02:08.845 --> 00:02:10.970
and they want in it other variables,

42
00:02:10.970 --> 00:02:14.875
and then we just train it for 2000 iterations.

43
00:02:14.875 --> 00:02:18.190
And then, we do a test on that data to see how good it is,

44
00:02:18.190 --> 00:02:23.550
and the main part that we added is saving the model into this file here.

45
00:02:23.550 --> 00:02:25.484
And you can ignore all this.

46
00:02:25.484 --> 00:02:28.415
This is just to help to run the file and some command line arguments.

47
00:02:28.415 --> 00:02:35.445
So that's just an example program that tensorflow has provided as a getting starter code.

48
00:02:35.445 --> 00:02:38.005
So, you don't need to worry about that too much.

49
00:02:38.005 --> 00:02:41.625
The next part is the code that we'll run on the server.

50
00:02:41.625 --> 00:02:49.300
So, in order to use the tensorflow model and predict on a new image,

51
00:02:49.300 --> 00:02:51.940
we need to also load that model up again.

52
00:02:51.940 --> 00:02:54.770
So that's why we have the same functions before,

53
00:02:54.770 --> 00:02:57.670
to find the neural network.

54
00:02:57.670 --> 00:03:00.190
It's the neural network, all the layers,

55
00:03:00.190 --> 00:03:03.505
some of the helper functions.

56
00:03:03.505 --> 00:03:04.760
These do specific things,

57
00:03:04.760 --> 00:03:07.585
but again, there are more in the machine learning category.

58
00:03:07.585 --> 00:03:14.170
Then, here is where we actually do the prediction of the image.

59
00:03:14.170 --> 00:03:18.175
So, we initialize some variables here again, and then we get the model.

60
00:03:18.175 --> 00:03:21.010
And then here, we create a saver object,

61
00:03:21.010 --> 00:03:22.675
so that we can load the weights in,

62
00:03:22.675 --> 00:03:24.625
and you'll see that used here.

63
00:03:24.625 --> 00:03:28.060
Now, in this session, after we initialized all the variables,

64
00:03:28.060 --> 00:03:30.535
and we want to do saver.restore,

65
00:03:30.535 --> 00:03:33.750
which loads the model in and all the weights that we can use it.

66
00:03:33.750 --> 00:03:37.700
And then, for a given image that we have here,

67
00:03:37.700 --> 00:03:44.360
we want to reshape it to the proper shape which is like a 1 by 784 array.

68
00:03:44.360 --> 00:03:47.180
And that's the shape that this model wants.

69
00:03:47.180 --> 00:03:52.325
So, we're just going to feed it that shape and it's going to run it through this,

70
00:03:52.325 --> 00:03:54.375
and give us a classification.

71
00:03:54.375 --> 00:03:58.100
And then, we can get the predicted number from it by

72
00:03:58.100 --> 00:04:02.060
doing the maximum value in that array that it could switch out.

73
00:04:02.060 --> 00:04:04.955
And then, here's the message that we want to send back to the user,

74
00:04:04.955 --> 00:04:07.455
so we want to send what we predicted whatever

75
00:04:07.455 --> 00:04:10.695
and stick their number in there, and return the message.

76
00:04:10.695 --> 00:04:13.065
So here is our web server, so,

77
00:04:13.065 --> 00:04:15.550
so far this has been like tensorflow machine learning.

78
00:04:15.550 --> 00:04:17.053
But here here's our web server for it,

79
00:04:17.053 --> 00:04:19.530
we're using Flask, and basically,

80
00:04:19.530 --> 00:04:21.630
you initialize the Flask app.

81
00:04:21.630 --> 00:04:24.000
And then, you do a route to this,

82
00:04:24.000 --> 00:04:25.840
which is like the base URL,

83
00:04:25.840 --> 00:04:29.100
like google.com, and then slash whatever you want.

84
00:04:29.100 --> 00:04:30.630
So in this case, we're doing slash uploads,

85
00:04:30.630 --> 00:04:34.720
so this would be like google.com slash upload, it's how this would work.

86
00:04:34.720 --> 00:04:38.035
And then, we have the function that will run when it gets called.

87
00:04:38.035 --> 00:04:42.850
So, basically, it will take the image from the request here, and then,

88
00:04:42.850 --> 00:04:45.635
it will save the image as a JPEG file,

89
00:04:45.635 --> 00:04:48.860
and then when it uses open CV to open up that same image again.

90
00:04:48.860 --> 00:04:55.890
And then, we're just going to pass that image to the predict function,

91
00:04:55.890 --> 00:04:58.990
and then, that's going to spit back out whatever it saw.

92
00:04:58.990 --> 00:05:01.835
So, yes, that's just actually how the server works and we're just going to

93
00:05:01.835 --> 00:05:05.285
also go through quickly how the client works.

94
00:05:05.285 --> 00:05:07.230
So for the first part,

95
00:05:07.230 --> 00:05:09.170
it's just importing libraries,

96
00:05:09.170 --> 00:05:11.870
choosing our API end point,

97
00:05:11.870 --> 00:05:13.655
which is the URL of our server,

98
00:05:13.655 --> 00:05:17.335
and that little extra part like slash upload.

99
00:05:17.335 --> 00:05:21.230
So, we just give it as a command line argument, because that could change a lot.

100
00:05:21.230 --> 00:05:24.380
And here is the important part for drawing the image,

101
00:05:24.380 --> 00:05:26.090
we're using open CVs,

102
00:05:26.090 --> 00:05:31.295
open called image callback function so that when the mouse is clicked,

103
00:05:31.295 --> 00:05:36.015
then we'll call, we'll do a function which is wherever the mouse is clicked,

104
00:05:36.015 --> 00:05:38.410
draw a black pixel there.

105
00:05:38.410 --> 00:05:41.540
And then, this is just helping to create that image.

106
00:05:41.540 --> 00:05:44.345
So, we would make an empty image first which is all white,

107
00:05:44.345 --> 00:05:46.980
and we set the mouse callback.

108
00:05:46.980 --> 00:05:49.500
And then here's the four loop for line to the user

109
00:05:49.500 --> 00:05:52.720
just keep drawing on the image until they press escape.

110
00:05:52.720 --> 00:05:54.295
So, just show the image,

111
00:05:54.295 --> 00:05:57.310
resize the window so it's bigger so it's easier for them to see,

112
00:05:57.310 --> 00:06:01.720
and then use cv2.waitKey just to queue the image

113
00:06:01.720 --> 00:06:06.175
on there until they press a specific key which is recognized by this code,

114
00:06:06.175 --> 00:06:07.945
and they press escape.

115
00:06:07.945 --> 00:06:10.140
And the key is actually escape, yes.

116
00:06:10.140 --> 00:06:15.560
And here, we have to invert the image because the model expressed a very specific format.

117
00:06:15.560 --> 00:06:19.435
So, we had to fit to that format.

118
00:06:19.435 --> 00:06:21.670
And we saved the image,

119
00:06:21.670 --> 00:06:23.905
and then here, we reopen the image.

120
00:06:23.905 --> 00:06:27.850
And we read it as base64,

121
00:06:27.850 --> 00:06:29.875
which is just an encoding method for an image.

122
00:06:29.875 --> 00:06:34.525
And we can stick it inside the request through this,

123
00:06:34.525 --> 00:06:36.340
the params, and here,

124
00:06:36.340 --> 00:06:38.630
we actually make the request to the API.

125
00:06:38.630 --> 00:06:40.370
And once the request comes back,

126
00:06:40.370 --> 00:06:43.000
it will hold the request data,

127
00:06:43.000 --> 00:06:45.895
which is just a string, and we print out the response.

128
00:06:45.895 --> 00:06:49.795
So, here, just walking through it again,

129
00:06:49.795 --> 00:06:52.855
we let the user draw an image,

130
00:06:52.855 --> 00:06:54.730
we do some processing on the image,

131
00:06:54.730 --> 00:07:02.320
and then we just let them save the image, and then,

132
00:07:02.320 --> 00:07:05.850
we save it as base64, I mean,

133
00:07:05.850 --> 00:07:07.480
take it out as base64,

134
00:07:07.480 --> 00:07:08.980
and then send a request,

135
00:07:08.980 --> 00:07:10.445
and then print out the response again.

136
00:07:10.445 --> 00:07:12.983
So, just really quick, and yes.

137
00:07:12.983 --> 00:07:17.205
So, this has been a brief overview of the three major parts of this project.

138
00:07:17.205 --> 00:07:20.485
Training the model, setting up the web server with the model,

139
00:07:20.485 --> 00:07:26.381
and then creating a client that can send the proper image to the web API.

140
00:07:26.381 --> 00:07:31.350
So yes, you've learned basically a brief overview how this all worked.

141
00:07:31.350 --> 00:07:34.285
So, be sure to take some of this code, play with it,

142
00:07:34.285 --> 00:07:39.490
and see what you can do and how you can possibly edit it and make it even better.

143
00:07:39.490 --> 00:07:42.145
So yes, stay tuned for the Signhorn for this project,

144
00:07:42.145 --> 00:07:44.000
and have a good day.