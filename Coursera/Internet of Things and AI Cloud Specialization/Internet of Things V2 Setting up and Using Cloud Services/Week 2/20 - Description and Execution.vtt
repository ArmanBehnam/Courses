WEBVTT

1
00:00:00.790 --> 00:00:04.645
In this video, we'll be going over the Censor Stream Project,

2
00:00:04.645 --> 00:00:09.430
which is essentially taking data from our surroundings such as light, sound,

3
00:00:09.430 --> 00:00:15.325
and temperature, and then studying that data to AWS IoT,

4
00:00:15.325 --> 00:00:21.110
and then displaying that same data on the EC2 server.

5
00:00:21.270 --> 00:00:26.635
So, here are some of the requirements that we need.

6
00:00:26.635 --> 00:00:32.835
Of course, we need the sensors mezzanine to connect all the sensors to the Dragonboard,

7
00:00:32.835 --> 00:00:38.165
and we need three grove connectors to compensate for how many sensors we have.

8
00:00:38.165 --> 00:00:40.220
And then we got to connect these as well.

9
00:00:40.220 --> 00:00:43.865
And we got the temperature sensor which is connected to A0,

10
00:00:43.865 --> 00:00:46.355
light sensor that is connected to A1,

11
00:00:46.355 --> 00:00:49.445
and sound sensor that is connected to A2,

12
00:00:49.445 --> 00:00:54.915
and these are analog ports on the mezzanine.

13
00:00:54.915 --> 00:00:57.740
And if you guys don't know what these are,

14
00:00:57.740 --> 00:01:01.690
we advise you guys to go back and review course two,

15
00:01:01.690 --> 00:01:05.380
and we'll get on with this.

16
00:01:05.380 --> 00:01:09.695
So now, just like a general description of what's going on exactly.

17
00:01:09.695 --> 00:01:14.640
This will make a lot more sense when you see the code in action and what's happening.

18
00:01:14.640 --> 00:01:16.970
So, the first thing we have is an Arduino program to

19
00:01:16.970 --> 00:01:20.130
take in analog data from the sensors.

20
00:01:20.130 --> 00:01:22.425
Now, that's just on the mezzanine itself.

21
00:01:22.425 --> 00:01:26.110
Now, what it does with that data is it just processes it a little bit,

22
00:01:26.110 --> 00:01:29.060
do some math, and then sends it to the Dragonboard over serial.

23
00:01:29.060 --> 00:01:31.230
And on the Dragonboard,

24
00:01:31.230 --> 00:01:35.750
it reads it from serial and then sends it over to the AWS IoT,

25
00:01:35.750 --> 00:01:40.838
and on the topic "dbSensors."

26
00:01:40.838 --> 00:01:43.155
We've kind of gone over this already, but again,

27
00:01:43.155 --> 00:01:45.665
the topic is kind of like a radio frequency,

28
00:01:45.665 --> 00:01:49.030
like when you're listening to 94.9.

29
00:01:49.030 --> 00:01:51.915
That's just some random radio channel here.

30
00:01:51.915 --> 00:01:55.550
And basically, it just broadcast it.

31
00:01:55.550 --> 00:01:57.050
It doesn't care about who listens to it,

32
00:01:57.050 --> 00:01:59.990
but it's just the easy way to communicate.

33
00:01:59.990 --> 00:02:03.860
And then after it sent it to that channel on AWS,

34
00:02:03.860 --> 00:02:08.225
it listens on that same channel and then whatever some data is sent to it,

35
00:02:08.225 --> 00:02:13.728
it'll send it and save it to a DynamoDB database.

36
00:02:13.728 --> 00:02:21.815
DynamoDB might sound strange but it's just Amazon's own database service.

37
00:02:21.815 --> 00:02:26.020
After that, we create an HTTP access point which,

38
00:02:26.020 --> 00:02:28.790
basically, you go to this URL and it hands you data.

39
00:02:28.790 --> 00:02:32.720
And we do that using Lambda and API Gateway.

40
00:02:32.720 --> 00:02:35.150
Now, for the AWS IoT,

41
00:02:35.150 --> 00:02:36.545
and Lambda and API Gateway,

42
00:02:36.545 --> 00:02:39.220
that's supposed to be done in the AWS console.

43
00:02:39.220 --> 00:02:41.980
So, we link to that as much.

44
00:02:41.980 --> 00:02:50.190
So basically, it'll allow us to access the data from the Dragonboard using a URL.

45
00:02:50.190 --> 00:02:57.110
And the last part is serving a website on a web server using NodeJS on an EC2 instance.

46
00:02:57.110 --> 00:03:00.595
Now, again, an EC2 instance is just some computer running

47
00:03:00.595 --> 00:03:04.205
at Amazon that we borrow and that's accessible through the web.

48
00:03:04.205 --> 00:03:07.415
So, now we'll be going through the demo.

49
00:03:07.415 --> 00:03:14.340
So, here we are in the folder that we created, Embedded-Programming.

50
00:03:14.340 --> 00:03:17.550
That's just like a temporary folder that we've created for now.

51
00:03:17.550 --> 00:03:20.290
But, when we release this,

52
00:03:20.290 --> 00:03:22.635
you'll expect it to be in our GitHub,

53
00:03:22.635 --> 00:03:27.290
which is under UCSD Coursera folder that you can clone.

54
00:03:27.290 --> 00:03:30.165
This is just a working repository stuff,

55
00:03:30.165 --> 00:03:31.840
don't worry about it.

56
00:03:31.840 --> 00:03:37.985
So, here are some of the directories within the module itself,

57
00:03:37.985 --> 00:03:40.550
and within the program itself.

58
00:03:40.550 --> 00:03:43.710
So, the first part is the Arduino and this part,

59
00:03:43.710 --> 00:03:45.290
let's cd into it first,

60
00:03:45.290 --> 00:03:51.990
and then let's ls.

61
00:03:51.990 --> 00:03:54.990
And then, this part is important for reading

62
00:03:54.990 --> 00:04:00.345
what is actually happening in the outside world into the mezzanine,

63
00:04:00.345 --> 00:04:03.330
and then converting that to some kind of

64
00:04:03.330 --> 00:04:08.150
serial input that we we store into a Python file,

65
00:04:08.150 --> 00:04:11.070
and then we can run this Python file to see what

66
00:04:11.070 --> 00:04:15.950
is actually getting inputted from the sensors.

67
00:04:15.950 --> 00:04:18.540
So, the first part is the Arduino part,

68
00:04:18.540 --> 00:04:20.284
and this is the part where it takes it in,

69
00:04:20.284 --> 00:04:22.985
rather than the part that actually prints it out.

70
00:04:22.985 --> 00:04:25.595
So, let's just go into this file.

71
00:04:25.595 --> 00:04:28.525
We'll be going over how it's settling on more later.

72
00:04:28.525 --> 00:04:30.835
But just to get you a look of it, it's not too complicated,

73
00:04:30.835 --> 00:04:32.835
just reading from each sensor,

74
00:04:32.835 --> 00:04:37.095
doing a little bit of math, and then printing out over serial.

75
00:04:37.095 --> 00:04:41.940
And then we can exit out of this quick view. We'll go over it more in the next video.

76
00:04:41.940 --> 00:04:45.860
And here's the readSerial Python file.

77
00:04:45.860 --> 00:04:50.795
And this is just printing out what we saw from the sensors.

78
00:04:50.795 --> 00:04:55.590
And let's go back to our directory,

79
00:04:55.590 --> 00:04:59.190
our previous directory, and let's ls again.

80
00:04:59.190 --> 00:05:07.590
And the Dragonboard is the second part of our program and let's just cd into it.

81
00:05:07.590 --> 00:05:11.760
Here, we see some important files.

82
00:05:11.760 --> 00:05:14.970
These are some of the keys that they provided so

83
00:05:14.970 --> 00:05:18.090
that your information doesn't get corrupted

84
00:05:18.090 --> 00:05:24.570
on the way or there are some security stuff that goes on between.

85
00:05:24.570 --> 00:05:29.307
The main thing we got to worry about is just this.

86
00:05:29.307 --> 00:05:36.070
The send-data-aws part, so let's bring them into that.

87
00:05:36.070 --> 00:05:38.890
So, sorry we didn't start at the top.

88
00:05:38.890 --> 00:05:47.330
So, this part is important for communicating onto the MQTT client,

89
00:05:47.330 --> 00:05:51.135
and parsing out all the information

90
00:05:51.135 --> 00:05:55.450
and formatting in a way that can be readable for later,

91
00:05:55.450 --> 00:05:58.875
so that we can print out the data correctly.

92
00:05:58.875 --> 00:06:01.396
We will be going over this later as well.

93
00:06:01.396 --> 00:06:05.415
And then, in order to start off,

94
00:06:05.415 --> 00:06:09.540
we recommend that you run the start.sh script as well.

95
00:06:09.540 --> 00:06:15.030
Just heads up, installs the Python SDK for it and just gives you a quick start.

96
00:06:15.030 --> 00:06:20.190
And then, let's cd into the EC2 server.

97
00:06:20.190 --> 00:06:29.105
And this part is the NodeJS file which is for above JavaScript,

98
00:06:29.105 --> 00:06:36.410
and this allows us to print what we want onto a web server.

99
00:06:36.410 --> 00:06:43.010
And we want it to be accessible through any phone, computer,

100
00:06:43.010 --> 00:06:47.355
so forth, so we are using,

101
00:06:47.355 --> 00:06:49.185
well, we'll go over it later,

102
00:06:49.185 --> 00:06:53.145
but we'll be using HTTP.

103
00:06:53.145 --> 00:06:57.280
And here, look how the file looks like.

104
00:06:57.280 --> 00:07:03.055
And then, let's move on to some of

105
00:07:03.055 --> 00:07:09.845
the AWS IoT stuff that happens on the AWS IoT website.

106
00:07:09.845 --> 00:07:11.270
Not so quick. Let's just run

107
00:07:11.270 --> 00:07:15.175
the Arduino program and then make sure the sensors are set up.

108
00:07:15.175 --> 00:07:16.865
Okay.

109
00:07:16.865 --> 00:07:23.345
So, first we want to run the Arduino.

110
00:07:23.345 --> 00:07:27.450
And then let's ls.

111
00:07:27.450 --> 00:07:32.565
And then just do your make upload reset_stty.

112
00:07:32.565 --> 00:07:36.005
You don't have to have this memorized,

113
00:07:36.005 --> 00:07:38.995
but we do because we've done this so much.

114
00:07:38.995 --> 00:07:48.150
And what this is doing is reading input from the sensors and putting it on a serial port.

115
00:07:48.150 --> 00:07:50.555
Taking a while, and then we

116
00:07:50.555 --> 00:07:58.445
run sudo python readSerial.py,

117
00:07:58.445 --> 00:08:03.630
and this will print out what we're reading from the sensor itself.

118
00:08:03.630 --> 00:08:04.700
So, if you mess with the sensors,

119
00:08:04.700 --> 00:08:07.655
you can see that these numbers change.

120
00:08:07.655 --> 00:08:10.850
We went over this in a sensor cluster video,

121
00:08:10.850 --> 00:08:12.400
if you guys want to check that out.

122
00:08:12.400 --> 00:08:14.885
But basically, if you just mess with the sensors,

123
00:08:14.885 --> 00:08:16.010
the data will change.

124
00:08:16.010 --> 00:08:19.753
The temperature got hotter because he grabbed the temperature sensor.

125
00:08:19.753 --> 00:08:25.003
And then, I can make the sound one get higher at 648.

126
00:08:25.003 --> 00:08:28.235
So, you've seen the data changing.

127
00:08:28.235 --> 00:08:34.980
And then we just want to go through the Dragonboard folder and running that file.

128
00:08:34.980 --> 00:08:40.143
So, if you go into it and then we can go to the Dragonboard,

129
00:08:40.143 --> 00:08:42.755
and then just run send-data.

130
00:08:42.755 --> 00:08:46.675
Now this will send the data from the Dragonboard,

131
00:08:46.675 --> 00:08:51.025
and then send it to AWS so that anybody can listen to it that's on that channel.

132
00:08:51.025 --> 00:08:54.575
Okay, so let's check it out on the website.

133
00:08:54.575 --> 00:08:57.650
We have the data being sent out to AWS IoT.

134
00:08:57.650 --> 00:09:01.865
So now, we're going to see how that looks like on AWS.

135
00:09:01.865 --> 00:09:04.126
So just on that service thing,

136
00:09:04.126 --> 00:09:06.785
and then we can just choose test.

137
00:09:06.785 --> 00:09:09.080
And this basically just allows us to listen to one of

138
00:09:09.080 --> 00:09:12.565
the channels or frequencies that we chose before,

139
00:09:12.565 --> 00:09:15.613
like listening to 94.9 FM,

140
00:09:15.613 --> 00:09:17.675
like you want to listen to your favorite music.

141
00:09:17.675 --> 00:09:21.995
But our music is sensor data, not as exciting.

142
00:09:21.995 --> 00:09:27.020
So, the channel that we call it is dbSensors,

143
00:09:27.020 --> 00:09:30.320
and you can just type that in and click Subscribe.

144
00:09:30.320 --> 00:09:34.140
And you can see here, here's a bunch of data on the sensors.

145
00:09:34.140 --> 00:09:38.565
Ninety, 25.12, keeps constantly updating,

146
00:09:38.565 --> 00:09:41.525
so it's hard to scroll with it.

147
00:09:41.525 --> 00:09:45.225
But if Andrew just makes the temperature one go higher,

148
00:09:45.225 --> 00:09:49.055
you can see that it goes from 25 points all the way to 27.

149
00:09:49.055 --> 00:09:57.410
This is live data showing on your website or your laptop.

150
00:09:57.410 --> 00:09:59.840
So now, we're going to go from this,

151
00:09:59.840 --> 00:10:06.450
and just show you how can display it normally through a website.

152
00:10:06.450 --> 00:10:10.190
Now, we're just going to use another service, it's called EC2.

153
00:10:10.190 --> 00:10:11.655
We've gone over this a bit before,

154
00:10:11.655 --> 00:10:15.245
but remember it's just a computer AWS has,

155
00:10:15.245 --> 00:10:16.550
and it's open to the internet,

156
00:10:16.550 --> 00:10:18.525
and we can just run stuff on it.

157
00:10:18.525 --> 00:10:20.555
We're just going to go to Running Instances.

158
00:10:20.555 --> 00:10:23.270
I already have mine set up,

159
00:10:23.270 --> 00:10:27.690
we just zoom out a little bit.

160
00:10:27.690 --> 00:10:29.245
And the one we chose,

161
00:10:29.245 --> 00:10:31.245
I labeled as IoT.

162
00:10:31.245 --> 00:10:35.790
And just go here and you can just start it.

163
00:10:35.790 --> 00:10:38.928
One important thing when you guys are using this,

164
00:10:38.928 --> 00:10:40.798
make sure you guys don't,

165
00:10:40.798 --> 00:10:42.350
like when you start it,

166
00:10:42.350 --> 00:10:44.035
you run it, it charges you.

167
00:10:44.035 --> 00:10:47.660
When you stop, make sure you don't put Terminate

168
00:10:47.660 --> 00:10:52.330
because that deletes your entire computer.

169
00:10:52.330 --> 00:10:56.365
No, not your actual computer but whatever you're running on AWS.

170
00:10:56.365 --> 00:11:02.800
I did that for a class project, sad.

171
00:11:02.800 --> 00:11:06.040
So, it just takes a bit to start up.

172
00:11:06.040 --> 00:11:10.915
We installed NodeJS and some other programs on this before.

173
00:11:10.915 --> 00:11:14.730
They'll be in the instructions on the Github for this.

174
00:11:14.730 --> 00:11:17.515
So if you to just want to connect, copy this,

175
00:11:17.515 --> 00:11:19.570
I just control+C that,

176
00:11:19.570 --> 00:11:22.630
and then we can go to Ubuntu's terminal.

177
00:11:22.630 --> 00:11:24.535
And here, we have the pem file,

178
00:11:24.535 --> 00:11:26.620
that's like the password to the server,

179
00:11:26.620 --> 00:11:28.785
and we just copy and paste this.

180
00:11:28.785 --> 00:11:29.990
So, it'll just ask you,

181
00:11:29.990 --> 00:11:31.145
"Do you want to connect to the server?"

182
00:11:31.145 --> 00:11:33.115
And just say, "Yes."

183
00:11:33.115 --> 00:11:34.730
And, here you go.

184
00:11:34.730 --> 00:11:40.636
And then we can go directly to our files that we need, course three.

185
00:11:40.636 --> 00:11:44.670
So, this folder or directory will appear a different name by the time you guys use it.

186
00:11:44.670 --> 00:11:47.890
And you guys can do all of this directly on the Dragonboard,

187
00:11:47.890 --> 00:11:50.000
you don't need a separate Linux computer for it.

188
00:11:50.000 --> 00:11:53.320
You could totally run the server on your Dragonboard, but for this,

189
00:11:53.320 --> 00:11:58.398
we just want to show it being accessible from anywhere.

190
00:11:58.398 --> 00:11:59.995
And go there.

191
00:11:59.995 --> 00:12:04.656
And then we can go here and temp-light-sound.

192
00:12:04.656 --> 00:12:07.070
And just since we're running on EC2 server,

193
00:12:07.070 --> 00:12:09.930
we'll want to run a code for that.

194
00:12:09.930 --> 00:12:14.140
And then we have node modules, don't worry about that.

195
00:12:14.140 --> 00:12:17.145
That's just how NodeJS

196
00:12:17.145 --> 00:12:21.880
likes to store its library that you install into just the folder next to it.

197
00:12:21.880 --> 00:12:25.510
And then index.html, that's just the page that will show up.

198
00:12:25.510 --> 00:12:29.890
If you're not experienced with web development,

199
00:12:29.890 --> 00:12:32.100
a good resource is W3School,

200
00:12:32.100 --> 00:12:33.570
so if you guys or even just using

201
00:12:33.570 --> 00:12:35.515
your favorite search engine and looking it up, HTML, CSS,

202
00:12:35.515 --> 00:12:40.025
JavaScript, and stuff like that is really useful.

203
00:12:40.025 --> 00:12:44.580
But we'll just start up this NodeJS server.

204
00:12:44.580 --> 00:12:49.130
So, one thing to note is how you run

205
00:12:49.130 --> 00:12:54.010
a node file is by using NodeJS in a file, kind of like Python.

206
00:12:54.010 --> 00:13:00.940
But you can see here that this will fail because the server wants to run on port 80,

207
00:13:00.940 --> 00:13:02.440
but that's a protected port,

208
00:13:02.440 --> 00:13:05.010
so we have to run it with sudo.

209
00:13:05.010 --> 00:13:07.565
And here, you can see that,

210
00:13:07.565 --> 00:13:10.685
"App listening on port 80," no error, it works.

211
00:13:10.685 --> 00:13:16.991
And then now, we can visualize the data by going to the website hosted on a server.

212
00:13:16.991 --> 00:13:25.158
Now, you can do that by just going to IPP for public IP and copying those numbers,

213
00:13:25.158 --> 00:13:29.330
and going to your favorite browser, copy that in.

214
00:13:29.330 --> 00:13:33.605
And there we go. This is the website we have, it's right there.

215
00:13:33.605 --> 00:13:36.730
Now, if Andrew messes with the sensors,

216
00:13:36.730 --> 00:13:38.855
you can see all that change.

217
00:13:38.855 --> 00:13:43.121
See? He's messing with the sound one by tapping it really loudly.

218
00:13:43.121 --> 00:13:47.500
So now, those crazy yellow spikes.

219
00:13:47.500 --> 00:13:50.390
So, yellow is obviously for sound, blue is for light.

220
00:13:50.390 --> 00:13:52.960
So, if we cover the light one, where did it go?

221
00:13:52.960 --> 00:13:55.427
There it is. So, we cover the light one.

222
00:13:55.427 --> 00:14:01.400
So, we cover it with my hand and it just drops in light intensity.

223
00:14:01.400 --> 00:14:04.400
The red one's temperature is way low compared to the rest,

224
00:14:04.400 --> 00:14:07.775
that's just because it had some math done on it.

225
00:14:07.775 --> 00:14:11.360
So, this is essentially what you can do.

226
00:14:11.360 --> 00:14:17.585
You can turn data that you're collecting on like next to you in your home,

227
00:14:17.585 --> 00:14:20.545
displaying it on a website that anybody can see.

228
00:14:20.545 --> 00:14:23.110
Now, this is just for some simple data,

229
00:14:23.110 --> 00:14:25.595
but if you want some more interesting stuff,

230
00:14:25.595 --> 00:14:28.040
like I don't know,

231
00:14:28.040 --> 00:14:29.090
health data or something,

232
00:14:29.090 --> 00:14:31.472
you can just display and possibly your doctor you can see it,

233
00:14:31.472 --> 00:14:34.305
and give information on that feedback directly.

234
00:14:34.305 --> 00:14:37.655
And this can just be constantly running, connecting data.

235
00:14:37.655 --> 00:14:40.160
On another way, you can also make it so that

236
00:14:40.160 --> 00:14:45.640
the website interacts with some kind of servo, or something like Dragonboard.

237
00:14:45.640 --> 00:14:49.595
Basically, it's just showing how you connect websites to

238
00:14:49.595 --> 00:14:55.690
devices and sensors that you interact with physically.

239
00:14:55.690 --> 00:14:58.790
So, that's our demo for that.

240
00:14:58.790 --> 00:15:02.000
We'll be going over how the code works in the next video.