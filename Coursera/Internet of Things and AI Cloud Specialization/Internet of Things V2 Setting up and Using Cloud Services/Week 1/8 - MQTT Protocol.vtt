WEBVTT

1
00:00:01.290 --> 00:00:05.256
Hey everyone. In this lesson, I'll be going over the MQTT protocol.

2
00:00:05.256 --> 00:00:06.625
So in the last lesson,

3
00:00:06.625 --> 00:00:10.200
Gonz went over JSON and REST APIs to kind of

4
00:00:10.200 --> 00:00:14.330
showcase the communication between your embedded systems with the Cloud.

5
00:00:14.330 --> 00:00:17.298
So, that's actually one of the main methods to do that.

6
00:00:17.298 --> 00:00:21.975
There's a new method with the explosion of IoT called the MQTT protocol.

7
00:00:21.975 --> 00:00:24.565
So, we'll go straight into that.

8
00:00:24.565 --> 00:00:27.737
So, real quick, just want to go over MQTT.

9
00:00:27.737 --> 00:00:29.080
MQTT stands for

10
00:00:29.080 --> 00:00:33.185
Message Queue Telemetry Transport protocol, and that's kind of a long name,

11
00:00:33.185 --> 00:00:36.050
but basically, it's a very lightweight way of

12
00:00:36.050 --> 00:00:39.480
sending communication between the different services.

13
00:00:39.480 --> 00:00:42.728
Whereas, REST API that sits along on top of HTTP,

14
00:00:42.728 --> 00:00:45.700
it's a bit more heavy, more synchronous.

15
00:00:45.700 --> 00:00:49.400
MQTT more lightweight, you can do more stuff with it in terms

16
00:00:49.400 --> 00:00:53.388
of making sure data is synchronized or what not.

17
00:00:53.388 --> 00:00:57.970
So, MQTT is kind of based off of this publisher subscriber model.

18
00:00:57.970 --> 00:01:01.730
So, when you do some sort of HTTP request,

19
00:01:01.730 --> 00:01:03.825
you know exactly who to contact,

20
00:01:03.825 --> 00:01:06.510
and you have to wait for their response.

21
00:01:06.510 --> 00:01:09.695
And the Pub Sub model, what you'll see is,

22
00:01:09.695 --> 00:01:12.995
yourself will subscribe to some sort of service,

23
00:01:12.995 --> 00:01:15.790
and then you'll just do whatever you want in the meantime,

24
00:01:15.790 --> 00:01:18.740
and then whenever the service is ready they'll push information to you.

25
00:01:18.740 --> 00:01:24.530
A good example is probably when you sign up for let's say,

26
00:01:24.530 --> 00:01:27.650
your notifications on the phone.

27
00:01:27.650 --> 00:01:30.215
Let's say, I want to get notified of the next event.

28
00:01:30.215 --> 00:01:31.983
So what you do is you subscribe to let say,

29
00:01:31.983 --> 00:01:33.915
your favorite bands' events,

30
00:01:33.915 --> 00:01:37.055
click the 'OK' button and then you go off with your day.

31
00:01:37.055 --> 00:01:39.320
You go on doing your work,

32
00:01:39.320 --> 00:01:40.890
your homework, all that stuff.

33
00:01:40.890 --> 00:01:43.295
And all of a sudden, there's a new event nearby you.

34
00:01:43.295 --> 00:01:44.750
Sends you a notification,

35
00:01:44.750 --> 00:01:48.455
and you know you've got to go to that concert next weekend.

36
00:01:48.455 --> 00:01:51.620
So that's kind of an example of a Pub Sub model.

37
00:01:51.620 --> 00:01:53.360
So, one of the problems with that, however,

38
00:01:53.360 --> 00:01:57.455
is that you need to directly communicate with that person or that service.

39
00:01:57.455 --> 00:02:00.335
So I need to directly communicate with,

40
00:02:00.335 --> 00:02:05.290
let's say Google, and Google will need to directly push it to me.

41
00:02:05.290 --> 00:02:07.775
So, there's a new concept called the message broker,

42
00:02:07.775 --> 00:02:09.620
where they kind of abstract that out.

43
00:02:09.620 --> 00:02:11.105
So my favorite example is,

44
00:02:11.105 --> 00:02:13.730
let's say, I want to send Gonz over here money.

45
00:02:13.730 --> 00:02:16.955
Instead of me going over directly giving Gonz money when it's ready,

46
00:02:16.955 --> 00:02:19.980
I can just go sent it through the mail, and what the mail will do,

47
00:02:19.980 --> 00:02:24.425
they'll be in charge of sending the money over to Gonz directly.

48
00:02:24.425 --> 00:02:26.835
Gonz will ask me money,

49
00:02:26.835 --> 00:02:29.185
I just give it over to the mail service,

50
00:02:29.185 --> 00:02:32.015
the mail service will automatically to deliver to Gonz.

51
00:02:32.015 --> 00:02:36.080
So in this way, if we kind of change that over to the IoT world,

52
00:02:36.080 --> 00:02:41.120
these IoT devices will send data to some sort of channel or message broker,

53
00:02:41.120 --> 00:02:44.060
and then the message broker will be in charge of sending

54
00:02:44.060 --> 00:02:48.110
that data out to each of the individual subscribers.

55
00:02:48.110 --> 00:02:50.640
So for example, in this case,

56
00:02:50.640 --> 00:02:58.430
one of the common enterprise level brokers is something called Hive MQTT broker.

57
00:02:58.430 --> 00:03:01.040
And just like I was saying before,

58
00:03:01.040 --> 00:03:04.205
there's slight differences between MQTT and HTTP,

59
00:03:04.205 --> 00:03:08.949
but the main difference is that HTTP kind of depends on this quote-unquote "handshake",

60
00:03:08.949 --> 00:03:11.300
where you need to wait for the data to come back.

61
00:03:11.300 --> 00:03:15.290
With MQTT, you can kind of configure it to how you need.

62
00:03:15.290 --> 00:03:18.020
What I mean by that is,

63
00:03:18.020 --> 00:03:19.370
if I send you data,

64
00:03:19.370 --> 00:03:20.930
sometimes I don't want to know if you receive

65
00:03:20.930 --> 00:03:23.150
that data or not. I just want to send it out.

66
00:03:23.150 --> 00:03:25.850
So if I'm getting data every millisecond let say,

67
00:03:25.850 --> 00:03:29.570
there's no need for you to get every single millisecond's worth of data.

68
00:03:29.570 --> 00:03:31.580
You can just receive maybe half a second's worth,

69
00:03:31.580 --> 00:03:33.080
or so on and so forth.

70
00:03:33.080 --> 00:03:34.910
So for me, as a device,

71
00:03:34.910 --> 00:03:37.935
I don't need a confirmation of whether or not you received it.

72
00:03:37.935 --> 00:03:40.340
Now there's also different settings on that, but,

73
00:03:40.340 --> 00:03:44.045
especially if you have a lot of devices sending data continuously,

74
00:03:44.045 --> 00:03:49.850
you kind of want to tune that parameter to however you want.

75
00:03:49.850 --> 00:03:53.215
So, this is kind of the process for the MQTT protocol.

76
00:03:53.215 --> 00:03:55.030
What will happen is you'll have, let's say,

77
00:03:55.030 --> 00:03:56.885
client one, as you see in the image,

78
00:03:56.885 --> 00:03:59.455
try and connect to the MQTT broker,

79
00:03:59.455 --> 00:04:01.300
and once that connection goes through,

80
00:04:01.300 --> 00:04:06.325
they'll go ahead and start publishing events through some sort of topic.

81
00:04:06.325 --> 00:04:08.445
Client two, on the other hand,

82
00:04:08.445 --> 00:04:12.820
they'll also connect and maybe subscribe to the events topic,

83
00:04:12.820 --> 00:04:15.885
and then, anytime a message is published,

84
00:04:15.885 --> 00:04:17.300
they'll go out and get that message.

85
00:04:17.300 --> 00:04:19.430
So, if we go through the flow-through again,

86
00:04:19.430 --> 00:04:22.205
client one connects with their broker,

87
00:04:22.205 --> 00:04:25.525
then client two connects and subscribes to events.

88
00:04:25.525 --> 00:04:30.045
Then client one publishes an event and then it goes directly to client two,

89
00:04:30.045 --> 00:04:33.460
and client two didn't have to do anything; it just automatically gets it.

90
00:04:33.460 --> 00:04:36.270
So, this is kind of how AWS IoT works.

91
00:04:36.270 --> 00:04:37.880
In the next video,

92
00:04:37.880 --> 00:04:41.930
we'll go ahead and go over how all that works underneath the hood.