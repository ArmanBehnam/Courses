WEBVTT

1
00:00:03.071 --> 00:00:07.810
This lesson is going to be
about rest API's and JSON.

2
00:00:09.050 --> 00:00:11.970
So let me kind of highlights
what each of these are.

3
00:00:11.970 --> 00:00:14.160
At the higher level,
you have your drain board,

4
00:00:14.160 --> 00:00:19.720
you are [INAUDIBLE] some apps in there and
you want to communicate with the cloud.

5
00:00:19.720 --> 00:00:24.330
Some services are either on the Amazon or
Google cloud, whatever you have.

6
00:00:24.330 --> 00:00:26.920
Are some third party services
you want to consume.

7
00:00:26.920 --> 00:00:31.150
How you're going to do that, is typically
it's going to be through arrest API.

8
00:00:31.150 --> 00:00:34.930
Stands for
Representational State Transfer.

9
00:00:34.930 --> 00:00:38.400
Your dragon board is going to make
a call to that cloud service.

10
00:00:38.400 --> 00:00:39.890
A rest cop, and

11
00:00:39.890 --> 00:00:44.450
the data will be exchanged between
this in what is called a JSON format.

12
00:00:44.450 --> 00:00:48.567
Okay, so let me dive into this
a little bit more, what's JSON?

13
00:00:50.260 --> 00:00:53.670
JSON stands for
Java Script Object Notation.

14
00:00:53.670 --> 00:00:55.500
It's nothing but a data structure.

15
00:00:56.700 --> 00:01:01.370
You probably all encountered XML,
you worked with XML in some format.

16
00:01:01.370 --> 00:01:07.340
JSON is just a variant of XML,
meant to be much lighter than XML.

17
00:01:07.340 --> 00:01:11.740
And they've used XML with the SOAP
simple object axis protocol.

18
00:01:13.200 --> 00:01:16.400
JSON is very similar to that.

19
00:01:16.400 --> 00:01:20.650
So let's look at some examples, what
is that JSON data structure look like.

20
00:01:22.530 --> 00:01:28.760
JSON is made up of just two kinds
of elements, one is called objects.

21
00:01:28.760 --> 00:01:32.560
You see it's first line,
you see these curly braces.

22
00:01:32.560 --> 00:01:35.710
It's a collection of name-value pairs.

23
00:01:35.710 --> 00:01:40.150
An example of an object you see in the
third line there, first name Jane comma,

24
00:01:40.150 --> 00:01:44.530
last name Smith, it can go on,
you can have more elements in an object.

25
00:01:44.530 --> 00:01:47.133
Say, phone number, e-mail, etc.

26
00:01:47.133 --> 00:01:50.270
So an object is a collection
of name value pairs, and

27
00:01:50.270 --> 00:01:52.520
you can have multiple name
value pairs in an object.

28
00:01:52.520 --> 00:01:55.950
The second type of element is arrays.

29
00:01:55.950 --> 00:01:59.390
Arrays is an ordered list of values.

30
00:01:59.390 --> 00:02:03.720
Values can be a string, a number true or

31
00:02:03.720 --> 00:02:08.130
false, null, or
it can be an object itself.

32
00:02:08.130 --> 00:02:10.790
Arrays can be a sequence of objects.

33
00:02:10.790 --> 00:02:12.640
For example, look at the fourth line.

34
00:02:12.640 --> 00:02:19.570
An array can be name1, name2, name3,
where each name is an object.

35
00:02:19.570 --> 00:02:23.480
If you look in the last line,
name1 can be firstname lastname pair,

36
00:02:23.480 --> 00:02:24.890
which is an object.

37
00:02:24.890 --> 00:02:29.210
So, an object can contain arrays, and

38
00:02:29.210 --> 00:02:33.370
array can contain objects,
it can be nested within each other.

39
00:02:33.370 --> 00:02:36.240
So it's kind of recursive,
may sound confusing but

40
00:02:36.240 --> 00:02:38.990
let's look at some examples,
it'll flow naturally.

41
00:02:40.130 --> 00:02:46.070
Here's an example from XML, you might
have seen an address book example.

42
00:02:46.070 --> 00:02:50.430
This is one where you have
classic address structure.

43
00:02:50.430 --> 00:02:55.905
If you look at first line, firstName John,
you close the tag for firstName.

44
00:02:55.905 --> 00:02:58.935
As you can see,
every tag name is repeated twice here.

45
00:02:58.935 --> 00:03:00.635
In JSON, you don't have to do that.

46
00:03:00.635 --> 00:03:01.865
Half of that thing is gone.

47
00:03:01.865 --> 00:03:05.025
So in fact, that makes cuts the payload.

48
00:03:05.025 --> 00:03:08.935
In JSON you had,
I just said first name calling John and

49
00:03:08.935 --> 00:03:11.455
start having to close the tag extra.

50
00:03:11.455 --> 00:03:16.680
So, JSON is more not so rigid.

51
00:03:16.680 --> 00:03:18.080
It's more flexible.

52
00:03:18.080 --> 00:03:21.650
So look at this, we have firstName,
lastName, age, address,

53
00:03:21.650 --> 00:03:25.870
kind of a typical entry in
an address book in XML format.

54
00:03:27.880 --> 00:03:29.930
It's a data structure in XML format.

55
00:03:29.930 --> 00:03:33.650
Now, let's look at how
we'll map this in JSON.

56
00:03:35.710 --> 00:03:40.636
That's an example how you can map it
to JSON, there's a firstName, lastName,

57
00:03:40.636 --> 00:03:42.280
value pairs.

58
00:03:42.280 --> 00:03:48.030
Age, address, again,
consists of sub objects in there,

59
00:03:48.030 --> 00:03:51.310
namely, the street, city, postal code.

60
00:03:51.310 --> 00:03:53.890
And finally,
I have an array of phone numbers.

61
00:03:53.890 --> 00:03:55.840
In this case, I just put one number there.

62
00:03:55.840 --> 00:03:59.920
I should have had more than one number,
maybe for your work number, fax,

63
00:03:59.920 --> 00:04:04.740
etc., which makes it
an array of phone numbers.

64
00:04:04.740 --> 00:04:10.210
So you can see nesting objects within
arrays, arrays within objects.

65
00:04:10.210 --> 00:04:12.450
So there are plenty of
examples on the web.

66
00:04:12.450 --> 00:04:16.620
You can look at JSON instructure, and
you'll get used to it pretty fast.

67
00:04:16.620 --> 00:04:18.600
Let's look at some more examples.

68
00:04:19.810 --> 00:04:25.348
First line here person,
again person object, firstName, lastName,

69
00:04:25.348 --> 00:04:31.590
phoneNumber array which is a home,
fax, etc., that's an array.

70
00:04:31.590 --> 00:04:37.480
A student can constitutes
an object here which is name,

71
00:04:37.480 --> 00:04:40.100
Firstname, Lastname and a student ID.

72
00:04:40.100 --> 00:04:44.150
And then a class can mean array,
which consists

73
00:04:44.150 --> 00:04:48.720
of a list of student objects,
student1, student2, student3, etc.

74
00:04:48.720 --> 00:04:55.570
So you combine these to represent whatever
data you want to return from your API.

75
00:04:58.070 --> 00:05:02.180
So, we now switch over to the site,
json.org on the web.

76
00:05:02.180 --> 00:05:05.660
I want to show you,
it's a good tutorial site.

77
00:05:05.660 --> 00:05:08.010
Let's go, there it is.

78
00:05:09.560 --> 00:05:13.960
This kind of summarizes JSON
pretty much in a nutshell.

79
00:05:15.450 --> 00:05:17.980
So look at the first figure there.

80
00:05:17.980 --> 00:05:20.310
That's an object, right?

81
00:05:20.310 --> 00:05:25.105
An object is a name value
pair separated by a colon.

82
00:05:25.105 --> 00:05:28.480
And then you can have this
feedback here that shows comma,

83
00:05:28.480 --> 00:05:32.380
you can have multiple name value pairs,
so on.

84
00:05:32.380 --> 00:05:34.630
And closed within these curly braces.

85
00:05:36.050 --> 00:05:38.840
Second element I told you is the array.

86
00:05:38.840 --> 00:05:41.438
Array is nothing but a sequence of values.

87
00:05:41.438 --> 00:05:44.950
The question is, what are these values?

88
00:05:44.950 --> 00:05:49.960
Values can be string in double codes,
a number,

89
00:05:49.960 --> 00:05:54.110
true or false or null, and
it can be an object or an array.

90
00:05:54.110 --> 00:05:57.112
An array can contain arrays, and so on.

91
00:05:57.112 --> 00:06:01.720
So that's that, and finally,
value is what I just told you.

92
00:06:01.720 --> 00:06:04.640
A value can be any of these.

93
00:06:04.640 --> 00:06:06.540
Including an object in array.

94
00:06:08.530 --> 00:06:11.380
And it shows what a string could be.

95
00:06:11.380 --> 00:06:16.583
So this is a quick way to
look at what the elements of

96
00:06:20.292 --> 00:06:22.650
Of a JSON data structure looks like.

97
00:06:22.650 --> 00:06:27.180
So next time you want to switch to some
examples on the web, we've found this site

98
00:06:28.630 --> 00:06:33.930
which has some actual examples for colors,
let's say, I'll go here, see what it is.

99
00:06:35.730 --> 00:06:37.970
This shows, let me kind of zoom up here.

100
00:06:40.310 --> 00:06:43.890
Array of colors,
because it's square braces here, and

101
00:06:43.890 --> 00:06:48.260
objects in there is color is black,
category is hue, type is primary,

102
00:06:49.260 --> 00:06:52.740
and it has RGBA and hex values.

103
00:06:53.740 --> 00:06:59.490
So these are some examples, so let me
just go back and show one quick one.

104
00:06:59.490 --> 00:07:03.041
Maybe let's look at the YouTube version.

105
00:07:08.884 --> 00:07:13.657
I think this is just
a sequence of video IDs,

106
00:07:13.657 --> 00:07:16.760
actually it's right here.

107
00:07:16.760 --> 00:07:22.710
The from a search,
etag the channel ID, etc.

108
00:07:25.120 --> 00:07:27.110
So we'll switch back to your slides now.

109
00:07:30.220 --> 00:07:32.420
So these are examples.

110
00:07:32.420 --> 00:07:35.000
Next, we'll move on to
what's our RESTful API.

111
00:07:36.910 --> 00:07:40.360
As I said, rest stands for
representational state transfer.

112
00:07:40.360 --> 00:07:45.000
It can also be called rest for
web services.

113
00:07:45.000 --> 00:07:48.090
It kind of use interchangeably
web services, rest API,

114
00:07:48.090 --> 00:07:50.470
RESTful API, all mean the same thing.

115
00:07:52.260 --> 00:07:55.180
So, what is rest API?

116
00:07:55.180 --> 00:08:00.250
We talked about cloud services in
the previous lesson or module.

117
00:08:00.250 --> 00:08:04.520
We showed you some Google regin
API where you can submit an image,

118
00:08:04.520 --> 00:08:07.360
get back tags in the image,
categories in the image.

119
00:08:07.360 --> 00:08:10.760
That's a REST API where people expose

120
00:08:10.760 --> 00:08:13.750
their services in
the cloud via these APIs.

121
00:08:13.750 --> 00:08:18.210
And these APIs allow you to interact
with these services regardless of which

122
00:08:18.210 --> 00:08:19.560
programming language you use.

123
00:08:19.560 --> 00:08:22.570
You can use C++, Java, doesn't matter.

124
00:08:22.570 --> 00:08:25.450
You don't need custom
libraries as the case,

125
00:08:25.450 --> 00:08:30.431
because it is HTTP called the service,
and you can dump some data input,

126
00:08:30.431 --> 00:08:36.060
get parameters in there, and
it spit back data to you in a JSON format.

127
00:08:36.060 --> 00:08:40.250
You process that JSON format return
to you and take appropriate actions.

128
00:08:43.240 --> 00:08:46.510
Actually, let me go to this website
in the link right now here.

129
00:08:46.510 --> 00:08:52.210
I want to show you an actual
interactive demo here.

130
00:08:52.210 --> 00:08:58.790
We found this site which has
exposed a web-service, or REST API.

131
00:08:58.790 --> 00:09:00.980
All it is is a URL here.

132
00:09:03.160 --> 00:09:04.490
You see that one?

133
00:09:04.490 --> 00:09:07.740
It's supposed to return all
the countries and its country code,

134
00:09:07.740 --> 00:09:08.650
if you call this URL.

135
00:09:08.650 --> 00:09:09.520
So I'm going to click on it.

136
00:09:11.020 --> 00:09:14.910
And you see it just spits back a JSON

137
00:09:16.570 --> 00:09:20.100
data back to me in a format
of all the countries' codes.

138
00:09:20.100 --> 00:09:21.670
So here is the URL.

139
00:09:21.670 --> 00:09:22.650
I just call a URL here.

140
00:09:22.650 --> 00:09:25.110
I'm typing it in a browser.

141
00:09:25.110 --> 00:09:28.270
And this URL spits back
a data structure for me.

142
00:09:29.390 --> 00:09:31.680
How about if I want to
selectively query it?

143
00:09:31.680 --> 00:09:33.900
I just want certain countries
with the country code?

144
00:09:33.900 --> 00:09:39.050
So they have another URL here,
which again is a REST API.

145
00:09:39.050 --> 00:09:40.010
Let me click on that.

146
00:09:42.140 --> 00:09:48.160
See, they past data through the URL there,
in this case country code is IN for India.

147
00:09:48.160 --> 00:09:55.391
Let's, let me type CN,
that spits back The country and

148
00:09:55.391 --> 00:10:01.155
the alpha2_code, the three digit code and
the two digit code.

149
00:10:01.155 --> 00:10:04.895
And let's me type some mumbo-jumbo
of country name which probably not,

150
00:10:04.895 --> 00:10:09.245
it tells you okay,
response no matching country was found.

151
00:10:09.245 --> 00:10:12.070
So this is an example of a REST API.

152
00:10:12.070 --> 00:10:15.820
You could say, URL call and
you pass some parameters through the URL.

153
00:10:15.820 --> 00:10:19.560
Could be POST, GET, EXTRA,
it could be a JSON dump.

154
00:10:19.560 --> 00:10:23.340
And you get data back in a JSON format.

155
00:10:23.340 --> 00:10:26.470
So that's a REST API call.

156
00:10:26.470 --> 00:10:29.570
And in fact, you would be creating
some REST APIs in this course,

157
00:10:29.570 --> 00:10:34.090
your own REST APIs where your
services reside on Amazon,

158
00:10:34.090 --> 00:10:39.580
you write some software, you get a call
and you return some data in a JSON format.

159
00:10:39.580 --> 00:10:43.527
So hopefully that gives you some idea for
REST API, so

160
00:10:43.527 --> 00:10:45.906
let me go back to the slides now.

161
00:10:50.174 --> 00:10:50.990
Switch here.

162
00:10:50.990 --> 00:10:57.230
I want to show you how, for
example, Tesla Motors use REST API.

163
00:10:57.230 --> 00:10:59.320
You buy a Tesla.

164
00:10:59.320 --> 00:11:01.510
Along with the car comes APIs.

165
00:11:01.510 --> 00:11:04.308
You can write custom software.

166
00:11:04.308 --> 00:11:08.710
Control things in your car,
it comes with a username password, and

167
00:11:08.710 --> 00:11:13.280
you also login, the Tesla exposed
all these services as API.

168
00:11:16.150 --> 00:11:21.250
If you look at the diagram here, you have
a mobile app or your drive or whatever.

169
00:11:21.250 --> 00:11:26.410
You can talk to the Tesla back end servers
or the cloud service via REST API.

170
00:11:26.410 --> 00:11:28.720
And their servers will
send commands to your car.

171
00:11:28.720 --> 00:11:31.960
You don't have to worry about how
the action's taken up or done.

172
00:11:31.960 --> 00:11:33.720
You don't care.

173
00:11:33.720 --> 00:11:34.970
Tesla publishes its API.

174
00:11:34.970 --> 00:11:37.020
You authenticate against this.

175
00:11:37.020 --> 00:11:41.287
This is my user, password,
if they know which class map is name and

176
00:11:41.287 --> 00:11:42.610
you sync them in.

177
00:11:42.610 --> 00:11:48.430
I want to show you some APIs now.

178
00:11:49.590 --> 00:11:53.621
Here is an official
documentation of the Tesla API,

179
00:11:53.621 --> 00:11:58.943
if you click on the link in the thing,
you will come here for example.

180
00:11:58.943 --> 00:12:04.000
Now this is a link which
lists all the Tesla vehicles.

181
00:12:04.000 --> 00:12:07.690
It returns a response in a JSON format.

182
00:12:07.690 --> 00:12:10.020
You can query it, and

183
00:12:10.020 --> 00:12:15.500
if I switch over here, it shows you
all the things it lets you access.

184
00:12:15.500 --> 00:12:18.970
It shows that the charged
state of your battery,

185
00:12:18.970 --> 00:12:22.250
you can query how much batteries in my
Tesla, climate settings, driving and

186
00:12:22.250 --> 00:12:27.210
position, GUI settings,
I mean you can wake up the car,

187
00:12:27.210 --> 00:12:32.970
set valet mode pin remotely from
your custom app you can write.

188
00:12:32.970 --> 00:12:37.180
I want to show you this little
video next of someone who's used

189
00:12:37.180 --> 00:12:39.760
these API's to do something
custom with their car.

190
00:12:39.760 --> 00:12:43.210
Here's a clip on YouTube.

191
00:12:43.210 --> 00:12:45.950
>> Hi, this is Devin with LaunchKey, and
today we're going to unlock a Tesla.

192
00:12:47.000 --> 00:12:49.319
We have an interface here where
we allow a launch request.

193
00:12:50.370 --> 00:12:53.190
What this is going to do is
bring up a request to the phone.

194
00:12:53.190 --> 00:12:57.590
It's then going to ask me for
my first factor, which is a digital combo.

195
00:12:57.590 --> 00:12:59.500
Then the request is going to come in.

196
00:12:59.500 --> 00:13:02.040
To accept this request,
simply slide it up.

197
00:13:02.040 --> 00:13:06.190
And what this is doing is sending
in the request to the Tesla API to

198
00:13:06.190 --> 00:13:07.730
then unlock this door.

199
00:13:07.730 --> 00:13:11.000
So, what's happening is it's going
to Tesla, the door is unlocked,

200
00:13:11.000 --> 00:13:13.270
and that authentication
happened through LaunchKey.

201
00:13:13.270 --> 00:13:14.600
Thanks.

202
00:13:14.600 --> 00:13:17.410
>> So
what you saw in the video was the app

203
00:13:17.410 --> 00:13:19.530
was communicating with the Tesla servers.

204
00:13:19.530 --> 00:13:21.750
It was sending to the REST,
calling the APIs, and

205
00:13:21.750 --> 00:13:23.880
the server sent the command
to the car to unlock.

206
00:13:24.888 --> 00:13:27.560
The car unlocks, and in fact,

207
00:13:27.560 --> 00:13:32.370
you can use these APIs to pull data from
the server as well as like a push, unlock.

208
00:13:32.370 --> 00:13:34.740
You can say okay, what's my battery level?

209
00:13:34.740 --> 00:13:36.940
You query in that, it talks to the car.

210
00:13:36.940 --> 00:13:41.000
So everybody, as you seen, REST APIs.

211
00:13:41.000 --> 00:13:46.610
These days, I hope one of the Capstones in
this course, if any of you own a Tesla,

212
00:13:46.610 --> 00:13:50.560
you can build something with this API and
put it up at Capstone.

213
00:13:50.560 --> 00:13:52.090
We'd be thrilled to see
something like that.

214
00:13:52.090 --> 00:13:55.575
But then if you own a Tesla,
you probably don't need this course.

215
00:13:55.575 --> 00:14:00.330
>> [LAUGH]
>> So want to summarize here,

216
00:14:00.330 --> 00:14:04.152
back to the slide we started with,.

217
00:14:04.152 --> 00:14:08.467
One of the things you're doing in this
course is you're doing your dragging board

218
00:14:08.467 --> 00:14:09.350
applications.

219
00:14:10.362 --> 00:14:16.480
You're going to have interact with
some of the cloud services, either.

220
00:14:16.480 --> 00:14:20.610
Services people have all ready exposed for
APIs like a Tesla API or a Google API for

221
00:14:20.610 --> 00:14:24.650
vision or Amazon has other services.

222
00:14:24.650 --> 00:14:32.230
You get some data, let's say cross example
is your Dragon Board takes a photo.

223
00:14:32.230 --> 00:14:36.770
You want to do some analysis on an image,
your DragonBoard is not capable of.

224
00:14:36.770 --> 00:14:42.160
You're going to call Google,
say Image Cloud Vision Services.

225
00:14:42.160 --> 00:14:47.270
You dump the image and Google sends you
back categories of maybe the number plate,

226
00:14:47.270 --> 00:14:53.140
or all the things you see in the image and
you consume in a JSON format.

227
00:14:53.140 --> 00:14:55.640
So, you know, complete the loop here.

228
00:14:57.350 --> 00:14:57.980
Next slide.

229
00:14:59.260 --> 00:15:03.850
The good news is if you think,
God how am I going to call these services,

230
00:15:03.850 --> 00:15:06.700
how am I going to process the JSON
data that comes back to me

231
00:15:06.700 --> 00:15:08.710
is you really don't have to do much.

232
00:15:08.710 --> 00:15:10.650
There are frameworks for it.

233
00:15:10.650 --> 00:15:12.720
People have made it really easy.

234
00:15:12.720 --> 00:15:16.995
Other libraries out there, all he
had to do is use these libraries and

235
00:15:16.995 --> 00:15:22.080
embed the URL in this library, call it,
the data comes back, it processes JSON,

236
00:15:22.080 --> 00:15:26.228
gives you a beautiful data structure
in the class format you want.

237
00:15:26.228 --> 00:15:30.391
So really you don't have to do much,
all you have to do is understand this

238
00:15:30.391 --> 00:15:34.830
conceptually, and figure out what JSON
data structure you want to come up for

239
00:15:34.830 --> 00:15:38.450
your own, or if you're consuming
a third party data service,

240
00:15:38.450 --> 00:15:43.162
JSON format, these libraries populated for
you, call it populated for you, and

241
00:15:43.162 --> 00:15:45.255
use it in whatever format you want.

242
00:15:45.255 --> 00:15:49.480
So we will go to that later in the course,
because so far we have being kind of just

243
00:15:49.480 --> 00:15:53.161
talking about this concept of offices but
we need examples.

244
00:15:53.161 --> 00:15:56.703
But here are some examples of
frame works that you can use.

245
00:15:56.703 --> 00:15:59.340
For C++, there a hustle of library,

246
00:15:59.340 --> 00:16:04.500
the first link there has
benchmark of the ones you can use.

247
00:16:04.500 --> 00:16:08.160
So I know you're probably using
various different languages.

248
00:16:08.160 --> 00:16:10.440
We're not biased towards any one language.

249
00:16:10.440 --> 00:16:15.850
But if you want Java, there's a Google
library called GSON that you can use.

250
00:16:15.850 --> 00:16:18.300
So feel free to choose your library.

251
00:16:18.300 --> 00:16:22.118
Each one has its pros and cons depending
on the app, you can choose the right one.

252
00:16:22.118 --> 00:16:24.085
And finally,

253
00:16:24.085 --> 00:16:30.050
one important thing is that JSON by itself
is text based, not binary, the payload.

254
00:16:30.050 --> 00:16:32.060
There are ways to kind of get around it,

255
00:16:32.060 --> 00:16:37.770
like you can embed binary
payloads into the JSON data.

256
00:16:37.770 --> 00:16:40.608
There is one spec called BSON spec.

257
00:16:40.608 --> 00:16:44.492
If you want to transmit JSON
data in a non-binary format,

258
00:16:44.492 --> 00:16:48.480
check out BSON spec,
there are libraries to do that there.

259
00:16:48.480 --> 00:16:53.240
Before I conclude one important point is,
in this course we are talking about

260
00:16:56.010 --> 00:16:59.960
ways to communicate with the server is,
JSON is one way.

261
00:16:59.960 --> 00:17:03.750
But Ara later is going to cover,
actually, in the next lesson, or

262
00:17:03.750 --> 00:17:07.310
so is going to follow this
up MQTT protocol for IOT.

263
00:17:08.840 --> 00:17:10.899
That's another way to
communicate with the server.

264
00:17:12.490 --> 00:17:16.680
Amazon has STK, IOTSTK,
which you referred to.

265
00:17:16.680 --> 00:17:19.969
It uses MTQP protocol,
a binary protocol, for

266
00:17:19.969 --> 00:17:24.833
little devices to send data back,
and he's going to cover that next.

267
00:17:24.833 --> 00:17:27.849
But I think that was the slide,

268
00:17:27.849 --> 00:17:32.837
that concludes the lesson on REST API and
JSON, and

269
00:17:32.837 --> 00:17:37.710
we go more hands on with
code later in this course.

270
00:17:37.710 --> 00:17:38.210
Thank you.