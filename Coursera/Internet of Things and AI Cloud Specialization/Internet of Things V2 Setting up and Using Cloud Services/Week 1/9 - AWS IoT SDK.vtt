WEBVTT

1
00:00:01.710 --> 00:00:05.070
Hey, everyone. So in the last video we went over

2
00:00:05.070 --> 00:00:08.520
the POPs model and the message broker for MQTT protocol.

3
00:00:08.520 --> 00:00:09.940
Here, we're going to go ahead and show you

4
00:00:09.940 --> 00:00:16.465
a more general high level overview of how to use those within AWS IoT and SDK.

5
00:00:16.465 --> 00:00:19.350
So just a quick definition.

6
00:00:19.350 --> 00:00:21.160
When we refer to AWS IoT,

7
00:00:21.160 --> 00:00:24.392
we're referring to the service that AWS has.

8
00:00:24.392 --> 00:00:28.688
However, the way you connect your devices to the cloud.

9
00:00:28.688 --> 00:00:30.990
The SDK however, is what you're going to install on

10
00:00:30.990 --> 00:00:34.575
your different devices in order to communicate with the cloud.

11
00:00:34.575 --> 00:00:38.460
So the SDK does have a bunch of different languages.

12
00:00:38.460 --> 00:00:39.570
For instance, C, Python,

13
00:00:39.570 --> 00:00:40.890
JavaScript and all that stuff,

14
00:00:40.890 --> 00:00:43.640
so choose the language that you feel is best fit.

15
00:00:43.640 --> 00:00:45.660
And there is an SDK available for the Dragon Board?

16
00:00:45.660 --> 00:00:48.590
Yes.

17
00:00:48.590 --> 00:00:51.680
So here we have a bunch of different IoT devices,

18
00:00:51.680 --> 00:00:54.770
we just want go into what exactly an IoT device is.

19
00:00:54.770 --> 00:01:01.115
What the image here shows the Amazon button called the Amazon badge shop.

20
00:01:01.115 --> 00:01:05.660
Amazon sells these, and each button you can map to a product you're using in the house.

21
00:01:05.660 --> 00:01:07.475
For example your toilet paper,

22
00:01:07.475 --> 00:01:08.840
you buy a button and stick it next to your toilet paper,

23
00:01:08.840 --> 00:01:11.670
you run out, just hit the button.

24
00:01:11.670 --> 00:01:14.563
Amazon knows you're ordering a toilet paper,

25
00:01:14.563 --> 00:01:15.925
and it delivers to your house.

26
00:01:15.925 --> 00:01:17.820
And there are some safety measures in there,

27
00:01:17.820 --> 00:01:19.385
so if you get it ten times,

28
00:01:19.385 --> 00:01:22.675
they don't send you like a huge roll of toilet papers.

29
00:01:22.675 --> 00:01:23.925
It has a certain mechanism,

30
00:01:23.925 --> 00:01:26.505
it will send you only once a month and so on.

31
00:01:26.505 --> 00:01:28.155
These buttons are really cheap,

32
00:01:28.155 --> 00:01:31.185
you can buy these and map it to Amazon products.

33
00:01:31.185 --> 00:01:34.130
However, you can do your own thing with it too.

34
00:01:34.130 --> 00:01:36.830
As Ara mentioned, there's Amazon AWS IoT,

35
00:01:36.830 --> 00:01:38.471
you can buy these buttons,

36
00:01:38.471 --> 00:01:40.500
make it do your own custom thing.

37
00:01:40.500 --> 00:01:43.150
This is outside of the Dragon Board, so you buy this button,

38
00:01:43.150 --> 00:01:45.153
stick it in your house, you hit send,

39
00:01:45.153 --> 00:01:47.130
it goes to Amazon Cloud.

40
00:01:47.130 --> 00:01:49.790
You can it do whatever you want.

41
00:01:49.790 --> 00:01:53.010
I don't know, start your Tesla.

42
00:01:53.010 --> 00:01:58.190
Maybe one year you just put this button that goes to the Amazon Cloud,

43
00:01:58.190 --> 00:02:01.340
Amazon Cloud stocked that Tesla services and

44
00:02:01.340 --> 00:02:04.785
then it sends a message to your car or honk the horn, anything like that.

45
00:02:04.785 --> 00:02:08.055
I would highly recommend it, you guys.

46
00:02:08.055 --> 00:02:12.565
It's really cheap, so that could be one off your capstone ideas.

47
00:02:12.565 --> 00:02:14.480
Buy this button and do something cool with it.

48
00:02:14.480 --> 00:02:17.630
And the cool thing about the button is when you press it,

49
00:02:17.630 --> 00:02:20.390
it just sends a signal like this button has been pressed.

50
00:02:20.390 --> 00:02:24.995
So depending on what you want to do with that specific event with that specific device,

51
00:02:24.995 --> 00:02:27.140
you can do whatever you want on the cloud.

52
00:02:27.140 --> 00:02:29.270
Now let's see if you do want to do something more complicated.

53
00:02:29.270 --> 00:02:33.034
Like in the future I believe, a modular lesson,

54
00:02:33.034 --> 00:02:36.410
we have a project where we gather temperature data,

55
00:02:36.410 --> 00:02:38.165
light data and was that sound data?

56
00:02:38.165 --> 00:02:43.020
Yes. We have a project which you will see later on.

57
00:02:43.020 --> 00:02:45.380
Of course we'll give all the source code for it,

58
00:02:45.380 --> 00:02:49.550
where we use the AWS IoT SDK to get temperature,

59
00:02:49.550 --> 00:02:50.930
light and the other sensor data,

60
00:02:50.930 --> 00:02:53.615
and stream it in real time to the cloud, Amazon Cloud.

61
00:02:53.615 --> 00:02:57.935
And you can see the data being plotted dynamically as we get the data.

62
00:02:57.935 --> 00:03:01.960
So one way to use sensor data coming in using the MQTT protocol.

63
00:03:01.960 --> 00:03:05.771
It's either you can send something really simple or something complicated,

64
00:03:05.771 --> 00:03:06.940
but once it's into the cloud,

65
00:03:06.940 --> 00:03:10.389
you can do whatever you want with it depending on the data.

66
00:03:10.389 --> 00:03:15.380
So this is just a quick overview of how IoT service is,

67
00:03:15.380 --> 00:03:18.040
or works on the servers.

68
00:03:18.040 --> 00:03:22.105
Every single time your IoT devices send data,

69
00:03:22.105 --> 00:03:26.630
they'll connect to the AWS IoT which is your quote unquote,

70
00:03:26.630 --> 00:03:29.875
message broker and depending on which type of data.

71
00:03:29.875 --> 00:03:32.090
So let's say you press a button for toilet paper,

72
00:03:32.090 --> 00:03:34.310
you might execute a lambda function,

73
00:03:34.310 --> 00:03:37.420
which will go on and connect you to maybe the Amazon store,

74
00:03:37.420 --> 00:03:40.500
buy you the toilet, paper and ship it to you directly.

75
00:03:40.500 --> 00:03:41.850
Or you might want to let's say,

76
00:03:41.850 --> 00:03:44.925
get your temperature data from your Dragon Board,

77
00:03:44.925 --> 00:03:48.920
send it upstream, maybe store it inside of a database like DynamoDB.

78
00:03:48.920 --> 00:03:50.750
You can do whatever you want,

79
00:03:50.750 --> 00:03:53.225
and maybe you can also do multiple things at once.

80
00:03:53.225 --> 00:03:55.610
Let's say every single time you press a button not only

81
00:03:55.610 --> 00:03:58.318
does it buy you products from Amazon,

82
00:03:58.318 --> 00:04:02.795
but you might also send a push notification to your roommates saying,

83
00:04:02.795 --> 00:04:05.093
"Hey, I'm buying toilet paper."

84
00:04:05.093 --> 00:04:09.540
You can do a bunch of different stuff once the data is on the cloud.

85
00:04:09.540 --> 00:04:11.580
This is another quick overview of

86
00:04:11.580 --> 00:04:14.988
the architecture and just some cool things that you can do with the IoT services,

87
00:04:14.988 --> 00:04:18.075
such as device shadows whenever your devices do go offline.

88
00:04:18.075 --> 00:04:23.435
But for the most part, we're not going to go too much into that.

89
00:04:23.435 --> 00:04:26.570
Real quick, I'm going to go over to the screen and I'm going to show you

90
00:04:26.570 --> 00:04:30.230
a quick example of how this AWS IoT works,

91
00:04:30.230 --> 00:04:33.440
and then we'll go ahead and look at the SDK.

92
00:04:33.440 --> 00:04:40.570
So we will be going over a more hands on experience for IoT service in a different video.

93
00:04:40.570 --> 00:04:42.340
So what I want to focus on here is,

94
00:04:42.340 --> 00:04:44.808
how publisher subscriber model works.

95
00:04:44.808 --> 00:04:47.470
So you're currently logged into the Amazon panel?

96
00:04:47.470 --> 00:04:48.020
Yes.

97
00:04:48.020 --> 00:04:50.710
On the AWS IoT service right?

98
00:04:50.710 --> 00:04:53.055
Yes. If you look here somewhere,

99
00:04:53.055 --> 00:04:55.651
there is this AWS IoT right here.

100
00:04:55.651 --> 00:04:58.635
I want to go ahead and click that.

101
00:04:58.635 --> 00:05:00.920
And on the sidebar I'm going over to test.

102
00:05:00.920 --> 00:05:05.080
This is a kind of a test broker that we can go in and play with.

103
00:05:05.080 --> 00:05:07.200
First off, I'm going to subscribe to topics,

104
00:05:07.200 --> 00:05:10.315
so let's say, toilet paper.

105
00:05:10.315 --> 00:05:13.090
And I'm going to go ahead and subscribe to that topic.

106
00:05:13.090 --> 00:05:14.534
And on the left hand side,

107
00:05:14.534 --> 00:05:17.220
this new area appeared,

108
00:05:17.220 --> 00:05:21.070
and then I'm going to go ahead and create a new topic, let's say food.

109
00:05:21.070 --> 00:05:24.685
That is a new topic.

110
00:05:24.685 --> 00:05:31.620
Now let's say I have a Dragon Board and I sent a request saying we need toilet paper.

111
00:05:34.110 --> 00:05:42.678
And we have our device configured to go to the toilet paper channel.

112
00:05:42.678 --> 00:05:44.740
When we publish to that topic,

113
00:05:44.740 --> 00:05:48.435
we'll notice that they did receive our message.

114
00:05:48.435 --> 00:05:51.645
Go here, right here.

115
00:05:51.645 --> 00:05:54.595
Now, if we have some sort of rule on our server,

116
00:05:54.595 --> 00:05:55.935
if it sees that message,

117
00:05:55.935 --> 00:05:58.655
it can go out and execute whatever we want it to do.

118
00:05:58.655 --> 00:06:01.680
And notice how food did not get that information at

119
00:06:01.680 --> 00:06:04.770
all even though it's sent through the same location.

120
00:06:04.770 --> 00:06:10.490
Let's say and send food, we need cereal and milk let's say,

121
00:06:11.780 --> 00:06:15.541
publish to that topic,

122
00:06:15.541 --> 00:06:18.250
then only food will get that message.

123
00:06:18.250 --> 00:06:22.911
This broker helps you differentiate between different topics,

124
00:06:22.911 --> 00:06:25.555
so different devices can publish to different topics.

125
00:06:25.555 --> 00:06:27.055
And it cannot just be one, maybe,

126
00:06:27.055 --> 00:06:29.415
you can do 10 different topics at once if you want.

127
00:06:29.415 --> 00:06:31.670
That panel you're showing at the bottom is

128
00:06:31.670 --> 00:06:34.495
mimicking the functionality of the client SDK right?

129
00:06:34.495 --> 00:06:35.924
Yes. Yes.

130
00:06:35.924 --> 00:06:37.490
This is, you want to send it from the SDK.

131
00:06:37.490 --> 00:06:40.350
Yes. Well, every single time you publish that's mimicking the.

132
00:06:40.350 --> 00:06:42.922
You do it from the Dragon Board.

133
00:06:42.922 --> 00:06:46.970
Yes. Exactly. So we'll go on and do a more hands on one in

134
00:06:46.970 --> 00:06:51.445
a later module which showcases how exactly you do do it from the Dragon Board.

135
00:06:51.445 --> 00:06:56.210
But we'll just show you some example code from the GitHub repositories on how to do that.

136
00:06:56.210 --> 00:07:01.580
Now, we're moving away from the cloud and moving over to the client side.

137
00:07:01.580 --> 00:07:06.740
Right here I'm looking at the Python SDK for AWS.

138
00:07:06.740 --> 00:07:10.820
You can use any language you want C, Java, whatnot.

139
00:07:10.820 --> 00:07:14.290
Go ahead and choose whatever fits best for your project.

140
00:07:14.290 --> 00:07:16.975
But some of our projects do use the Python,

141
00:07:16.975 --> 00:07:20.370
so I'm just going to go ahead and look at an example of how easy it is to just

142
00:07:20.370 --> 00:07:24.665
connect to the server.

143
00:07:24.665 --> 00:07:28.335
Here you have this complicated block of code here.

144
00:07:28.335 --> 00:07:30.119
All this does, is it just set some settings,

145
00:07:30.119 --> 00:07:32.350
maybe your credentials and all that stuff.

146
00:07:32.350 --> 00:07:35.545
So don't worry too much about this section we'll go over that later.

147
00:07:35.545 --> 00:07:38.070
Here is where the meat happens.

148
00:07:38.070 --> 00:07:39.480
So every single time you have a device,

149
00:07:39.480 --> 00:07:41.215
you want to connect to the server,

150
00:07:41.215 --> 00:07:44.525
then maybe you want to publish some data,

151
00:07:44.525 --> 00:07:47.420
maybe even want to start listening to some data.

152
00:07:47.420 --> 00:07:50.135
Let's say, instead of my topic, it was toilet paper.

153
00:07:50.135 --> 00:07:53.460
So I'm going to subscribe to the toilet paper topic,

154
00:07:53.460 --> 00:07:56.903
maybe my other roommates already sent some messages there.

155
00:07:56.903 --> 00:07:57.935
And then I'm going to go ahead and say,

156
00:07:57.935 --> 00:08:00.680
"Hey we need some toilet paper".

157
00:08:00.680 --> 00:08:04.435
So you can do that through these two simple lines.

158
00:08:04.435 --> 00:08:06.355
And then there's a cool thing where you can actually leave it.

159
00:08:06.355 --> 00:08:08.523
Maybe you don't want to keep getting notified of these events,

160
00:08:08.523 --> 00:08:11.057
you can go ahead and unsubscribe from that.

161
00:08:11.057 --> 00:08:13.010
If your device needs to go offline,

162
00:08:13.010 --> 00:08:15.675
just call a disconnect function.

163
00:08:15.675 --> 00:08:18.690
Here, we are showcasing simple messages.

164
00:08:18.690 --> 00:08:20.590
But imagine if, let's say,

165
00:08:20.590 --> 00:08:23.100
you have that Dragon Board data with all the sensor data,

166
00:08:23.100 --> 00:08:24.700
instead of sending that simple message,

167
00:08:24.700 --> 00:08:27.185
you can go ahead and inside that my payload,

168
00:08:27.185 --> 00:08:29.375
send that data through there.

169
00:08:29.375 --> 00:08:32.445
It's simple lines, or

170
00:08:32.445 --> 00:08:34.220
simple lines of code where you can do

171
00:08:34.220 --> 00:08:37.000
some powerful stuff once it's connected to the cloud.